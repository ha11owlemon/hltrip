if (typeof Promise !== "undefined" && !Promise.prototype.finally) {
  Promise.prototype.finally = function(callback) {
    const promise = this.constructor;
    return this.then(
      (value) => promise.resolve(callback()).then(() => value),
      (reason) => promise.resolve(callback()).then(() => {
        throw reason;
      })
    );
  };
}
;
if (typeof uni !== "undefined" && uni && uni.requireGlobal) {
  const global2 = uni.requireGlobal();
  ArrayBuffer = global2.ArrayBuffer;
  Int8Array = global2.Int8Array;
  Uint8Array = global2.Uint8Array;
  Uint8ClampedArray = global2.Uint8ClampedArray;
  Int16Array = global2.Int16Array;
  Uint16Array = global2.Uint16Array;
  Int32Array = global2.Int32Array;
  Uint32Array = global2.Uint32Array;
  Float32Array = global2.Float32Array;
  Float64Array = global2.Float64Array;
  BigInt64Array = global2.BigInt64Array;
  BigUint64Array = global2.BigUint64Array;
}
;
if (uni.restoreGlobal) {
  uni.restoreGlobal(Vue, weex, plus, setTimeout, clearTimeout, setInterval, clearInterval);
}
(function(vue, shared) {
  var _e, _f, _g, _h, _i, _j;
  "use strict";
  function formatAppLog(type, filename, ...args) {
    if (uni.__log__) {
      uni.__log__(type, filename, ...args);
    } else {
      console[type].apply(console, [...args, filename]);
    }
  }
  function resolveEasycom(component, easycom) {
    return shared.isString(component) ? easycom : component;
  }
  var calendar$1 = {
    /**
        * 农历1900-2100的润大小信息表
        * @Array Of Property
        * @return Hex
        */
    lunarInfo: [
      19416,
      19168,
      42352,
      21717,
      53856,
      55632,
      91476,
      22176,
      39632,
      21970,
      // 1900-1909
      19168,
      42422,
      42192,
      53840,
      119381,
      46400,
      54944,
      44450,
      38320,
      84343,
      // 1910-1919
      18800,
      42160,
      46261,
      27216,
      27968,
      109396,
      11104,
      38256,
      21234,
      18800,
      // 1920-1929
      25958,
      54432,
      59984,
      28309,
      23248,
      11104,
      100067,
      37600,
      116951,
      51536,
      // 1930-1939
      54432,
      120998,
      46416,
      22176,
      107956,
      9680,
      37584,
      53938,
      43344,
      46423,
      // 1940-1949
      27808,
      46416,
      86869,
      19872,
      42416,
      83315,
      21168,
      43432,
      59728,
      27296,
      // 1950-1959
      44710,
      43856,
      19296,
      43748,
      42352,
      21088,
      62051,
      55632,
      23383,
      22176,
      // 1960-1969
      38608,
      19925,
      19152,
      42192,
      54484,
      53840,
      54616,
      46400,
      46752,
      103846,
      // 1970-1979
      38320,
      18864,
      43380,
      42160,
      45690,
      27216,
      27968,
      44870,
      43872,
      38256,
      // 1980-1989
      19189,
      18800,
      25776,
      29859,
      59984,
      27480,
      23232,
      43872,
      38613,
      37600,
      // 1990-1999
      51552,
      55636,
      54432,
      55888,
      30034,
      22176,
      43959,
      9680,
      37584,
      51893,
      // 2000-2009
      43344,
      46240,
      47780,
      44368,
      21977,
      19360,
      42416,
      86390,
      21168,
      43312,
      // 2010-2019
      31060,
      27296,
      44368,
      23378,
      19296,
      42726,
      42208,
      53856,
      60005,
      54576,
      // 2020-2029
      23200,
      30371,
      38608,
      19195,
      19152,
      42192,
      118966,
      53840,
      54560,
      56645,
      // 2030-2039
      46496,
      22224,
      21938,
      18864,
      42359,
      42160,
      43600,
      111189,
      27936,
      44448,
      // 2040-2049
      /** Add By JJonline@JJonline.Cn**/
      84835,
      37744,
      18936,
      18800,
      25776,
      92326,
      59984,
      27424,
      108228,
      43744,
      // 2050-2059
      41696,
      53987,
      51552,
      54615,
      54432,
      55888,
      23893,
      22176,
      42704,
      21972,
      // 2060-2069
      21200,
      43448,
      43344,
      46240,
      46758,
      44368,
      21920,
      43940,
      42416,
      21168,
      // 2070-2079
      45683,
      26928,
      29495,
      27296,
      44368,
      84821,
      19296,
      42352,
      21732,
      53600,
      // 2080-2089
      59752,
      54560,
      55968,
      92838,
      22224,
      19168,
      43476,
      41680,
      53584,
      62034,
      // 2090-2099
      54560
    ],
    // 2100
    /**
        * 公历每个月份的天数普通表
        * @Array Of Property
        * @return Number
        */
    solarMonth: [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31],
    /**
        * 天干地支之天干速查表
        * @Array Of Property trans["甲","乙","丙","丁","戊","己","庚","辛","壬","癸"]
        * @return Cn string
        */
    Gan: ["甲", "乙", "丙", "丁", "戊", "己", "庚", "辛", "壬", "癸"],
    /**
        * 天干地支之地支速查表
        * @Array Of Property
        * @trans["子","丑","寅","卯","辰","巳","午","未","申","酉","戌","亥"]
        * @return Cn string
        */
    Zhi: ["子", "丑", "寅", "卯", "辰", "巳", "午", "未", "申", "酉", "戌", "亥"],
    /**
        * 天干地支之地支速查表<=>生肖
        * @Array Of Property
        * @trans["鼠","牛","虎","兔","龙","蛇","马","羊","猴","鸡","狗","猪"]
        * @return Cn string
        */
    Animals: ["鼠", "牛", "虎", "兔", "龙", "蛇", "马", "羊", "猴", "鸡", "狗", "猪"],
    /**
        * 24节气速查表
        * @Array Of Property
        * @trans["小寒","大寒","立春","雨水","惊蛰","春分","清明","谷雨","立夏","小满","芒种","夏至","小暑","大暑","立秋","处暑","白露","秋分","寒露","霜降","立冬","小雪","大雪","冬至"]
        * @return Cn string
        */
    solarTerm: ["小寒", "大寒", "立春", "雨水", "惊蛰", "春分", "清明", "谷雨", "立夏", "小满", "芒种", "夏至", "小暑", "大暑", "立秋", "处暑", "白露", "秋分", "寒露", "霜降", "立冬", "小雪", "大雪", "冬至"],
    /**
        * 1900-2100各年的24节气日期速查表
        * @Array Of Property
        * @return 0x string For splice
        */
    sTermInfo: [
      "9778397bd097c36b0b6fc9274c91aa",
      "97b6b97bd19801ec9210c965cc920e",
      "97bcf97c3598082c95f8c965cc920f",
      "97bd0b06bdb0722c965ce1cfcc920f",
      "b027097bd097c36b0b6fc9274c91aa",
      "97b6b97bd19801ec9210c965cc920e",
      "97bcf97c359801ec95f8c965cc920f",
      "97bd0b06bdb0722c965ce1cfcc920f",
      "b027097bd097c36b0b6fc9274c91aa",
      "97b6b97bd19801ec9210c965cc920e",
      "97bcf97c359801ec95f8c965cc920f",
      "97bd0b06bdb0722c965ce1cfcc920f",
      "b027097bd097c36b0b6fc9274c91aa",
      "9778397bd19801ec9210c965cc920e",
      "97b6b97bd19801ec95f8c965cc920f",
      "97bd09801d98082c95f8e1cfcc920f",
      "97bd097bd097c36b0b6fc9210c8dc2",
      "9778397bd197c36c9210c9274c91aa",
      "97b6b97bd19801ec95f8c965cc920e",
      "97bd09801d98082c95f8e1cfcc920f",
      "97bd097bd097c36b0b6fc9210c8dc2",
      "9778397bd097c36c9210c9274c91aa",
      "97b6b97bd19801ec95f8c965cc920e",
      "97bcf97c3598082c95f8e1cfcc920f",
      "97bd097bd097c36b0b6fc9210c8dc2",
      "9778397bd097c36c9210c9274c91aa",
      "97b6b97bd19801ec9210c965cc920e",
      "97bcf97c3598082c95f8c965cc920f",
      "97bd097bd097c35b0b6fc920fb0722",
      "9778397bd097c36b0b6fc9274c91aa",
      "97b6b97bd19801ec9210c965cc920e",
      "97bcf97c3598082c95f8c965cc920f",
      "97bd097bd097c35b0b6fc920fb0722",
      "9778397bd097c36b0b6fc9274c91aa",
      "97b6b97bd19801ec9210c965cc920e",
      "97bcf97c359801ec95f8c965cc920f",
      "97bd097bd097c35b0b6fc920fb0722",
      "9778397bd097c36b0b6fc9274c91aa",
      "97b6b97bd19801ec9210c965cc920e",
      "97bcf97c359801ec95f8c965cc920f",
      "97bd097bd097c35b0b6fc920fb0722",
      "9778397bd097c36b0b6fc9274c91aa",
      "97b6b97bd19801ec9210c965cc920e",
      "97bcf97c359801ec95f8c965cc920f",
      "97bd097bd07f595b0b6fc920fb0722",
      "9778397bd097c36b0b6fc9210c8dc2",
      "9778397bd19801ec9210c9274c920e",
      "97b6b97bd19801ec95f8c965cc920f",
      "97bd07f5307f595b0b0bc920fb0722",
      "7f0e397bd097c36b0b6fc9210c8dc2",
      "9778397bd097c36c9210c9274c920e",
      "97b6b97bd19801ec95f8c965cc920f",
      "97bd07f5307f595b0b0bc920fb0722",
      "7f0e397bd097c36b0b6fc9210c8dc2",
      "9778397bd097c36c9210c9274c91aa",
      "97b6b97bd19801ec9210c965cc920e",
      "97bd07f1487f595b0b0bc920fb0722",
      "7f0e397bd097c36b0b6fc9210c8dc2",
      "9778397bd097c36b0b6fc9274c91aa",
      "97b6b97bd19801ec9210c965cc920e",
      "97bcf7f1487f595b0b0bb0b6fb0722",
      "7f0e397bd097c35b0b6fc920fb0722",
      "9778397bd097c36b0b6fc9274c91aa",
      "97b6b97bd19801ec9210c965cc920e",
      "97bcf7f1487f595b0b0bb0b6fb0722",
      "7f0e397bd097c35b0b6fc920fb0722",
      "9778397bd097c36b0b6fc9274c91aa",
      "97b6b97bd19801ec9210c965cc920e",
      "97bcf7f1487f531b0b0bb0b6fb0722",
      "7f0e397bd097c35b0b6fc920fb0722",
      "9778397bd097c36b0b6fc9274c91aa",
      "97b6b97bd19801ec9210c965cc920e",
      "97bcf7f1487f531b0b0bb0b6fb0722",
      "7f0e397bd07f595b0b6fc920fb0722",
      "9778397bd097c36b0b6fc9274c91aa",
      "97b6b97bd19801ec9210c9274c920e",
      "97bcf7f0e47f531b0b0bb0b6fb0722",
      "7f0e397bd07f595b0b0bc920fb0722",
      "9778397bd097c36b0b6fc9210c91aa",
      "97b6b97bd197c36c9210c9274c920e",
      "97bcf7f0e47f531b0b0bb0b6fb0722",
      "7f0e397bd07f595b0b0bc920fb0722",
      "9778397bd097c36b0b6fc9210c8dc2",
      "9778397bd097c36c9210c9274c920e",
      "97b6b7f0e47f531b0723b0b6fb0722",
      "7f0e37f5307f595b0b0bc920fb0722",
      "7f0e397bd097c36b0b6fc9210c8dc2",
      "9778397bd097c36b0b70c9274c91aa",
      "97b6b7f0e47f531b0723b0b6fb0721",
      "7f0e37f1487f595b0b0bb0b6fb0722",
      "7f0e397bd097c35b0b6fc9210c8dc2",
      "9778397bd097c36b0b6fc9274c91aa",
      "97b6b7f0e47f531b0723b0b6fb0721",
      "7f0e27f1487f595b0b0bb0b6fb0722",
      "7f0e397bd097c35b0b6fc920fb0722",
      "9778397bd097c36b0b6fc9274c91aa",
      "97b6b7f0e47f531b0723b0b6fb0721",
      "7f0e27f1487f531b0b0bb0b6fb0722",
      "7f0e397bd097c35b0b6fc920fb0722",
      "9778397bd097c36b0b6fc9274c91aa",
      "97b6b7f0e47f531b0723b0b6fb0721",
      "7f0e27f1487f531b0b0bb0b6fb0722",
      "7f0e397bd097c35b0b6fc920fb0722",
      "9778397bd097c36b0b6fc9274c91aa",
      "97b6b7f0e47f531b0723b0b6fb0721",
      "7f0e27f1487f531b0b0bb0b6fb0722",
      "7f0e397bd07f595b0b0bc920fb0722",
      "9778397bd097c36b0b6fc9274c91aa",
      "97b6b7f0e47f531b0723b0787b0721",
      "7f0e27f0e47f531b0b0bb0b6fb0722",
      "7f0e397bd07f595b0b0bc920fb0722",
      "9778397bd097c36b0b6fc9210c91aa",
      "97b6b7f0e47f149b0723b0787b0721",
      "7f0e27f0e47f531b0723b0b6fb0722",
      "7f0e397bd07f595b0b0bc920fb0722",
      "9778397bd097c36b0b6fc9210c8dc2",
      "977837f0e37f149b0723b0787b0721",
      "7f07e7f0e47f531b0723b0b6fb0722",
      "7f0e37f5307f595b0b0bc920fb0722",
      "7f0e397bd097c35b0b6fc9210c8dc2",
      "977837f0e37f14998082b0787b0721",
      "7f07e7f0e47f531b0723b0b6fb0721",
      "7f0e37f1487f595b0b0bb0b6fb0722",
      "7f0e397bd097c35b0b6fc9210c8dc2",
      "977837f0e37f14998082b0787b06bd",
      "7f07e7f0e47f531b0723b0b6fb0721",
      "7f0e27f1487f531b0b0bb0b6fb0722",
      "7f0e397bd097c35b0b6fc920fb0722",
      "977837f0e37f14998082b0787b06bd",
      "7f07e7f0e47f531b0723b0b6fb0721",
      "7f0e27f1487f531b0b0bb0b6fb0722",
      "7f0e397bd097c35b0b6fc920fb0722",
      "977837f0e37f14998082b0787b06bd",
      "7f07e7f0e47f531b0723b0b6fb0721",
      "7f0e27f1487f531b0b0bb0b6fb0722",
      "7f0e397bd07f595b0b0bc920fb0722",
      "977837f0e37f14998082b0787b06bd",
      "7f07e7f0e47f531b0723b0b6fb0721",
      "7f0e27f1487f531b0b0bb0b6fb0722",
      "7f0e397bd07f595b0b0bc920fb0722",
      "977837f0e37f14998082b0787b06bd",
      "7f07e7f0e47f149b0723b0787b0721",
      "7f0e27f0e47f531b0b0bb0b6fb0722",
      "7f0e397bd07f595b0b0bc920fb0722",
      "977837f0e37f14998082b0723b06bd",
      "7f07e7f0e37f149b0723b0787b0721",
      "7f0e27f0e47f531b0723b0b6fb0722",
      "7f0e397bd07f595b0b0bc920fb0722",
      "977837f0e37f14898082b0723b02d5",
      "7ec967f0e37f14998082b0787b0721",
      "7f07e7f0e47f531b0723b0b6fb0722",
      "7f0e37f1487f595b0b0bb0b6fb0722",
      "7f0e37f0e37f14898082b0723b02d5",
      "7ec967f0e37f14998082b0787b0721",
      "7f07e7f0e47f531b0723b0b6fb0722",
      "7f0e37f1487f531b0b0bb0b6fb0722",
      "7f0e37f0e37f14898082b0723b02d5",
      "7ec967f0e37f14998082b0787b06bd",
      "7f07e7f0e47f531b0723b0b6fb0721",
      "7f0e37f1487f531b0b0bb0b6fb0722",
      "7f0e37f0e37f14898082b072297c35",
      "7ec967f0e37f14998082b0787b06bd",
      "7f07e7f0e47f531b0723b0b6fb0721",
      "7f0e27f1487f531b0b0bb0b6fb0722",
      "7f0e37f0e37f14898082b072297c35",
      "7ec967f0e37f14998082b0787b06bd",
      "7f07e7f0e47f531b0723b0b6fb0721",
      "7f0e27f1487f531b0b0bb0b6fb0722",
      "7f0e37f0e366aa89801eb072297c35",
      "7ec967f0e37f14998082b0787b06bd",
      "7f07e7f0e47f149b0723b0787b0721",
      "7f0e27f1487f531b0b0bb0b6fb0722",
      "7f0e37f0e366aa89801eb072297c35",
      "7ec967f0e37f14998082b0723b06bd",
      "7f07e7f0e47f149b0723b0787b0721",
      "7f0e27f0e47f531b0723b0b6fb0722",
      "7f0e37f0e366aa89801eb072297c35",
      "7ec967f0e37f14998082b0723b06bd",
      "7f07e7f0e37f14998083b0787b0721",
      "7f0e27f0e47f531b0723b0b6fb0722",
      "7f0e37f0e366aa89801eb072297c35",
      "7ec967f0e37f14898082b0723b02d5",
      "7f07e7f0e37f14998082b0787b0721",
      "7f07e7f0e47f531b0723b0b6fb0722",
      "7f0e36665b66aa89801e9808297c35",
      "665f67f0e37f14898082b0723b02d5",
      "7ec967f0e37f14998082b0787b0721",
      "7f07e7f0e47f531b0723b0b6fb0722",
      "7f0e36665b66a449801e9808297c35",
      "665f67f0e37f14898082b0723b02d5",
      "7ec967f0e37f14998082b0787b06bd",
      "7f07e7f0e47f531b0723b0b6fb0721",
      "7f0e36665b66a449801e9808297c35",
      "665f67f0e37f14898082b072297c35",
      "7ec967f0e37f14998082b0787b06bd",
      "7f07e7f0e47f531b0723b0b6fb0721",
      "7f0e26665b66a449801e9808297c35",
      "665f67f0e37f1489801eb072297c35",
      "7ec967f0e37f14998082b0787b06bd",
      "7f07e7f0e47f531b0723b0b6fb0721",
      "7f0e27f1487f531b0b0bb0b6fb0722"
    ],
    /**
        * 数字转中文速查表
        * @Array Of Property
        * @trans ['日','一','二','三','四','五','六','七','八','九','十']
        * @return Cn string
        */
    nStr1: ["日", "一", "二", "三", "四", "五", "六", "七", "八", "九", "十"],
    /**
        * 日期转农历称呼速查表
        * @Array Of Property
        * @trans ['初','十','廿','卅']
        * @return Cn string
        */
    nStr2: ["初", "十", "廿", "卅"],
    /**
        * 月份转农历称呼速查表
        * @Array Of Property
        * @trans ['正','一','二','三','四','五','六','七','八','九','十','冬','腊']
        * @return Cn string
        */
    nStr3: ["正", "二", "三", "四", "五", "六", "七", "八", "九", "十", "冬", "腊"],
    /**
        * 返回农历y年一整年的总天数
        * @param lunar Year
        * @return Number
        * @eg:var count = calendar.lYearDays(1987) ;//count=387
        */
    lYearDays: function(y) {
      var i;
      var sum = 348;
      for (i = 32768; i > 8; i >>= 1) {
        sum += this.lunarInfo[y - 1900] & i ? 1 : 0;
      }
      return sum + this.leapDays(y);
    },
    /**
        * 返回农历y年闰月是哪个月；若y年没有闰月 则返回0
        * @param lunar Year
        * @return Number (0-12)
        * @eg:var leapMonth = calendar.leapMonth(1987) ;//leapMonth=6
        */
    leapMonth: function(y) {
      return this.lunarInfo[y - 1900] & 15;
    },
    /**
        * 返回农历y年闰月的天数 若该年没有闰月则返回0
        * @param lunar Year
        * @return Number (0、29、30)
        * @eg:var leapMonthDay = calendar.leapDays(1987) ;//leapMonthDay=29
        */
    leapDays: function(y) {
      if (this.leapMonth(y)) {
        return this.lunarInfo[y - 1900] & 65536 ? 30 : 29;
      }
      return 0;
    },
    /**
        * 返回农历y年m月（非闰月）的总天数，计算m为闰月时的天数请使用leapDays方法
        * @param lunar Year
        * @return Number (-1、29、30)
        * @eg:var MonthDay = calendar.monthDays(1987,9) ;//MonthDay=29
        */
    monthDays: function(y, m) {
      if (m > 12 || m < 1) {
        return -1;
      }
      return this.lunarInfo[y - 1900] & 65536 >> m ? 30 : 29;
    },
    /**
        * 返回公历(!)y年m月的天数
        * @param solar Year
        * @return Number (-1、28、29、30、31)
        * @eg:var solarMonthDay = calendar.leapDays(1987) ;//solarMonthDay=30
        */
    solarDays: function(y, m) {
      if (m > 12 || m < 1) {
        return -1;
      }
      var ms = m - 1;
      if (ms == 1) {
        return y % 4 == 0 && y % 100 != 0 || y % 400 == 0 ? 29 : 28;
      } else {
        return this.solarMonth[ms];
      }
    },
    /**
       * 农历年份转换为干支纪年
       * @param  lYear 农历年的年份数
       * @return Cn string
       */
    toGanZhiYear: function(lYear) {
      var ganKey = (lYear - 3) % 10;
      var zhiKey = (lYear - 3) % 12;
      if (ganKey == 0)
        ganKey = 10;
      if (zhiKey == 0)
        zhiKey = 12;
      return this.Gan[ganKey - 1] + this.Zhi[zhiKey - 1];
    },
    /**
       * 公历月、日判断所属星座
       * @param  cMonth [description]
       * @param  cDay [description]
       * @return Cn string
       */
    toAstro: function(cMonth, cDay) {
      var s = "魔羯水瓶双鱼白羊金牛双子巨蟹狮子处女天秤天蝎射手魔羯";
      var arr = [20, 19, 21, 21, 21, 22, 23, 23, 23, 23, 22, 22];
      return s.substr(cMonth * 2 - (cDay < arr[cMonth - 1] ? 2 : 0), 2) + "座";
    },
    /**
        * 传入offset偏移量返回干支
        * @param offset 相对甲子的偏移量
        * @return Cn string
        */
    toGanZhi: function(offset) {
      return this.Gan[offset % 10] + this.Zhi[offset % 12];
    },
    /**
        * 传入公历(!)y年获得该年第n个节气的公历日期
        * @param y公历年(1900-2100)；n二十四节气中的第几个节气(1~24)；从n=1(小寒)算起
        * @return day Number
        * @eg:var _24 = calendar.getTerm(1987,3) ;//_24=4;意即1987年2月4日立春
        */
    getTerm: function(y, n) {
      if (y < 1900 || y > 2100) {
        return -1;
      }
      if (n < 1 || n > 24) {
        return -1;
      }
      var _table = this.sTermInfo[y - 1900];
      var _info = [
        parseInt("0x" + _table.substr(0, 5)).toString(),
        parseInt("0x" + _table.substr(5, 5)).toString(),
        parseInt("0x" + _table.substr(10, 5)).toString(),
        parseInt("0x" + _table.substr(15, 5)).toString(),
        parseInt("0x" + _table.substr(20, 5)).toString(),
        parseInt("0x" + _table.substr(25, 5)).toString()
      ];
      var _calday = [
        _info[0].substr(0, 1),
        _info[0].substr(1, 2),
        _info[0].substr(3, 1),
        _info[0].substr(4, 2),
        _info[1].substr(0, 1),
        _info[1].substr(1, 2),
        _info[1].substr(3, 1),
        _info[1].substr(4, 2),
        _info[2].substr(0, 1),
        _info[2].substr(1, 2),
        _info[2].substr(3, 1),
        _info[2].substr(4, 2),
        _info[3].substr(0, 1),
        _info[3].substr(1, 2),
        _info[3].substr(3, 1),
        _info[3].substr(4, 2),
        _info[4].substr(0, 1),
        _info[4].substr(1, 2),
        _info[4].substr(3, 1),
        _info[4].substr(4, 2),
        _info[5].substr(0, 1),
        _info[5].substr(1, 2),
        _info[5].substr(3, 1),
        _info[5].substr(4, 2)
      ];
      return parseInt(_calday[n - 1]);
    },
    /**
        * 传入农历数字月份返回汉语通俗表示法
        * @param lunar month
        * @return Cn string
        * @eg:var cnMonth = calendar.toChinaMonth(12) ;//cnMonth='腊月'
        */
    toChinaMonth: function(m) {
      if (m > 12 || m < 1) {
        return -1;
      }
      var s = this.nStr3[m - 1];
      s += "月";
      return s;
    },
    /**
        * 传入农历日期数字返回汉字表示法
        * @param lunar day
        * @return Cn string
        * @eg:var cnDay = calendar.toChinaDay(21) ;//cnMonth='廿一'
        */
    toChinaDay: function(d) {
      var s;
      switch (d) {
        case 10:
          s = "初十";
          break;
        case 20:
          s = "二十";
          break;
        case 30:
          s = "三十";
          break;
        default:
          s = this.nStr2[Math.floor(d / 10)];
          s += this.nStr1[d % 10];
      }
      return s;
    },
    /**
        * 年份转生肖[!仅能大致转换] => 精确划分生肖分界线是“立春”
        * @param y year
        * @return Cn string
        * @eg:var animal = calendar.getAnimal(1987) ;//animal='兔'
        */
    getAnimal: function(y) {
      return this.Animals[(y - 4) % 12];
    },
    /**
        * 传入阳历年月日获得详细的公历、农历object信息 <=>JSON
        * @param y  solar year
        * @param m  solar month
        * @param d  solar day
        * @return JSON object
        * @eg:__f__('log','at uni_modules/uni-calendar/components/uni-calendar/calendar.js:381',calendar.solar2lunar(1987,11,01));
        */
    solar2lunar: function(y, m, d) {
      if (y < 1900 || y > 2100) {
        return -1;
      }
      if (y == 1900 && m == 1 && d < 31) {
        return -1;
      }
      if (!y) {
        var objDate = /* @__PURE__ */ new Date();
      } else {
        var objDate = new Date(y, parseInt(m) - 1, d);
      }
      var i;
      var leap = 0;
      var temp = 0;
      var y = objDate.getFullYear();
      var m = objDate.getMonth() + 1;
      var d = objDate.getDate();
      var offset = (Date.UTC(objDate.getFullYear(), objDate.getMonth(), objDate.getDate()) - Date.UTC(1900, 0, 31)) / 864e5;
      for (i = 1900; i < 2101 && offset > 0; i++) {
        temp = this.lYearDays(i);
        offset -= temp;
      }
      if (offset < 0) {
        offset += temp;
        i--;
      }
      var isTodayObj = /* @__PURE__ */ new Date();
      var isToday = false;
      if (isTodayObj.getFullYear() == y && isTodayObj.getMonth() + 1 == m && isTodayObj.getDate() == d) {
        isToday = true;
      }
      var nWeek = objDate.getDay();
      var cWeek = this.nStr1[nWeek];
      if (nWeek == 0) {
        nWeek = 7;
      }
      var year = i;
      var leap = this.leapMonth(i);
      var isLeap = false;
      for (i = 1; i < 13 && offset > 0; i++) {
        if (leap > 0 && i == leap + 1 && isLeap == false) {
          --i;
          isLeap = true;
          temp = this.leapDays(year);
        } else {
          temp = this.monthDays(year, i);
        }
        if (isLeap == true && i == leap + 1) {
          isLeap = false;
        }
        offset -= temp;
      }
      if (offset == 0 && leap > 0 && i == leap + 1) {
        if (isLeap) {
          isLeap = false;
        } else {
          isLeap = true;
          --i;
        }
      }
      if (offset < 0) {
        offset += temp;
        --i;
      }
      var month = i;
      var day = offset + 1;
      var sm = m - 1;
      var gzY = this.toGanZhiYear(year);
      var firstNode = this.getTerm(y, m * 2 - 1);
      var secondNode = this.getTerm(y, m * 2);
      var gzM = this.toGanZhi((y - 1900) * 12 + m + 11);
      if (d >= firstNode) {
        gzM = this.toGanZhi((y - 1900) * 12 + m + 12);
      }
      var isTerm = false;
      var Term = null;
      if (firstNode == d) {
        isTerm = true;
        Term = this.solarTerm[m * 2 - 2];
      }
      if (secondNode == d) {
        isTerm = true;
        Term = this.solarTerm[m * 2 - 1];
      }
      var dayCyclical = Date.UTC(y, sm, 1, 0, 0, 0, 0) / 864e5 + 25567 + 10;
      var gzD = this.toGanZhi(dayCyclical + d - 1);
      var astro = this.toAstro(m, d);
      return { "lYear": year, "lMonth": month, "lDay": day, "Animal": this.getAnimal(year), "IMonthCn": (isLeap ? "闰" : "") + this.toChinaMonth(month), "IDayCn": this.toChinaDay(day), "cYear": y, "cMonth": m, "cDay": d, "gzYear": gzY, "gzMonth": gzM, "gzDay": gzD, "isToday": isToday, "isLeap": isLeap, "nWeek": nWeek, "ncWeek": "星期" + cWeek, "isTerm": isTerm, "Term": Term, "astro": astro };
    },
    /**
        * 传入农历年月日以及传入的月份是否闰月获得详细的公历、农历object信息 <=>JSON
        * @param y  lunar year
        * @param m  lunar month
        * @param d  lunar day
        * @param isLeapMonth  lunar month is leap or not.[如果是农历闰月第四个参数赋值true即可]
        * @return JSON object
        * @eg:__f__('log','at uni_modules/uni-calendar/components/uni-calendar/calendar.js:500',calendar.lunar2solar(1987,9,10));
        */
    lunar2solar: function(y, m, d, isLeapMonth) {
      var isLeapMonth = !!isLeapMonth;
      var leapMonth = this.leapMonth(y);
      this.leapDays(y);
      if (isLeapMonth && leapMonth != m) {
        return -1;
      }
      if (y == 2100 && m == 12 && d > 1 || y == 1900 && m == 1 && d < 31) {
        return -1;
      }
      var day = this.monthDays(y, m);
      var _day = day;
      if (isLeapMonth) {
        _day = this.leapDays(y, m);
      }
      if (y < 1900 || y > 2100 || d > _day) {
        return -1;
      }
      var offset = 0;
      for (var i = 1900; i < y; i++) {
        offset += this.lYearDays(i);
      }
      var leap = 0;
      var isAdd = false;
      for (var i = 1; i < m; i++) {
        leap = this.leapMonth(y);
        if (!isAdd) {
          if (leap <= i && leap > 0) {
            offset += this.leapDays(y);
            isAdd = true;
          }
        }
        offset += this.monthDays(y, i);
      }
      if (isLeapMonth) {
        offset += day;
      }
      var stmap = Date.UTC(1900, 1, 30, 0, 0, 0);
      var calObj = new Date((offset + d - 31) * 864e5 + stmap);
      var cY = calObj.getUTCFullYear();
      var cM = calObj.getUTCMonth() + 1;
      var cD = calObj.getUTCDate();
      return this.solar2lunar(cY, cM, cD);
    }
  };
  let Calendar$1 = class Calendar {
    constructor({
      date: date2,
      selected,
      startDate,
      endDate,
      range: range2
    } = {}) {
      this.date = this.getDate(/* @__PURE__ */ new Date());
      this.selected = selected || [];
      this.startDate = startDate;
      this.endDate = endDate;
      this.range = range2;
      this.cleanMultipleStatus();
      this.weeks = {};
    }
    /**
     * 设置日期
     * @param {Object} date
     */
    setDate(date2) {
      this.selectDate = this.getDate(date2);
      this._getWeek(this.selectDate.fullDate);
    }
    /**
     * 清理多选状态
     */
    cleanMultipleStatus() {
      this.multipleStatus = {
        before: "",
        after: "",
        data: []
      };
    }
    /**
     * 重置开始日期
     */
    resetSatrtDate(startDate) {
      this.startDate = startDate;
    }
    /**
     * 重置结束日期
     */
    resetEndDate(endDate) {
      this.endDate = endDate;
    }
    /**
     * 获取任意时间
     */
    getDate(date2, AddDayCount = 0, str = "day") {
      if (!date2) {
        date2 = /* @__PURE__ */ new Date();
      }
      if (typeof date2 !== "object") {
        date2 = date2.replace(/-/g, "/");
      }
      const dd = new Date(date2);
      switch (str) {
        case "day":
          dd.setDate(dd.getDate() + AddDayCount);
          break;
        case "month":
          if (dd.getDate() === 31 && AddDayCount > 0) {
            dd.setDate(dd.getDate() + AddDayCount);
          } else {
            const preMonth = dd.getMonth();
            dd.setMonth(preMonth + AddDayCount);
            const nextMonth = dd.getMonth();
            if (AddDayCount < 0 && preMonth !== 0 && nextMonth - preMonth > AddDayCount) {
              dd.setMonth(nextMonth + (nextMonth - preMonth + AddDayCount));
            }
            if (AddDayCount > 0 && nextMonth - preMonth > AddDayCount) {
              dd.setMonth(nextMonth - (nextMonth - preMonth - AddDayCount));
            }
          }
          break;
        case "year":
          dd.setFullYear(dd.getFullYear() + AddDayCount);
          break;
      }
      const y = dd.getFullYear();
      const m = dd.getMonth() + 1 < 10 ? "0" + (dd.getMonth() + 1) : dd.getMonth() + 1;
      const d = dd.getDate() < 10 ? "0" + dd.getDate() : dd.getDate();
      return {
        fullDate: y + "-" + m + "-" + d,
        year: y,
        month: m,
        date: d,
        day: dd.getDay()
      };
    }
    /**
     * 获取上月剩余天数
     */
    _getLastMonthDays(firstDay, full) {
      let dateArr = [];
      for (let i = firstDay; i > 0; i--) {
        const beforeDate = new Date(full.year, full.month - 1, -i + 1).getDate();
        dateArr.push({
          date: beforeDate,
          month: full.month - 1,
          lunar: this.getlunar(full.year, full.month - 1, beforeDate),
          disable: true
        });
      }
      return dateArr;
    }
    /**
     * 获取本月天数
     */
    _currentMonthDys(dateData, full) {
      let dateArr = [];
      let fullDate = this.date.fullDate;
      for (let i = 1; i <= dateData; i++) {
        let nowDate = full.year + "-" + (full.month < 10 ? full.month : full.month) + "-" + (i < 10 ? "0" + i : i);
        let isDay = fullDate === nowDate;
        let info = this.selected && this.selected.find((item) => {
          if (this.dateEqual(nowDate, item.date)) {
            return item;
          }
        });
        let disableBefore = true;
        let disableAfter = true;
        if (this.startDate) {
          disableBefore = this.dateCompare(this.startDate, nowDate);
        }
        if (this.endDate) {
          disableAfter = this.dateCompare(nowDate, this.endDate);
        }
        let multiples = this.multipleStatus.data;
        let checked = false;
        let multiplesStatus = -1;
        if (this.range) {
          if (multiples) {
            multiplesStatus = multiples.findIndex((item) => {
              return this.dateEqual(item, nowDate);
            });
          }
          if (multiplesStatus !== -1) {
            checked = true;
          }
        }
        let data2 = {
          fullDate: nowDate,
          year: full.year,
          date: i,
          multiple: this.range ? checked : false,
          beforeMultiple: this.dateEqual(this.multipleStatus.before, nowDate),
          afterMultiple: this.dateEqual(this.multipleStatus.after, nowDate),
          month: full.month,
          lunar: this.getlunar(full.year, full.month, i),
          disable: !(disableBefore && disableAfter),
          isDay
        };
        if (info) {
          data2.extraInfo = info;
        }
        dateArr.push(data2);
      }
      return dateArr;
    }
    /**
     * 获取下月天数
     */
    _getNextMonthDays(surplus, full) {
      let dateArr = [];
      for (let i = 1; i < surplus + 1; i++) {
        dateArr.push({
          date: i,
          month: Number(full.month) + 1,
          lunar: this.getlunar(full.year, Number(full.month) + 1, i),
          disable: true
        });
      }
      return dateArr;
    }
    /**
     * 获取当前日期详情
     * @param {Object} date
     */
    getInfo(date2) {
      if (!date2) {
        date2 = /* @__PURE__ */ new Date();
      }
      const dateInfo = this.canlender.find((item) => item.fullDate === this.getDate(date2).fullDate);
      return dateInfo;
    }
    /**
     * 比较时间大小
     */
    dateCompare(startDate, endDate) {
      startDate = new Date(startDate.replace("-", "/").replace("-", "/"));
      endDate = new Date(endDate.replace("-", "/").replace("-", "/"));
      if (startDate <= endDate) {
        return true;
      } else {
        return false;
      }
    }
    /**
     * 比较时间是否相等
     */
    dateEqual(before, after) {
      before = new Date(before.replace("-", "/").replace("-", "/"));
      after = new Date(after.replace("-", "/").replace("-", "/"));
      if (before.getTime() - after.getTime() === 0) {
        return true;
      } else {
        return false;
      }
    }
    /**
     * 获取日期范围内所有日期
     * @param {Object} begin
     * @param {Object} end
     */
    geDateAll(begin, end) {
      var arr = [];
      var ab = begin.split("-");
      var ae = end.split("-");
      var db = /* @__PURE__ */ new Date();
      db.setFullYear(ab[0], ab[1] - 1, ab[2]);
      var de = /* @__PURE__ */ new Date();
      de.setFullYear(ae[0], ae[1] - 1, ae[2]);
      var unixDb = db.getTime() - 24 * 60 * 60 * 1e3;
      var unixDe = de.getTime() - 24 * 60 * 60 * 1e3;
      for (var k = unixDb; k <= unixDe; ) {
        k = k + 24 * 60 * 60 * 1e3;
        arr.push(this.getDate(new Date(parseInt(k))).fullDate);
      }
      return arr;
    }
    /**
     * 计算阴历日期显示
     */
    getlunar(year, month, date2) {
      return calendar$1.solar2lunar(year, month, date2);
    }
    /**
     * 设置打点
     */
    setSelectInfo(data2, value) {
      this.selected = value;
      this._getWeek(data2);
    }
    /**
     *  获取多选状态
     */
    setMultiple(fullDate) {
      let {
        before,
        after
      } = this.multipleStatus;
      if (!this.range)
        return;
      if (before && after) {
        this.multipleStatus.before = "";
        this.multipleStatus.after = "";
        this.multipleStatus.data = [];
      } else {
        if (!before) {
          this.multipleStatus.before = fullDate;
        } else {
          this.multipleStatus.after = fullDate;
          if (this.dateCompare(this.multipleStatus.before, this.multipleStatus.after)) {
            this.multipleStatus.data = this.geDateAll(this.multipleStatus.before, this.multipleStatus.after);
          } else {
            this.multipleStatus.data = this.geDateAll(this.multipleStatus.after, this.multipleStatus.before);
          }
        }
      }
      this._getWeek(fullDate);
    }
    /**
     * 获取每周数据
     * @param {Object} dateData
     */
    _getWeek(dateData) {
      const {
        year,
        month
      } = this.getDate(dateData);
      let firstDay = new Date(year, month - 1, 1).getDay();
      let currentDay = new Date(year, month, 0).getDate();
      let dates = {
        lastMonthDays: this._getLastMonthDays(firstDay, this.getDate(dateData)),
        // 上个月末尾几天
        currentMonthDys: this._currentMonthDys(currentDay, this.getDate(dateData)),
        // 本月天数
        nextMonthDays: [],
        // 下个月开始几天
        weeks: []
      };
      let canlender = [];
      const surplus = 42 - (dates.lastMonthDays.length + dates.currentMonthDys.length);
      dates.nextMonthDays = this._getNextMonthDays(surplus, this.getDate(dateData));
      canlender = canlender.concat(dates.lastMonthDays, dates.currentMonthDys, dates.nextMonthDays);
      let weeks = {};
      for (let i = 0; i < canlender.length; i++) {
        if (i % 7 === 0) {
          weeks[parseInt(i / 7)] = new Array(7);
        }
        weeks[parseInt(i / 7)][i % 7] = canlender[i];
      }
      this.canlender = canlender;
      this.weeks = weeks;
    }
    //静态方法
    // static init(date) {
    // 	if (!this.instance) {
    // 		this.instance = new Calendar(date);
    // 	}
    // 	return this.instance;
    // }
  };
  const isObject$1 = (val) => val !== null && typeof val === "object";
  const defaultDelimiters = ["{", "}"];
  class BaseFormatter {
    constructor() {
      this._caches = /* @__PURE__ */ Object.create(null);
    }
    interpolate(message, values, delimiters = defaultDelimiters) {
      if (!values) {
        return [message];
      }
      let tokens = this._caches[message];
      if (!tokens) {
        tokens = parse(message, delimiters);
        this._caches[message] = tokens;
      }
      return compile(tokens, values);
    }
  }
  const RE_TOKEN_LIST_VALUE = /^(?:\d)+/;
  const RE_TOKEN_NAMED_VALUE = /^(?:\w)+/;
  function parse(format, [startDelimiter, endDelimiter]) {
    const tokens = [];
    let position = 0;
    let text = "";
    while (position < format.length) {
      let char = format[position++];
      if (char === startDelimiter) {
        if (text) {
          tokens.push({ type: "text", value: text });
        }
        text = "";
        let sub = "";
        char = format[position++];
        while (char !== void 0 && char !== endDelimiter) {
          sub += char;
          char = format[position++];
        }
        const isClosed = char === endDelimiter;
        const type = RE_TOKEN_LIST_VALUE.test(sub) ? "list" : isClosed && RE_TOKEN_NAMED_VALUE.test(sub) ? "named" : "unknown";
        tokens.push({ value: sub, type });
      } else {
        text += char;
      }
    }
    text && tokens.push({ type: "text", value: text });
    return tokens;
  }
  function compile(tokens, values) {
    const compiled = [];
    let index2 = 0;
    const mode = Array.isArray(values) ? "list" : isObject$1(values) ? "named" : "unknown";
    if (mode === "unknown") {
      return compiled;
    }
    while (index2 < tokens.length) {
      const token = tokens[index2];
      switch (token.type) {
        case "text":
          compiled.push(token.value);
          break;
        case "list":
          compiled.push(values[parseInt(token.value, 10)]);
          break;
        case "named":
          if (mode === "named") {
            compiled.push(values[token.value]);
          } else {
            {
              console.warn(`Type of token '${token.type}' and format of value '${mode}' don't match!`);
            }
          }
          break;
        case "unknown":
          {
            console.warn(`Detect 'unknown' type of token!`);
          }
          break;
      }
      index2++;
    }
    return compiled;
  }
  const LOCALE_ZH_HANS = "zh-Hans";
  const LOCALE_ZH_HANT = "zh-Hant";
  const LOCALE_EN = "en";
  const LOCALE_FR = "fr";
  const LOCALE_ES = "es";
  const hasOwnProperty$1 = Object.prototype.hasOwnProperty;
  const hasOwn = (val, key) => hasOwnProperty$1.call(val, key);
  const defaultFormatter = new BaseFormatter();
  function include(str, parts) {
    return !!parts.find((part) => str.indexOf(part) !== -1);
  }
  function startsWith(str, parts) {
    return parts.find((part) => str.indexOf(part) === 0);
  }
  function normalizeLocale(locale, messages2) {
    if (!locale) {
      return;
    }
    locale = locale.trim().replace(/_/g, "-");
    if (messages2 && messages2[locale]) {
      return locale;
    }
    locale = locale.toLowerCase();
    if (locale === "chinese") {
      return LOCALE_ZH_HANS;
    }
    if (locale.indexOf("zh") === 0) {
      if (locale.indexOf("-hans") > -1) {
        return LOCALE_ZH_HANS;
      }
      if (locale.indexOf("-hant") > -1) {
        return LOCALE_ZH_HANT;
      }
      if (include(locale, ["-tw", "-hk", "-mo", "-cht"])) {
        return LOCALE_ZH_HANT;
      }
      return LOCALE_ZH_HANS;
    }
    let locales = [LOCALE_EN, LOCALE_FR, LOCALE_ES];
    if (messages2 && Object.keys(messages2).length > 0) {
      locales = Object.keys(messages2);
    }
    const lang = startsWith(locale, locales);
    if (lang) {
      return lang;
    }
  }
  class I18n {
    constructor({ locale, fallbackLocale, messages: messages2, watcher, formater }) {
      this.locale = LOCALE_EN;
      this.fallbackLocale = LOCALE_EN;
      this.message = {};
      this.messages = {};
      this.watchers = [];
      if (fallbackLocale) {
        this.fallbackLocale = fallbackLocale;
      }
      this.formater = formater || defaultFormatter;
      this.messages = messages2 || {};
      this.setLocale(locale || LOCALE_EN);
      if (watcher) {
        this.watchLocale(watcher);
      }
    }
    setLocale(locale) {
      const oldLocale = this.locale;
      this.locale = normalizeLocale(locale, this.messages) || this.fallbackLocale;
      if (!this.messages[this.locale]) {
        this.messages[this.locale] = {};
      }
      this.message = this.messages[this.locale];
      if (oldLocale !== this.locale) {
        this.watchers.forEach((watcher) => {
          watcher(this.locale, oldLocale);
        });
      }
    }
    getLocale() {
      return this.locale;
    }
    watchLocale(fn) {
      const index2 = this.watchers.push(fn) - 1;
      return () => {
        this.watchers.splice(index2, 1);
      };
    }
    add(locale, message, override = true) {
      const curMessages = this.messages[locale];
      if (curMessages) {
        if (override) {
          Object.assign(curMessages, message);
        } else {
          Object.keys(message).forEach((key) => {
            if (!hasOwn(curMessages, key)) {
              curMessages[key] = message[key];
            }
          });
        }
      } else {
        this.messages[locale] = message;
      }
    }
    f(message, values, delimiters) {
      return this.formater.interpolate(message, values, delimiters).join("");
    }
    t(key, locale, values) {
      let message = this.message;
      if (typeof locale === "string") {
        locale = normalizeLocale(locale, this.messages);
        locale && (message = this.messages[locale]);
      } else {
        values = locale;
      }
      if (!hasOwn(message, key)) {
        console.warn(`Cannot translate the value of keypath ${key}. Use the value of keypath as default.`);
        return key;
      }
      return this.formater.interpolate(message[key], values).join("");
    }
  }
  function watchAppLocale(appVm, i18n) {
    if (appVm.$watchLocale) {
      appVm.$watchLocale((newLocale) => {
        i18n.setLocale(newLocale);
      });
    } else {
      appVm.$watch(() => appVm.$locale, (newLocale) => {
        i18n.setLocale(newLocale);
      });
    }
  }
  function getDefaultLocale() {
    if (typeof uni !== "undefined" && uni.getLocale) {
      return uni.getLocale();
    }
    if (typeof global !== "undefined" && global.getLocale) {
      return global.getLocale();
    }
    return LOCALE_EN;
  }
  function initVueI18n(locale, messages2 = {}, fallbackLocale, watcher) {
    if (typeof locale !== "string") {
      [locale, messages2] = [
        messages2,
        locale
      ];
    }
    if (typeof locale !== "string") {
      locale = getDefaultLocale();
    }
    if (typeof fallbackLocale !== "string") {
      fallbackLocale = typeof __uniConfig !== "undefined" && __uniConfig.fallbackLocale || LOCALE_EN;
    }
    const i18n = new I18n({
      locale,
      fallbackLocale,
      messages: messages2,
      watcher
    });
    let t2 = (key, values) => {
      if (typeof getApp !== "function") {
        t2 = function(key2, values2) {
          return i18n.t(key2, values2);
        };
      } else {
        let isWatchedAppLocale = false;
        t2 = function(key2, values2) {
          const appVm = getApp().$vm;
          if (appVm) {
            appVm.$locale;
            if (!isWatchedAppLocale) {
              isWatchedAppLocale = true;
              watchAppLocale(appVm, i18n);
            }
          }
          return i18n.t(key2, values2);
        };
      }
      return t2(key, values);
    };
    return {
      i18n,
      f(message, values, delimiters) {
        return i18n.f(message, values, delimiters);
      },
      t(key, values) {
        return t2(key, values);
      },
      add(locale2, message, override = true) {
        return i18n.add(locale2, message, override);
      },
      watch(fn) {
        return i18n.watchLocale(fn);
      },
      getLocale() {
        return i18n.getLocale();
      },
      setLocale(newLocale) {
        return i18n.setLocale(newLocale);
      }
    };
  }
  const en$2 = {
    "uni-calender.ok": "ok",
    "uni-calender.cancel": "cancel",
    "uni-calender.today": "today",
    "uni-calender.MON": "MON",
    "uni-calender.TUE": "TUE",
    "uni-calender.WED": "WED",
    "uni-calender.THU": "THU",
    "uni-calender.FRI": "FRI",
    "uni-calender.SAT": "SAT",
    "uni-calender.SUN": "SUN"
  };
  const zhHans$2 = {
    "uni-calender.ok": "确定",
    "uni-calender.cancel": "取消",
    "uni-calender.today": "今日",
    "uni-calender.SUN": "日",
    "uni-calender.MON": "一",
    "uni-calender.TUE": "二",
    "uni-calender.WED": "三",
    "uni-calender.THU": "四",
    "uni-calender.FRI": "五",
    "uni-calender.SAT": "六"
  };
  const zhHant$2 = {
    "uni-calender.ok": "確定",
    "uni-calender.cancel": "取消",
    "uni-calender.today": "今日",
    "uni-calender.SUN": "日",
    "uni-calender.MON": "一",
    "uni-calender.TUE": "二",
    "uni-calender.WED": "三",
    "uni-calender.THU": "四",
    "uni-calender.FRI": "五",
    "uni-calender.SAT": "六"
  };
  const i18nMessages$1 = {
    en: en$2,
    "zh-Hans": zhHans$2,
    "zh-Hant": zhHant$2
  };
  const _export_sfc = (sfc, props2) => {
    const target = sfc.__vccOpts || sfc;
    for (const [key, val] of props2) {
      target[key] = val;
    }
    return target;
  };
  const { t: t$4 } = initVueI18n(i18nMessages$1);
  const _sfc_main$T = {
    emits: ["change"],
    props: {
      weeks: {
        type: Object,
        default() {
          return {};
        }
      },
      calendar: {
        type: Object,
        default: () => {
          return {};
        }
      },
      selected: {
        type: Array,
        default: () => {
          return [];
        }
      },
      lunar: {
        type: Boolean,
        default: false
      }
    },
    computed: {
      todayText() {
        return t$4("uni-calender.today");
      }
    },
    methods: {
      choiceDate(weeks) {
        this.$emit("change", weeks);
      }
    }
  };
  function _sfc_render$S(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock(
      "view",
      {
        class: vue.normalizeClass(["uni-calendar-item__weeks-box", {
          "uni-calendar-item--disable": $props.weeks.disable,
          "uni-calendar-item--isDay": $props.calendar.fullDate === $props.weeks.fullDate && $props.weeks.isDay,
          "uni-calendar-item--checked": $props.calendar.fullDate === $props.weeks.fullDate && !$props.weeks.isDay,
          "uni-calendar-item--before-checked": $props.weeks.beforeMultiple,
          "uni-calendar-item--multiple": $props.weeks.multiple,
          "uni-calendar-item--after-checked": $props.weeks.afterMultiple
        }]),
        onClick: _cache[0] || (_cache[0] = ($event) => $options.choiceDate($props.weeks))
      },
      [
        vue.createElementVNode("view", { class: "uni-calendar-item__weeks-box-item" }, [
          $props.selected && $props.weeks.extraInfo ? (vue.openBlock(), vue.createElementBlock("text", {
            key: 0,
            class: "uni-calendar-item__weeks-box-circle"
          })) : vue.createCommentVNode("v-if", true),
          vue.createElementVNode(
            "text",
            {
              class: vue.normalizeClass(["uni-calendar-item__weeks-box-text", {
                "uni-calendar-item--isDay-text": $props.weeks.isDay,
                "uni-calendar-item--isDay": $props.calendar.fullDate === $props.weeks.fullDate && $props.weeks.isDay,
                "uni-calendar-item--checked": $props.calendar.fullDate === $props.weeks.fullDate && !$props.weeks.isDay,
                "uni-calendar-item--before-checked": $props.weeks.beforeMultiple,
                "uni-calendar-item--multiple": $props.weeks.multiple,
                "uni-calendar-item--after-checked": $props.weeks.afterMultiple,
                "uni-calendar-item--disable": $props.weeks.disable
              }])
            },
            vue.toDisplayString($props.weeks.date),
            3
            /* TEXT, CLASS */
          ),
          !$props.lunar && !$props.weeks.extraInfo && $props.weeks.isDay ? (vue.openBlock(), vue.createElementBlock(
            "text",
            {
              key: 1,
              class: vue.normalizeClass(["uni-calendar-item__weeks-lunar-text", {
                "uni-calendar-item--isDay-text": $props.weeks.isDay,
                "uni-calendar-item--isDay": $props.calendar.fullDate === $props.weeks.fullDate && $props.weeks.isDay,
                "uni-calendar-item--checked": $props.calendar.fullDate === $props.weeks.fullDate && !$props.weeks.isDay,
                "uni-calendar-item--before-checked": $props.weeks.beforeMultiple,
                "uni-calendar-item--multiple": $props.weeks.multiple,
                "uni-calendar-item--after-checked": $props.weeks.afterMultiple
              }])
            },
            vue.toDisplayString($options.todayText),
            3
            /* TEXT, CLASS */
          )) : vue.createCommentVNode("v-if", true),
          $props.lunar && !$props.weeks.extraInfo ? (vue.openBlock(), vue.createElementBlock(
            "text",
            {
              key: 2,
              class: vue.normalizeClass(["uni-calendar-item__weeks-lunar-text", {
                "uni-calendar-item--isDay-text": $props.weeks.isDay,
                "uni-calendar-item--isDay": $props.calendar.fullDate === $props.weeks.fullDate && $props.weeks.isDay,
                "uni-calendar-item--checked": $props.calendar.fullDate === $props.weeks.fullDate && !$props.weeks.isDay,
                "uni-calendar-item--before-checked": $props.weeks.beforeMultiple,
                "uni-calendar-item--multiple": $props.weeks.multiple,
                "uni-calendar-item--after-checked": $props.weeks.afterMultiple,
                "uni-calendar-item--disable": $props.weeks.disable
              }])
            },
            vue.toDisplayString($props.weeks.isDay ? $options.todayText : $props.weeks.lunar.IDayCn === "初一" ? $props.weeks.lunar.IMonthCn : $props.weeks.lunar.IDayCn),
            3
            /* TEXT, CLASS */
          )) : vue.createCommentVNode("v-if", true),
          $props.weeks.extraInfo && $props.weeks.extraInfo.info ? (vue.openBlock(), vue.createElementBlock(
            "text",
            {
              key: 3,
              class: vue.normalizeClass(["uni-calendar-item__weeks-lunar-text", {
                "uni-calendar-item--extra": $props.weeks.extraInfo.info,
                "uni-calendar-item--isDay-text": $props.weeks.isDay,
                "uni-calendar-item--isDay": $props.calendar.fullDate === $props.weeks.fullDate && $props.weeks.isDay,
                "uni-calendar-item--checked": $props.calendar.fullDate === $props.weeks.fullDate && !$props.weeks.isDay,
                "uni-calendar-item--before-checked": $props.weeks.beforeMultiple,
                "uni-calendar-item--multiple": $props.weeks.multiple,
                "uni-calendar-item--after-checked": $props.weeks.afterMultiple,
                "uni-calendar-item--disable": $props.weeks.disable
              }])
            },
            vue.toDisplayString($props.weeks.extraInfo.info),
            3
            /* TEXT, CLASS */
          )) : vue.createCommentVNode("v-if", true)
        ])
      ],
      2
      /* CLASS */
    );
  }
  const CalendarItem = /* @__PURE__ */ _export_sfc(_sfc_main$T, [["render", _sfc_render$S], ["__scopeId", "data-v-65626c58"], ["__file", "D:/HLTrip/hl/uni_modules/uni-calendar/components/uni-calendar/uni-calendar-item.vue"]]);
  const { t: t$3 } = initVueI18n(i18nMessages$1);
  const _sfc_main$S = {
    components: {
      CalendarItem
    },
    emits: ["close", "confirm", "change", "monthSwitch"],
    props: {
      date: {
        type: String,
        default: ""
      },
      selected: {
        type: Array,
        default() {
          return [];
        }
      },
      lunar: {
        type: Boolean,
        default: false
      },
      startDate: {
        type: String,
        default: ""
      },
      endDate: {
        type: String,
        default: ""
      },
      range: {
        type: Boolean,
        default: false
      },
      insert: {
        type: Boolean,
        default: true
      },
      showMonth: {
        type: Boolean,
        default: true
      },
      clearDate: {
        type: Boolean,
        default: true
      }
    },
    data() {
      return {
        show: false,
        weeks: [],
        calendar: {},
        nowDate: "",
        aniMaskShow: false
      };
    },
    computed: {
      /**
       * for i18n
       */
      okText() {
        return t$3("uni-calender.ok");
      },
      cancelText() {
        return t$3("uni-calender.cancel");
      },
      todayText() {
        return t$3("uni-calender.today");
      },
      monText() {
        return t$3("uni-calender.MON");
      },
      TUEText() {
        return t$3("uni-calender.TUE");
      },
      WEDText() {
        return t$3("uni-calender.WED");
      },
      THUText() {
        return t$3("uni-calender.THU");
      },
      FRIText() {
        return t$3("uni-calender.FRI");
      },
      SATText() {
        return t$3("uni-calender.SAT");
      },
      SUNText() {
        return t$3("uni-calender.SUN");
      }
    },
    watch: {
      date(newVal) {
        this.init(newVal);
      },
      startDate(val) {
        this.cale.resetSatrtDate(val);
        this.cale.setDate(this.nowDate.fullDate);
        this.weeks = this.cale.weeks;
      },
      endDate(val) {
        this.cale.resetEndDate(val);
        this.cale.setDate(this.nowDate.fullDate);
        this.weeks = this.cale.weeks;
      },
      selected(newVal) {
        this.cale.setSelectInfo(this.nowDate.fullDate, newVal);
        this.weeks = this.cale.weeks;
      }
    },
    created() {
      this.cale = new Calendar$1({
        selected: this.selected,
        startDate: this.startDate,
        endDate: this.endDate,
        range: this.range
      });
      this.init(this.date);
    },
    methods: {
      // 取消穿透
      clean() {
      },
      bindDateChange(e) {
        const value = e.detail.value + "-1";
        this.setDate(value);
        const { year, month } = this.cale.getDate(value);
        this.$emit("monthSwitch", {
          year,
          month
        });
      },
      /**
       * 初始化日期显示
       * @param {Object} date
       */
      init(date2) {
        this.cale.setDate(date2);
        this.weeks = this.cale.weeks;
        this.nowDate = this.calendar = this.cale.getInfo(date2);
      },
      /**
       * 打开日历弹窗
       */
      open() {
        if (this.clearDate && !this.insert) {
          this.cale.cleanMultipleStatus();
          this.init(this.date);
        }
        this.show = true;
        this.$nextTick(() => {
          setTimeout(() => {
            this.aniMaskShow = true;
          }, 50);
        });
      },
      /**
       * 关闭日历弹窗
       */
      close() {
        this.aniMaskShow = false;
        this.$nextTick(() => {
          setTimeout(() => {
            this.show = false;
            this.$emit("close");
          }, 300);
        });
      },
      /**
       * 确认按钮
       */
      confirm() {
        this.setEmit("confirm");
        this.close();
      },
      /**
       * 变化触发
       */
      change() {
        if (!this.insert)
          return;
        this.setEmit("change");
      },
      /**
       * 选择月份触发
       */
      monthSwitch() {
        let {
          year,
          month
        } = this.nowDate;
        this.$emit("monthSwitch", {
          year,
          month: Number(month)
        });
      },
      /**
       * 派发事件
       * @param {Object} name
       */
      setEmit(name2) {
        let {
          year,
          month,
          date: date2,
          fullDate,
          lunar,
          extraInfo
        } = this.calendar;
        this.$emit(name2, {
          range: this.cale.multipleStatus,
          year,
          month,
          date: date2,
          fulldate: fullDate,
          lunar,
          extraInfo: extraInfo || {}
        });
      },
      /**
       * 选择天触发
       * @param {Object} weeks
       */
      choiceDate(weeks) {
        if (weeks.disable)
          return;
        this.calendar = weeks;
        this.cale.setMultiple(this.calendar.fullDate);
        this.weeks = this.cale.weeks;
        this.change();
      },
      /**
       * 回到今天
       */
      backToday() {
        const nowYearMonth = `${this.nowDate.year}-${this.nowDate.month}`;
        const date2 = this.cale.getDate(/* @__PURE__ */ new Date());
        const todayYearMonth = `${date2.year}-${date2.month}`;
        this.init(date2.fullDate);
        if (nowYearMonth !== todayYearMonth) {
          this.monthSwitch();
        }
        this.change();
      },
      /**
       * 上个月
       */
      pre() {
        const preDate = this.cale.getDate(this.nowDate.fullDate, -1, "month").fullDate;
        this.setDate(preDate);
        this.monthSwitch();
      },
      /**
       * 下个月
       */
      next() {
        const nextDate = this.cale.getDate(this.nowDate.fullDate, 1, "month").fullDate;
        this.setDate(nextDate);
        this.monthSwitch();
      },
      /**
       * 设置日期
       * @param {Object} date
       */
      setDate(date2) {
        this.cale.setDate(date2);
        this.weeks = this.cale.weeks;
        this.nowDate = this.cale.getInfo(date2);
      }
    }
  };
  function _sfc_render$R(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_calendar_item = vue.resolveComponent("calendar-item");
    return vue.openBlock(), vue.createElementBlock("view", { class: "uni-calendar" }, [
      !$props.insert && $data.show ? (vue.openBlock(), vue.createElementBlock(
        "view",
        {
          key: 0,
          class: vue.normalizeClass(["uni-calendar__mask", { "uni-calendar--mask-show": $data.aniMaskShow }]),
          onClick: _cache[0] || (_cache[0] = (...args) => $options.clean && $options.clean(...args))
        },
        null,
        2
        /* CLASS */
      )) : vue.createCommentVNode("v-if", true),
      $props.insert || $data.show ? (vue.openBlock(), vue.createElementBlock(
        "view",
        {
          key: 1,
          class: vue.normalizeClass(["uni-calendar__content", { "uni-calendar--fixed": !$props.insert, "uni-calendar--ani-show": $data.aniMaskShow }])
        },
        [
          !$props.insert ? (vue.openBlock(), vue.createElementBlock("view", {
            key: 0,
            class: "uni-calendar__header uni-calendar--fixed-top"
          }, [
            vue.createElementVNode("view", {
              class: "uni-calendar__header-btn-box",
              onClick: _cache[1] || (_cache[1] = (...args) => $options.close && $options.close(...args))
            }, [
              vue.createElementVNode(
                "text",
                { class: "uni-calendar__header-text uni-calendar--fixed-width" },
                vue.toDisplayString($options.cancelText),
                1
                /* TEXT */
              )
            ]),
            vue.createElementVNode("view", {
              class: "uni-calendar__header-btn-box",
              onClick: _cache[2] || (_cache[2] = (...args) => $options.confirm && $options.confirm(...args))
            }, [
              vue.createElementVNode(
                "text",
                { class: "uni-calendar__header-text uni-calendar--fixed-width" },
                vue.toDisplayString($options.okText),
                1
                /* TEXT */
              )
            ])
          ])) : vue.createCommentVNode("v-if", true),
          vue.createElementVNode("view", { class: "uni-calendar__header" }, [
            vue.createElementVNode("view", {
              class: "uni-calendar__header-btn-box",
              onClick: _cache[3] || (_cache[3] = vue.withModifiers((...args) => $options.pre && $options.pre(...args), ["stop"]))
            }, [
              vue.createElementVNode("view", { class: "uni-calendar__header-btn uni-calendar--left" })
            ]),
            vue.createElementVNode("picker", {
              mode: "date",
              value: $props.date,
              fields: "month",
              onChange: _cache[4] || (_cache[4] = (...args) => $options.bindDateChange && $options.bindDateChange(...args))
            }, [
              vue.createElementVNode(
                "text",
                { class: "uni-calendar__header-text" },
                vue.toDisplayString(($data.nowDate.year || "") + " / " + ($data.nowDate.month || "")),
                1
                /* TEXT */
              )
            ], 40, ["value"]),
            vue.createElementVNode("view", {
              class: "uni-calendar__header-btn-box",
              onClick: _cache[5] || (_cache[5] = vue.withModifiers((...args) => $options.next && $options.next(...args), ["stop"]))
            }, [
              vue.createElementVNode("view", { class: "uni-calendar__header-btn uni-calendar--right" })
            ]),
            vue.createElementVNode(
              "text",
              {
                class: "uni-calendar__backtoday",
                onClick: _cache[6] || (_cache[6] = (...args) => $options.backToday && $options.backToday(...args))
              },
              vue.toDisplayString($options.todayText),
              1
              /* TEXT */
            )
          ]),
          vue.createElementVNode("view", { class: "uni-calendar__box" }, [
            $props.showMonth ? (vue.openBlock(), vue.createElementBlock("view", {
              key: 0,
              class: "uni-calendar__box-bg"
            }, [
              vue.createElementVNode(
                "text",
                { class: "uni-calendar__box-bg-text" },
                vue.toDisplayString($data.nowDate.month),
                1
                /* TEXT */
              )
            ])) : vue.createCommentVNode("v-if", true),
            vue.createElementVNode("view", { class: "uni-calendar__weeks" }, [
              vue.createElementVNode("view", { class: "uni-calendar__weeks-day" }, [
                vue.createElementVNode(
                  "text",
                  { class: "uni-calendar__weeks-day-text" },
                  vue.toDisplayString($options.SUNText),
                  1
                  /* TEXT */
                )
              ]),
              vue.createElementVNode("view", { class: "uni-calendar__weeks-day" }, [
                vue.createElementVNode(
                  "text",
                  { class: "uni-calendar__weeks-day-text" },
                  vue.toDisplayString($options.monText),
                  1
                  /* TEXT */
                )
              ]),
              vue.createElementVNode("view", { class: "uni-calendar__weeks-day" }, [
                vue.createElementVNode(
                  "text",
                  { class: "uni-calendar__weeks-day-text" },
                  vue.toDisplayString($options.TUEText),
                  1
                  /* TEXT */
                )
              ]),
              vue.createElementVNode("view", { class: "uni-calendar__weeks-day" }, [
                vue.createElementVNode(
                  "text",
                  { class: "uni-calendar__weeks-day-text" },
                  vue.toDisplayString($options.WEDText),
                  1
                  /* TEXT */
                )
              ]),
              vue.createElementVNode("view", { class: "uni-calendar__weeks-day" }, [
                vue.createElementVNode(
                  "text",
                  { class: "uni-calendar__weeks-day-text" },
                  vue.toDisplayString($options.THUText),
                  1
                  /* TEXT */
                )
              ]),
              vue.createElementVNode("view", { class: "uni-calendar__weeks-day" }, [
                vue.createElementVNode(
                  "text",
                  { class: "uni-calendar__weeks-day-text" },
                  vue.toDisplayString($options.FRIText),
                  1
                  /* TEXT */
                )
              ]),
              vue.createElementVNode("view", { class: "uni-calendar__weeks-day" }, [
                vue.createElementVNode(
                  "text",
                  { class: "uni-calendar__weeks-day-text" },
                  vue.toDisplayString($options.SATText),
                  1
                  /* TEXT */
                )
              ])
            ]),
            (vue.openBlock(true), vue.createElementBlock(
              vue.Fragment,
              null,
              vue.renderList($data.weeks, (item, weekIndex) => {
                return vue.openBlock(), vue.createElementBlock("view", {
                  class: "uni-calendar__weeks",
                  key: weekIndex
                }, [
                  (vue.openBlock(true), vue.createElementBlock(
                    vue.Fragment,
                    null,
                    vue.renderList(item, (weeks, weeksIndex) => {
                      return vue.openBlock(), vue.createElementBlock("view", {
                        class: "uni-calendar__weeks-item",
                        key: weeksIndex
                      }, [
                        vue.createVNode(_component_calendar_item, {
                          class: "uni-calendar-item--hook",
                          weeks,
                          calendar: $data.calendar,
                          selected: $props.selected,
                          lunar: $props.lunar,
                          onChange: $options.choiceDate
                        }, null, 8, ["weeks", "calendar", "selected", "lunar", "onChange"])
                      ]);
                    }),
                    128
                    /* KEYED_FRAGMENT */
                  ))
                ]);
              }),
              128
              /* KEYED_FRAGMENT */
            ))
          ])
        ],
        2
        /* CLASS */
      )) : vue.createCommentVNode("v-if", true)
    ]);
  }
  const __easycom_0$7 = /* @__PURE__ */ _export_sfc(_sfc_main$S, [["render", _sfc_render$R], ["__scopeId", "data-v-b6ab2cfb"], ["__file", "D:/HLTrip/hl/uni_modules/uni-calendar/components/uni-calendar/uni-calendar.vue"]]);
  class MPAnimation {
    constructor(options, _this) {
      this.options = options;
      this.animation = uni.createAnimation({
        ...options
      });
      this.currentStepAnimates = {};
      this.next = 0;
      this.$ = _this;
    }
    _nvuePushAnimates(type, args) {
      let aniObj = this.currentStepAnimates[this.next];
      let styles = {};
      if (!aniObj) {
        styles = {
          styles: {},
          config: {}
        };
      } else {
        styles = aniObj;
      }
      if (animateTypes1.includes(type)) {
        if (!styles.styles.transform) {
          styles.styles.transform = "";
        }
        let unit = "";
        if (type === "rotate") {
          unit = "deg";
        }
        styles.styles.transform += `${type}(${args + unit}) `;
      } else {
        styles.styles[type] = `${args}`;
      }
      this.currentStepAnimates[this.next] = styles;
    }
    _animateRun(styles = {}, config = {}) {
      let ref = this.$.$refs["ani"].ref;
      if (!ref)
        return;
      return new Promise((resolve, reject) => {
        nvueAnimation.transition(ref, {
          styles,
          ...config
        }, (res) => {
          resolve();
        });
      });
    }
    _nvueNextAnimate(animates, step = 0, fn) {
      let obj = animates[step];
      if (obj) {
        let {
          styles,
          config
        } = obj;
        this._animateRun(styles, config).then(() => {
          step += 1;
          this._nvueNextAnimate(animates, step, fn);
        });
      } else {
        this.currentStepAnimates = {};
        typeof fn === "function" && fn();
        this.isEnd = true;
      }
    }
    step(config = {}) {
      this.animation.step(config);
      return this;
    }
    run(fn) {
      this.$.animationData = this.animation.export();
      this.$.timer = setTimeout(() => {
        typeof fn === "function" && fn();
      }, this.$.durationTime);
    }
  }
  const animateTypes1 = [
    "matrix",
    "matrix3d",
    "rotate",
    "rotate3d",
    "rotateX",
    "rotateY",
    "rotateZ",
    "scale",
    "scale3d",
    "scaleX",
    "scaleY",
    "scaleZ",
    "skew",
    "skewX",
    "skewY",
    "translate",
    "translate3d",
    "translateX",
    "translateY",
    "translateZ"
  ];
  const animateTypes2 = ["opacity", "backgroundColor"];
  const animateTypes3 = ["width", "height", "left", "right", "top", "bottom"];
  animateTypes1.concat(animateTypes2, animateTypes3).forEach((type) => {
    MPAnimation.prototype[type] = function(...args) {
      this.animation[type](...args);
      return this;
    };
  });
  function createAnimation(option, _this) {
    if (!_this)
      return;
    clearTimeout(_this.timer);
    return new MPAnimation(option, _this);
  }
  const _sfc_main$R = {
    name: "uniTransition",
    emits: ["click", "change"],
    props: {
      show: {
        type: Boolean,
        default: false
      },
      modeClass: {
        type: [Array, String],
        default() {
          return "fade";
        }
      },
      duration: {
        type: Number,
        default: 300
      },
      styles: {
        type: Object,
        default() {
          return {};
        }
      },
      customClass: {
        type: String,
        default: ""
      },
      onceRender: {
        type: Boolean,
        default: false
      }
    },
    data() {
      return {
        isShow: false,
        transform: "",
        opacity: 1,
        animationData: {},
        durationTime: 300,
        config: {}
      };
    },
    watch: {
      show: {
        handler(newVal) {
          if (newVal) {
            this.open();
          } else {
            if (this.isShow) {
              this.close();
            }
          }
        },
        immediate: true
      }
    },
    computed: {
      // 生成样式数据
      stylesObject() {
        let styles = {
          ...this.styles,
          "transition-duration": this.duration / 1e3 + "s"
        };
        let transform = "";
        for (let i in styles) {
          let line = this.toLine(i);
          transform += line + ":" + styles[i] + ";";
        }
        return transform;
      },
      // 初始化动画条件
      transformStyles() {
        return "transform:" + this.transform + ";opacity:" + this.opacity + ";" + this.stylesObject;
      }
    },
    created() {
      this.config = {
        duration: this.duration,
        timingFunction: "ease",
        transformOrigin: "50% 50%",
        delay: 0
      };
      this.durationTime = this.duration;
    },
    methods: {
      /**
       *  ref 触发 初始化动画
       */
      init(obj = {}) {
        if (obj.duration) {
          this.durationTime = obj.duration;
        }
        this.animation = createAnimation(Object.assign(this.config, obj), this);
      },
      /**
       * 点击组件触发回调
       */
      onClick() {
        this.$emit("click", {
          detail: this.isShow
        });
      },
      /**
       * ref 触发 动画分组
       * @param {Object} obj
       */
      step(obj, config = {}) {
        if (!this.animation)
          return;
        for (let i in obj) {
          try {
            if (typeof obj[i] === "object") {
              this.animation[i](...obj[i]);
            } else {
              this.animation[i](obj[i]);
            }
          } catch (e) {
            formatAppLog("error", "at uni_modules/uni-transition/components/uni-transition/uni-transition.vue:148", `方法 ${i} 不存在`);
          }
        }
        this.animation.step(config);
        return this;
      },
      /**
       *  ref 触发 执行动画
       */
      run(fn) {
        if (!this.animation)
          return;
        this.animation.run(fn);
      },
      // 开始过度动画
      open() {
        clearTimeout(this.timer);
        this.transform = "";
        this.isShow = true;
        let { opacity, transform } = this.styleInit(false);
        if (typeof opacity !== "undefined") {
          this.opacity = opacity;
        }
        this.transform = transform;
        this.$nextTick(() => {
          this.timer = setTimeout(() => {
            this.animation = createAnimation(this.config, this);
            this.tranfromInit(false).step();
            this.animation.run();
            this.$emit("change", {
              detail: this.isShow
            });
          }, 20);
        });
      },
      // 关闭过度动画
      close(type) {
        if (!this.animation)
          return;
        this.tranfromInit(true).step().run(() => {
          this.isShow = false;
          this.animationData = null;
          this.animation = null;
          let { opacity, transform } = this.styleInit(false);
          this.opacity = opacity || 1;
          this.transform = transform;
          this.$emit("change", {
            detail: this.isShow
          });
        });
      },
      // 处理动画开始前的默认样式
      styleInit(type) {
        let styles = {
          transform: ""
        };
        let buildStyle = (type2, mode) => {
          if (mode === "fade") {
            styles.opacity = this.animationType(type2)[mode];
          } else {
            styles.transform += this.animationType(type2)[mode] + " ";
          }
        };
        if (typeof this.modeClass === "string") {
          buildStyle(type, this.modeClass);
        } else {
          this.modeClass.forEach((mode) => {
            buildStyle(type, mode);
          });
        }
        return styles;
      },
      // 处理内置组合动画
      tranfromInit(type) {
        let buildTranfrom = (type2, mode) => {
          let aniNum = null;
          if (mode === "fade") {
            aniNum = type2 ? 0 : 1;
          } else {
            aniNum = type2 ? "-100%" : "0";
            if (mode === "zoom-in") {
              aniNum = type2 ? 0.8 : 1;
            }
            if (mode === "zoom-out") {
              aniNum = type2 ? 1.2 : 1;
            }
            if (mode === "slide-right") {
              aniNum = type2 ? "100%" : "0";
            }
            if (mode === "slide-bottom") {
              aniNum = type2 ? "100%" : "0";
            }
          }
          this.animation[this.animationMode()[mode]](aniNum);
        };
        if (typeof this.modeClass === "string") {
          buildTranfrom(type, this.modeClass);
        } else {
          this.modeClass.forEach((mode) => {
            buildTranfrom(type, mode);
          });
        }
        return this.animation;
      },
      animationType(type) {
        return {
          fade: type ? 1 : 0,
          "slide-top": `translateY(${type ? "0" : "-100%"})`,
          "slide-right": `translateX(${type ? "0" : "100%"})`,
          "slide-bottom": `translateY(${type ? "0" : "100%"})`,
          "slide-left": `translateX(${type ? "0" : "-100%"})`,
          "zoom-in": `scaleX(${type ? 1 : 0.8}) scaleY(${type ? 1 : 0.8})`,
          "zoom-out": `scaleX(${type ? 1 : 1.2}) scaleY(${type ? 1 : 1.2})`
        };
      },
      // 内置动画类型与实际动画对应字典
      animationMode() {
        return {
          fade: "opacity",
          "slide-top": "translateY",
          "slide-right": "translateX",
          "slide-bottom": "translateY",
          "slide-left": "translateX",
          "zoom-in": "scale",
          "zoom-out": "scale"
        };
      },
      // 驼峰转中横线
      toLine(name2) {
        return name2.replace(/([A-Z])/g, "-$1").toLowerCase();
      }
    }
  };
  function _sfc_render$Q(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.withDirectives((vue.openBlock(), vue.createElementBlock("view", {
      ref: "ani",
      animation: $data.animationData,
      class: vue.normalizeClass($props.customClass),
      style: vue.normalizeStyle($options.transformStyles),
      onClick: _cache[0] || (_cache[0] = (...args) => $options.onClick && $options.onClick(...args))
    }, [
      vue.renderSlot(_ctx.$slots, "default")
    ], 14, ["animation"])), [
      [vue.vShow, $data.isShow]
    ]);
  }
  const __easycom_0$6 = /* @__PURE__ */ _export_sfc(_sfc_main$R, [["render", _sfc_render$Q], ["__file", "D:/HLTrip/hl/uni_modules/uni-transition/components/uni-transition/uni-transition.vue"]]);
  const _sfc_main$Q = {
    name: "uniPopup",
    components: {},
    emits: ["change", "maskClick"],
    props: {
      // 开启动画
      animation: {
        type: Boolean,
        default: true
      },
      // 弹出层类型，可选值，top: 顶部弹出层；bottom：底部弹出层；center：全屏弹出层
      // message: 消息提示 ; dialog : 对话框
      type: {
        type: String,
        default: "center"
      },
      // maskClick
      isMaskClick: {
        type: Boolean,
        default: null
      },
      // TODO 2 个版本后废弃属性 ，使用 isMaskClick
      maskClick: {
        type: Boolean,
        default: null
      },
      backgroundColor: {
        type: String,
        default: "none"
      },
      safeArea: {
        type: Boolean,
        default: true
      },
      maskBackgroundColor: {
        type: String,
        default: "rgba(0, 0, 0, 0.4)"
      },
      borderRadius: {
        type: String
      }
    },
    watch: {
      /**
       * 监听type类型
       */
      type: {
        handler: function(type) {
          if (!this.config[type])
            return;
          this[this.config[type]](true);
        },
        immediate: true
      },
      isDesktop: {
        handler: function(newVal) {
          if (!this.config[newVal])
            return;
          this[this.config[this.type]](true);
        },
        immediate: true
      },
      /**
       * 监听遮罩是否可点击
       * @param {Object} val
       */
      maskClick: {
        handler: function(val) {
          this.mkclick = val;
        },
        immediate: true
      },
      isMaskClick: {
        handler: function(val) {
          this.mkclick = val;
        },
        immediate: true
      },
      // H5 下禁止底部滚动
      showPopup(show) {
      }
    },
    data() {
      return {
        duration: 300,
        ani: [],
        showPopup: false,
        showTrans: false,
        popupWidth: 0,
        popupHeight: 0,
        config: {
          top: "top",
          bottom: "bottom",
          center: "center",
          left: "left",
          right: "right",
          message: "top",
          dialog: "center",
          share: "bottom"
        },
        maskClass: {
          position: "fixed",
          bottom: 0,
          top: 0,
          left: 0,
          right: 0,
          backgroundColor: "rgba(0, 0, 0, 0.4)"
        },
        transClass: {
          backgroundColor: "transparent",
          borderRadius: this.borderRadius || "0",
          position: "fixed",
          left: 0,
          right: 0
        },
        maskShow: true,
        mkclick: true,
        popupstyle: "top"
      };
    },
    computed: {
      getStyles() {
        let res = { backgroundColor: this.bg };
        if (this.borderRadius || "0") {
          res = Object.assign(res, { borderRadius: this.borderRadius });
        }
        return res;
      },
      isDesktop() {
        return this.popupWidth >= 500 && this.popupHeight >= 500;
      },
      bg() {
        if (this.backgroundColor === "" || this.backgroundColor === "none") {
          return "transparent";
        }
        return this.backgroundColor;
      }
    },
    mounted() {
      const fixSize = () => {
        const {
          windowWidth,
          windowHeight,
          windowTop,
          safeArea,
          screenHeight,
          safeAreaInsets
        } = uni.getSystemInfoSync();
        this.popupWidth = windowWidth;
        this.popupHeight = windowHeight + (windowTop || 0);
        if (safeArea && this.safeArea) {
          this.safeAreaInsets = safeAreaInsets.bottom;
        } else {
          this.safeAreaInsets = 0;
        }
      };
      fixSize();
    },
    // TODO vue3
    unmounted() {
      this.setH5Visible();
    },
    activated() {
      this.setH5Visible(!this.showPopup);
    },
    deactivated() {
      this.setH5Visible(true);
    },
    created() {
      if (this.isMaskClick === null && this.maskClick === null) {
        this.mkclick = true;
      } else {
        this.mkclick = this.isMaskClick !== null ? this.isMaskClick : this.maskClick;
      }
      if (this.animation) {
        this.duration = 300;
      } else {
        this.duration = 0;
      }
      this.messageChild = null;
      this.clearPropagation = false;
      this.maskClass.backgroundColor = this.maskBackgroundColor;
    },
    methods: {
      setH5Visible(visible = true) {
      },
      /**
       * 公用方法，不显示遮罩层
       */
      closeMask() {
        this.maskShow = false;
      },
      /**
       * 公用方法，遮罩层禁止点击
       */
      disableMask() {
        this.mkclick = false;
      },
      // TODO nvue 取消冒泡
      clear(e) {
        e.stopPropagation();
        this.clearPropagation = true;
      },
      open(direction) {
        if (this.showPopup) {
          return;
        }
        let innerType = ["top", "center", "bottom", "left", "right", "message", "dialog", "share"];
        if (!(direction && innerType.indexOf(direction) !== -1)) {
          direction = this.type;
        }
        if (!this.config[direction]) {
          formatAppLog("error", "at uni_modules/uni-popup/components/uni-popup/uni-popup.vue:298", "缺少类型：", direction);
          return;
        }
        this[this.config[direction]]();
        this.$emit("change", {
          show: true,
          type: direction
        });
      },
      close(type) {
        this.showTrans = false;
        this.$emit("change", {
          show: false,
          type: this.type
        });
        clearTimeout(this.timer);
        this.timer = setTimeout(() => {
          this.showPopup = false;
        }, 300);
      },
      // TODO 处理冒泡事件，头条的冒泡事件有问题 ，先这样兼容
      touchstart() {
        this.clearPropagation = false;
      },
      onTap() {
        if (this.clearPropagation) {
          this.clearPropagation = false;
          return;
        }
        this.$emit("maskClick");
        if (!this.mkclick)
          return;
        this.close();
      },
      /**
       * 顶部弹出样式处理
       */
      top(type) {
        this.popupstyle = this.isDesktop ? "fixforpc-top" : "top";
        this.ani = ["slide-top"];
        this.transClass = {
          position: "fixed",
          left: 0,
          right: 0,
          backgroundColor: this.bg,
          borderRadius: this.borderRadius || "0"
        };
        if (type)
          return;
        this.showPopup = true;
        this.showTrans = true;
        this.$nextTick(() => {
          if (this.messageChild && this.type === "message") {
            this.messageChild.timerClose();
          }
        });
      },
      /**
       * 底部弹出样式处理
       */
      bottom(type) {
        this.popupstyle = "bottom";
        this.ani = ["slide-bottom"];
        this.transClass = {
          position: "fixed",
          left: 0,
          right: 0,
          bottom: 0,
          paddingBottom: this.safeAreaInsets + "px",
          backgroundColor: this.bg,
          borderRadius: this.borderRadius || "0"
        };
        if (type)
          return;
        this.showPopup = true;
        this.showTrans = true;
      },
      /**
       * 中间弹出样式处理
       */
      center(type) {
        this.popupstyle = "center";
        this.ani = ["zoom-out", "fade"];
        this.transClass = {
          position: "fixed",
          display: "flex",
          flexDirection: "column",
          bottom: 0,
          left: 0,
          right: 0,
          top: 0,
          justifyContent: "center",
          alignItems: "center",
          borderRadius: this.borderRadius || "0"
        };
        if (type)
          return;
        this.showPopup = true;
        this.showTrans = true;
      },
      left(type) {
        this.popupstyle = "left";
        this.ani = ["slide-left"];
        this.transClass = {
          position: "fixed",
          left: 0,
          bottom: 0,
          top: 0,
          backgroundColor: this.bg,
          borderRadius: this.borderRadius || "0",
          display: "flex",
          flexDirection: "column"
        };
        if (type)
          return;
        this.showPopup = true;
        this.showTrans = true;
      },
      right(type) {
        this.popupstyle = "right";
        this.ani = ["slide-right"];
        this.transClass = {
          position: "fixed",
          bottom: 0,
          right: 0,
          top: 0,
          backgroundColor: this.bg,
          borderRadius: this.borderRadius || "0",
          display: "flex",
          flexDirection: "column"
        };
        if (type)
          return;
        this.showPopup = true;
        this.showTrans = true;
      }
    }
  };
  function _sfc_render$P(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_uni_transition = resolveEasycom(vue.resolveDynamicComponent("uni-transition"), __easycom_0$6);
    return $data.showPopup ? (vue.openBlock(), vue.createElementBlock(
      "view",
      {
        key: 0,
        class: vue.normalizeClass(["uni-popup", [$data.popupstyle, $options.isDesktop ? "fixforpc-z-index" : ""]])
      },
      [
        vue.createElementVNode(
          "view",
          {
            onTouchstart: _cache[1] || (_cache[1] = (...args) => $options.touchstart && $options.touchstart(...args))
          },
          [
            $data.maskShow ? (vue.openBlock(), vue.createBlock(_component_uni_transition, {
              key: "1",
              name: "mask",
              "mode-class": "fade",
              styles: $data.maskClass,
              duration: $data.duration,
              show: $data.showTrans,
              onClick: $options.onTap
            }, null, 8, ["styles", "duration", "show", "onClick"])) : vue.createCommentVNode("v-if", true),
            vue.createVNode(_component_uni_transition, {
              key: "2",
              "mode-class": $data.ani,
              name: "content",
              styles: $data.transClass,
              duration: $data.duration,
              show: $data.showTrans,
              onClick: $options.onTap
            }, {
              default: vue.withCtx(() => [
                vue.createElementVNode(
                  "view",
                  {
                    class: vue.normalizeClass(["uni-popup__wrapper", [$data.popupstyle]]),
                    style: vue.normalizeStyle($options.getStyles),
                    onClick: _cache[0] || (_cache[0] = (...args) => $options.clear && $options.clear(...args))
                  },
                  [
                    vue.renderSlot(_ctx.$slots, "default", {}, void 0, true)
                  ],
                  6
                  /* CLASS, STYLE */
                )
              ]),
              _: 3
              /* FORWARDED */
            }, 8, ["mode-class", "styles", "duration", "show", "onClick"])
          ],
          32
          /* HYDRATE_EVENTS */
        )
      ],
      2
      /* CLASS */
    )) : vue.createCommentVNode("v-if", true);
  }
  const __easycom_1$2 = /* @__PURE__ */ _export_sfc(_sfc_main$Q, [["render", _sfc_render$P], ["__scopeId", "data-v-4dd3c44b"], ["__file", "D:/HLTrip/hl/uni_modules/uni-popup/components/uni-popup/uni-popup.vue"]]);
  const BASE_URL = "http://hallowlemon.online:2999/trip";
  const API = {
    BASE_URL
  };
  const _sfc_main$P = {
    data() {
      return {
        latitude: "0",
        longitude: "0",
        location: "0,0",
        recmmend: [],
        hotelCover: [],
        isFixed: false,
        scrollThreshold: 120,
        startTime: {},
        endTime: {},
        currentTime: {},
        stayRange: 1,
        actived: false,
        selectedPeople: -1,
        selectedBed: -1,
        conditionText: "",
        mapLoaded: false,
        text: "",
        showBtn: true,
        locationText: "我的附近",
        isLocating: false,
        data: null,
        showEmpty: false,
        page: 1,
        maxPage: 0,
        showNoMore: false,
        toView: "",
        isFirst: true
      };
    },
    methods: {
      toSearch2(item) {
        uni.setStorageSync("location", item.location);
        uni.setStorageSync("searchText", item.name);
        uni.navigateTo({
          url: "/pages/searchDetail/searchDetail"
        });
      },
      handleScroll(e) {
        if (e.detail.scrollTop > this.scrollThreshold) {
          if (this.toView != "") {
            this.toView = "";
          }
          this.isFixed = true;
        } else {
          this.isFixed = false;
        }
      },
      // 点击切换滑块选项卡
      switchToRight() {
        this.sildeDistance = "50%";
      },
      switchToLeft() {
        this.sildeDistance = "0rpx";
      },
      nvtodt(houseid) {
        uni.navigateTo({
          url: `/pages/hotelDetail/hotelDetail?houseid=${houseid}`
        });
      },
      likeHotel(item) {
        formatAppLog("log", "at pages/Components/home/home.vue:263", "likehouse");
        item.islike = !item.islike;
        uni.request({
          url: `${API.BASE_URL}/favorHouse`,
          data: {
            houseid: item.overview.houseid,
            userid: uni.getStorageSync("userId")
          }
        });
      },
      backToTop() {
        this.toView = "top";
      },
      open() {
        this.$refs.calendar.open();
      },
      confirm(e) {
        formatAppLog("log", "at pages/Components/home/home.vue:280", e);
        if (e.range.data.length >= 1) {
          this.stayRange = e.range.data.length - 1;
        }
        const dateArr = this.compareDates(e.range.before, e.range.after);
        formatAppLog("log", "at pages/Components/home/home.vue:286", dateArr[1]);
        this.startTime = this.getTime(dateArr[0]);
        this.endTime = this.getTime(dateArr[1]);
        uni.setStorageSync("startTime", this.startTime);
        uni.setStorageSync("endTime", this.endTime);
        uni.setStorageSync("stayRange", this.stayRange);
      },
      compareDates(dateStr1, dateStr2) {
        var date1 = new Date(dateStr1);
        var date2 = new Date(dateStr2);
        if (date1 < date2) {
          return [date1, date2];
        } else if (date1 > date2) {
          return [date2, date1];
        } else {
          return dateStr1 + " 和 " + dateStr2 + " 相同";
        }
      },
      getTime(dateObj) {
        const year = dateObj.getFullYear();
        const month = dateObj.getMonth() + 1;
        const date2 = dateObj.getDate();
        const day = dateObj.getDay();
        return {
          year,
          month: month.toString().padStart(2, "0"),
          date: date2.toString().padStart(2, "0"),
          day,
          arr: ["日", "一", "二", "三", "四", "五", "六"],
          timestamp: dateObj
        };
      },
      openPopup() {
        this.$refs.popup.open("bottom");
      },
      selectPeople(item) {
        this.selectedPeople = item;
      },
      selectBed(item) {
        this.selectedBed = item;
      },
      confirmCondition() {
        if (this.selectedPeople != -1 && this.selectedBed != -1) {
          this.conditionText = `${this.selectedPeople}人,${this.selectedBed}床`;
        } else if (this.selectedBed != -1) {
          this.conditionText = `${this.selectedBed}床`;
        } else if (this.selectedPeople != -1) {
          this.conditionText = `${this.selectedPeople}人`;
        } else {
          this.conditionText = "";
        }
        this.$refs.popup.close();
      },
      clearCondition() {
        this.selectedPeople = -1;
        this.selectedBed = -1;
        this.conditionText = "";
      },
      getMyLocation() {
        this.isLocating = true;
        this.locationText = "我的附近";
        uni.getLocation({
          type: "gcj02",
          geocode: true,
          success: function(res) {
            formatAppLog("log", "at pages/Components/home/home.vue:357", res);
            this.latitude = res.latitude;
            this.longitude = res.longitude;
            this.location = `${this.longitude},${this.latitude}`;
            uni.setStorageSync("street", res.address.street);
            uni.setStorageSync("location", this.location);
          }.bind(this),
          fail(err2) {
            formatAppLog("log", "at pages/Components/home/home.vue:365", "fail");
            formatAppLog("log", "at pages/Components/home/home.vue:366", err2);
          },
          complete: function() {
            this.isLocating = false;
          }.bind(this)
        });
      },
      initLocation() {
        uni.getLocation({
          type: "gcj02",
          geocode: true,
          success: function(res) {
            formatAppLog("log", "at pages/Components/home/home.vue:379", res);
            this.latitude = res.latitude;
            this.longitude = res.longitude;
            this.location = `${this.longitude},${this.latitude}`;
            uni.setStorageSync("street", res.address.street);
            uni.setStorageSync("location", this.location);
          }.bind(this),
          fail(err2) {
            formatAppLog("log", "at pages/Components/home/home.vue:387", "fail");
            formatAppLog("log", "at pages/Components/home/home.vue:388", err2);
          },
          complete: function() {
            this.isLocating = false;
          }.bind(this)
        });
      },
      handleLocationChange() {
        formatAppLog("log", "at pages/Components/home/home.vue:396", "datachange");
        this.page = 1;
        this.hotelCover = [];
        this.getRecommendData();
        this.page += 1;
        this.getNearBy();
      },
      getNearBy() {
        const location = uni.getStorageSync("location");
        uni.request({
          url: "https://restapi.amap.com/v3/place/around",
          //仅为示例，并非真实接口地址。
          data: {
            key: "ca5638622884957be4cff8d31d00b1b0",
            location,
            types: "110000|060400|080300",
            radius: 5e4,
            sortrule: "weight",
            offset: 10
          },
          success: (res) => {
            const responseData = res.data;
            if (responseData.info == "OK") {
              this.recmmend = responseData.pois;
            } else {
              formatAppLog("log", "at pages/Components/home/home.vue:420", responseData);
            }
          }
        });
      },
      selectCity() {
        uni.navigateTo({
          url: "/pages/selectCity/selectCity"
        });
      },
      getRecommendData() {
        const locationArr = this.location.split(",");
        uni.request({
          url: `${API.BASE_URL}/getRecommendHouses`,
          data: {
            longitude: locationArr[0],
            latitude: locationArr[1],
            userid: uni.getStorageSync("userId"),
            page: this.page
          },
          success: (res) => {
            const sdata = res.data.data;
            if (res.data.requestStatus == "300") {
              this.showEmpty = true;
              return false;
            }
            this.showEmpty = false;
            this.maxPage = Math.ceil(sdata.total / 10);
            if (this.hotelCover.length == 0) {
              this.hotelCover = res.data.data.houseInfo.sort((element1, element2) => {
                return element2.recommendValue - element1.recommendValue;
              });
            } else {
              this.hotelCover = [
                ...this.hotelCover,
                ...res.data.data.houseInfo.sort((element1, element2) => {
                  return element2.recommendValue - element1.recommendValue;
                })
              ];
            }
          },
          fail: (err2) => {
            formatAppLog("log", "at pages/Components/home/home.vue:463", err2);
          }
        });
      },
      getMoreHouse() {
        if (this.page <= this.maxPage) {
          this.getRecommendData();
          this.page += 1;
        } else {
          this.showNoMore = true;
        }
      },
      toSearchDetail() {
        uni.removeStorageSync("searchText");
        uni.navigateTo({ url: "/pages/searchDetail/searchDetail" });
      },
      toSearch() {
        uni.navigateTo({ url: "/pages/search/search" });
      }
    },
    onPageScroll(event) {
      formatAppLog("log", "at pages/Components/home/home.vue:484", "sroll");
      if (event.scrollTop > this.scrollThreshold) {
        this.isFixed = true;
      } else {
        this.isFixed = false;
      }
    },
    onLoad() {
      uni.request({
        url: `${API.BASE_URL}/verifyLogin`,
        //仅为示例，并非真实接口地址。
        data: {
          userId: uni.getStorageSync("userId"),
          token: uni.getStorageSync("token")
        },
        method: "POST",
        success: (res) => {
          const data2 = res.data;
          if (data2.requestStatus == "200")
            ;
          else {
            uni.removeStorageSync("token");
            uni.removeStorageSync("phoneNumber");
            uni.removeStorageSync("userId");
            uni.redirectTo({
              url: "/pages/login/login"
            });
          }
        }
      });
      this.currentTime = this.getTime(/* @__PURE__ */ new Date());
      const storageInfo = uni.getStorageInfoSync();
      const hasST = storageInfo.keys.includes("searchText");
      if (hasST) {
        this.searchText = uni.getStorageSync("searchText");
      }
      const startExists = storageInfo.keys.includes("startTime");
      const endExists = storageInfo.keys.includes("startTime");
      const stayRangeExist = storageInfo.keys.includes("stayRange");
      if (startExists && endExists) {
        if (uni.getStorageSync("startTime").timestamp < this.currentTime.timestamp) {
          const today = /* @__PURE__ */ new Date();
          this.startTime = this.getTime(today);
          const nextDay = /* @__PURE__ */ new Date();
          nextDay.setDate(nextDay.getDate() + 1);
          this.endTime = this.getTime(nextDay);
          uni.setStorageSync("startTime", this.startTime);
          uni.setStorageSync("endTime", this.endTime);
        } else {
          this.startTime = uni.getStorageSync("startTime");
          this.endTime = uni.getStorageSync("endTime");
        }
      } else {
        const today = /* @__PURE__ */ new Date();
        this.startTime = this.getTime(today);
        const nextDay = /* @__PURE__ */ new Date();
        nextDay.setDate(nextDay.getDate() + 1);
        this.endTime = this.getTime(nextDay);
        uni.setStorageSync("startTime", this.startTime);
        uni.setStorageSync("endTime", this.endTime);
      }
      if (!stayRangeExist) {
        uni.setStorageSync("stayRange", 1);
      }
      const locationExist = storageInfo.keys.includes("location");
      if (locationExist) {
        const locationStr = uni.getStorageSync("location");
        this.location = locationStr;
        const locationArr = locationStr.split(",");
        this.longitude = locationArr[0];
        this.latitude = locationArr[1];
      } else {
        this.initLocation();
      }
      if (storageInfo.keys.includes("locationText")) {
        this.locationText = uni.getStorageSync("locationText");
      }
      uni.$on("locationInfo", (data2) => {
        formatAppLog("log", "at pages/Components/home/home.vue:571", data2);
        if (data2.latitude != void 0 && data2.longitude != void 0) {
          this.latitude = data2.latitude;
          this.longitude = data2.longitude;
          this.location = `${data2.longitude},${data2.latitude}`;
          uni.setStorageSync("location", `${data2.longitude},${data2.latitude}`);
          formatAppLog("log", "at pages/Components/home/home.vue:577", uni.getStorageSync("location"));
        } else {
          this.location = data2.location;
          this.latitude = data2.location.split(",")[1];
          this.longitude = data2.location.split(",")[0];
          uni.setStorageSync("location", data2.location);
        }
        if (data2.cityName != void 0) {
          this.locationText = data2.cityName;
          uni.setStorageSync("locationText", data2.cityName);
        } else {
          this.locationText = data2.name;
          uni.setStorageSync("locationText", data2.name);
        }
      });
      this.getNearBy();
      this.getRecommendData();
      this.page += 1;
    },
    onShow() {
      formatAppLog("log", "at pages/Components/home/home.vue:598", "onShow");
      uni.$on("changeid", (data2) => {
        formatAppLog("log", "at pages/Components/home/home.vue:600", data2);
        this.hotelCover.forEach((element) => {
          if (element.overview.houseid == data2.hid) {
            element.islike = !data2.islike;
          }
        });
      });
      if (!this.isFirst) {
        const storageInfo = uni.getStorageInfoSync();
        const startExists = storageInfo.keys.includes("startTime");
        const endExists = storageInfo.keys.includes("startTime");
        const stayRangeExist = storageInfo.keys.includes("stayRange");
        if (startExists && endExists) {
          if (uni.getStorageSync("startTime").timestamp < this.currentTime.timestamp) {
            const today = /* @__PURE__ */ new Date();
            this.startTime = this.getTime(today);
            const nextDay = /* @__PURE__ */ new Date();
            nextDay.setDate(nextDay.getDate() + 1);
            this.endTime = this.getTime(nextDay);
            uni.setStorageSync("startTime", this.startTime);
            uni.setStorageSync("endTime", this.endTime);
          } else {
            this.startTime = uni.getStorageSync("startTime");
            this.endTime = uni.getStorageSync("endTime");
          }
        } else {
          const today = /* @__PURE__ */ new Date();
          this.startTime = this.getTime(today);
          const nextDay = /* @__PURE__ */ new Date();
          nextDay.setDate(nextDay.getDate() + 1);
          this.endTime = this.getTime(nextDay);
          uni.setStorageSync("startTime", this.startTime);
          uni.setStorageSync("endTime", this.endTime);
        }
        if (!stayRangeExist) {
          uni.setStorageSync("stayRange", 1);
        }
        this.stayRange = uni.getStorageSync("stayRange");
      }
      this.isFirst = false;
    },
    mounted() {
      this.$watch("location", this.handleLocationChange);
    }
  };
  function _sfc_render$O(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_uni_calendar = resolveEasycom(vue.resolveDynamicComponent("uni-calendar"), __easycom_0$7);
    const _component_uni_popup = resolveEasycom(vue.resolveDynamicComponent("uni-popup"), __easycom_1$2);
    return vue.openBlock(), vue.createElementBlock("view", null, [
      vue.createElementVNode(
        "view",
        {
          class: vue.normalizeClass(["searchBar", { "fixed": $data.isFixed }])
        },
        [
          vue.createElementVNode("view", { class: "topbar" }),
          vue.createElementVNode("view", { class: "fix-searchbar" }, [
            vue.createElementVNode("view", { class: "wrapper" }, [
              vue.createElementVNode("view", { class: "left" }, [
                vue.createElementVNode(
                  "view",
                  {
                    class: "location",
                    onClick: _cache[0] || (_cache[0] = (...args) => $options.selectCity && $options.selectCity(...args))
                  },
                  vue.toDisplayString($data.locationText),
                  1
                  /* TEXT */
                ),
                vue.createElementVNode("view", { class: "checkTime" }, [
                  vue.createElementVNode("view", { class: "top" }, [
                    vue.createElementVNode("text", { class: "desc" }, "住"),
                    vue.createElementVNode(
                      "text",
                      { class: "date" },
                      vue.toDisplayString($data.startTime.month) + "-" + vue.toDisplayString($data.startTime.date),
                      1
                      /* TEXT */
                    )
                  ]),
                  vue.createElementVNode("div", { class: "bottom" }, [
                    vue.createElementVNode("text", { class: "desc" }, "离"),
                    vue.createElementVNode(
                      "text",
                      { class: "date" },
                      vue.toDisplayString($data.endTime.month) + "-" + vue.toDisplayString($data.endTime.date),
                      1
                      /* TEXT */
                    )
                  ])
                ]),
                vue.createElementVNode("view", {
                  class: "input",
                  onClick: _cache[1] || (_cache[1] = (...args) => $options.toSearchDetail && $options.toSearchDetail(...args))
                }, "位置/民宿/关键字"),
                vue.createElementVNode("view", {
                  class: "searchBtn",
                  onClick: _cache[2] || (_cache[2] = (...args) => $options.toSearchDetail && $options.toSearchDetail(...args))
                }, "搜索")
              ]),
              vue.createElementVNode("view", {
                class: "right",
                onClick: _cache[3] || (_cache[3] = (...args) => $options.backToTop && $options.backToTop(...args))
              }, [
                vue.createElementVNode("image", {
                  class: "iconpic",
                  src: "/static/image/icon/upToTop.png"
                }),
                vue.createElementVNode("view", { class: "desc" }, "回顶部")
              ])
            ])
          ])
        ],
        2
        /* CLASS */
      ),
      vue.createVNode(_component_uni_calendar, {
        class: "calendar",
        ref: "calendar",
        insert: false,
        range: true,
        startDate: `${$data.currentTime.year}-${$data.currentTime.month}-${$data.currentTime.date}`,
        onConfirm: $options.confirm,
        clearDate: false
      }, null, 8, ["startDate", "onConfirm"]),
      vue.createElementVNode("scroll-view", {
        "scroll-with-animation": "true",
        "scroll-y": "true",
        class: "home",
        onScrolltolower: _cache[15] || (_cache[15] = (...args) => $options.getMoreHouse && $options.getMoreHouse(...args)),
        onScroll: _cache[16] || (_cache[16] = (...args) => $options.handleScroll && $options.handleScroll(...args)),
        "scroll-into-view": $data.toView
      }, [
        vue.createElementVNode("view", {
          class: "homeHeader",
          id: "top"
        }, [
          vue.createCommentVNode(" 轮播图 "),
          vue.createElementVNode("swiper", {
            class: "swiper",
            circular: "",
            autoplay: true,
            interval: 5e3,
            duration: 600
          }, [
            vue.createElementVNode("swiper-item", null, [
              vue.createElementVNode("view", { class: "swiper-item" }, [
                vue.createElementVNode("img", {
                  src: "https://pic.tujia.com/upload/resourcespic/day_240419/thumb/202404191945009910_750_250.jpeg_.webp",
                  mode: "aspectFit",
                  alt: ""
                }),
                vue.createElementVNode("img", {
                  class: "filterImg",
                  src: "https://pic.tujia.com/upload/resourcespic/day_240419/thumb/202404191945009910_750_250.jpeg_.webp",
                  alt: ""
                })
              ])
            ])
          ]),
          vue.createCommentVNode(" 渐变遮罩层 "),
          vue.createElementVNode("view", { class: "mask" }),
          vue.createCommentVNode(" 选择租房信息的头部 "),
          vue.createElementVNode("view", { class: "rentCondition" }, [
            vue.createCommentVNode(" 顶部点击切换国内外的包裹容器 "),
            vue.createElementVNode("view", { class: "rentCondition-content" }, [
              vue.createCommentVNode(" 内容 "),
              vue.createCommentVNode(" 当前位置 "),
              vue.createElementVNode("view", { class: "current-location" }, [
                vue.createElementVNode(
                  "view",
                  {
                    class: "current-location-left",
                    "hover-class": "texthover",
                    "hover-stay-time": "900",
                    onClick: _cache[4] || (_cache[4] = (...args) => $options.selectCity && $options.selectCity(...args))
                  },
                  vue.toDisplayString($data.locationText),
                  1
                  /* TEXT */
                ),
                vue.createElementVNode("view", { class: "current-location-right" }, [
                  vue.createElementVNode("view", {
                    class: "current-location-right-wrapper",
                    onClick: _cache[5] || (_cache[5] = (...args) => $options.getMyLocation && $options.getMyLocation(...args))
                  }, [
                    !$data.isLocating ? (vue.openBlock(), vue.createElementBlock("image", {
                      key: 0,
                      style: { "width": "26px", "height": "26px" },
                      src: "/static/image/icon/currentLocation.png",
                      alt: ""
                    })) : (vue.openBlock(), vue.createElementBlock("image", {
                      key: 1,
                      style: { "width": "26px", "height": "26px" },
                      src: "/static/image/icon/loading.gif",
                      alt: ""
                    })),
                    vue.createElementVNode("view", { class: "locationDesc" }, [
                      !$data.isLocating ? (vue.openBlock(), vue.createElementBlock("text", { key: 0 }, "我的附近")) : (vue.openBlock(), vue.createElementBlock("text", { key: 1 }, "定位中"))
                    ])
                  ])
                ])
              ]),
              vue.createCommentVNode(" 入住时间 "),
              vue.createElementVNode("view", { class: "checkInTime" }, [
                vue.createElementVNode("view", {
                  class: "checkIn",
                  onClick: _cache[6] || (_cache[6] = (...args) => $options.open && $options.open(...args))
                }, [
                  vue.createElementVNode(
                    "view",
                    { class: "checkIn-Desc" },
                    "周" + vue.toDisplayString($data.startTime.arr[$data.startTime.day]) + "入住",
                    1
                    /* TEXT */
                  ),
                  vue.createElementVNode(
                    "view",
                    {
                      class: "checkIn-Date",
                      "hover-class": "texthover",
                      "hover-stay-time": "500"
                    },
                    vue.toDisplayString($data.startTime.month) + "月" + vue.toDisplayString($data.startTime.date) + "日",
                    1
                    /* TEXT */
                  )
                ]),
                vue.createElementVNode(
                  "view",
                  { class: "stayTime" },
                  vue.toDisplayString($data.stayRange) + "晚",
                  1
                  /* TEXT */
                ),
                vue.createElementVNode("view", {
                  class: "checkOut",
                  onClick: _cache[7] || (_cache[7] = (...args) => $options.open && $options.open(...args))
                }, [
                  vue.createElementVNode(
                    "view",
                    { class: "checkIn-Desc" },
                    "周" + vue.toDisplayString($data.endTime.arr[$data.endTime.day]) + "离店",
                    1
                    /* TEXT */
                  ),
                  vue.createElementVNode(
                    "view",
                    {
                      class: "checkIn-Date",
                      "hover-class": "texthover",
                      "hover-stay-time": "500"
                    },
                    vue.toDisplayString($data.endTime.month) + "月" + vue.toDisplayString($data.endTime.date) + "日",
                    1
                    /* TEXT */
                  )
                ]),
                vue.createElementVNode("view", {
                  class: "check-condition",
                  onClick: _cache[8] || (_cache[8] = (...args) => $options.openPopup && $options.openPopup(...args))
                }, [
                  vue.createElementVNode("view", { class: "checkIn-Desc" }, "可住条件"),
                  vue.createElementVNode("view", {
                    class: "checkIn-Date",
                    "hover-class": "texthover",
                    "hover-stay-time": "400"
                  }, [
                    $data.conditionText == "" ? (vue.openBlock(), vue.createElementBlock("text", { key: 0 }, " 选择人/床/居")) : (vue.openBlock(), vue.createElementBlock(
                      "text",
                      { key: 1 },
                      vue.toDisplayString($data.conditionText),
                      1
                      /* TEXT */
                    ))
                  ])
                ])
              ]),
              vue.createCommentVNode(" 搜索酒店 "),
              vue.createElementVNode("view", { class: "searchHotel" }, [
                vue.createElementVNode("view", {
                  class: "placeholder",
                  onClick: _cache[9] || (_cache[9] = (...args) => $options.toSearch && $options.toSearch(...args))
                }, "位置/民宿名/关键字"),
                vue.createCommentVNode(' <view class="clearIcon">\n							<image class="clearIcon" src="../../../static/image/icon/clear.png" mode="" />\n						</view> ')
              ]),
              vue.createCommentVNode(" 推荐小tag "),
              vue.createElementVNode("view", { class: "recommendContainer" }, [
                vue.createElementVNode("scroll-view", {
                  "scroll-x": "true",
                  class: "recommendWrapper"
                }, [
                  (vue.openBlock(true), vue.createElementBlock(
                    vue.Fragment,
                    null,
                    vue.renderList($data.recmmend, (item) => {
                      return vue.openBlock(), vue.createElementBlock("view", {
                        "hover-class": "recHover",
                        "hover-stay-time": "600",
                        class: "recomendItem",
                        key: item.id,
                        onClick: ($event) => $options.toSearch2(item)
                      }, vue.toDisplayString(item.name), 9, ["onClick"]);
                    }),
                    128
                    /* KEYED_FRAGMENT */
                  )),
                  vue.createElementVNode("view", { class: "occp" })
                ]),
                vue.createElementVNode("view", { class: "itemCover" })
              ]),
              vue.createCommentVNode(" 搜索按钮 "),
              vue.createElementVNode("view", {
                class: "searchButton",
                onClick: _cache[10] || (_cache[10] = (...args) => $options.toSearchDetail && $options.toSearchDetail(...args))
              }, "开始搜索")
            ])
          ])
        ]),
        vue.createElementVNode("view", { class: "content" }, [
          vue.createElementVNode("view", { class: "recomendDesc" }, [
            vue.createElementVNode("text", null, "推荐"),
            vue.createCommentVNode(" <text>筛选</text> ")
          ]),
          vue.createElementVNode("view", { class: "contentWrapper" }, [
            !$data.showEmpty ? (vue.openBlock(true), vue.createElementBlock(
              vue.Fragment,
              { key: 0 },
              vue.renderList($data.hotelCover, (item, index2) => {
                return vue.openBlock(), vue.createElementBlock("view", {
                  class: "hotelItem",
                  key: index2
                }, [
                  vue.createElementVNode("view", { class: "picWrapper" }, [
                    vue.createElementVNode("image", {
                      class: "pic",
                      onClick: ($event) => $options.nvtodt(item.overview.houseid),
                      src: item.overview.coverurl,
                      mode: "aspectFill"
                    }, null, 8, ["onClick", "src"]),
                    vue.createElementVNode("view", {
                      class: "likewrap",
                      onClick: ($event) => $options.likeHotel(item)
                    }, [
                      !item.islike ? (vue.openBlock(), vue.createElementBlock("image", {
                        key: 0,
                        class: "like",
                        src: "/static/image/icon/like.png"
                      })) : vue.createCommentVNode("v-if", true),
                      item.islike ? (vue.openBlock(), vue.createElementBlock("image", {
                        key: 1,
                        class: "like",
                        src: "/static/image/icon/like-active.png"
                      })) : vue.createCommentVNode("v-if", true)
                    ], 8, ["onClick"]),
                    vue.createElementVNode("div", { class: "hotelDesc" }, [
                      vue.createElementVNode("image", {
                        class: "icon",
                        src: "/static/image/icon/location.png",
                        mode: ""
                      }),
                      vue.createElementVNode(
                        "view",
                        { class: "desc" },
                        vue.toDisplayString(item.overview.roomcount) + "居 | " + vue.toDisplayString(item.locationInfo.city) + "·" + vue.toDisplayString(item.locationInfo.county),
                        1
                        /* TEXT */
                      )
                    ])
                  ]),
                  vue.createElementVNode("view", {
                    class: "textWrapp",
                    onClick: ($event) => $options.nvtodt(item.overview.houseid)
                  }, [
                    vue.createElementVNode(
                      "view",
                      { class: "hotelName" },
                      vue.toDisplayString(item.overview.housename),
                      1
                      /* TEXT */
                    ),
                    vue.createElementVNode("text", { class: "rmb" }, "￥"),
                    vue.createElementVNode(
                      "text",
                      { class: "currentPrice" },
                      vue.toDisplayString(item.overview.discountprice),
                      1
                      /* TEXT */
                    ),
                    vue.createElementVNode(
                      "del",
                      { class: "orgPrice" },
                      "￥" + vue.toDisplayString(item.overview.originalprice),
                      1
                      /* TEXT */
                    )
                  ], 8, ["onClick"])
                ]);
              }),
              128
              /* KEYED_FRAGMENT */
            )) : vue.createCommentVNode("v-if", true)
          ]),
          $data.showNoMore ? (vue.openBlock(), vue.createElementBlock("view", {
            key: 0,
            class: "nomore"
          }, "-没有更多了-")) : vue.createCommentVNode("v-if", true),
          vue.createElementVNode("view", { class: "marginblock" })
        ]),
        $data.showEmpty ? (vue.openBlock(), vue.createElementBlock("view", {
          key: 0,
          class: "empty"
        }, [
          vue.createElementVNode("image", {
            src: "/static/image/empty_bg.png",
            mode: "aspectFit"
          }),
          vue.createElementVNode("view", { class: "desc" }, "暂时没有内容")
        ])) : vue.createCommentVNode("v-if", true),
        vue.createElementVNode("view", { class: "popup-wrapper" }, [
          vue.createCommentVNode(" 普通弹窗 "),
          vue.createVNode(
            _component_uni_popup,
            {
              ref: "popup",
              "background-color": "#fff"
            },
            {
              default: vue.withCtx(() => [
                vue.createElementVNode("view", { class: "popup-content" }, [
                  vue.createElementVNode("view", { class: "title" }, " 入住条件 "),
                  vue.createElementVNode("view", { class: "peopleCount-wrapper" }, [
                    vue.createElementVNode("view", { class: "title" }, "宜居人数"),
                    vue.createElementVNode("view", { class: "peopleCount" }, [
                      vue.createElementVNode("view", { class: "pCount" }, [
                        (vue.openBlock(), vue.createElementBlock(
                          vue.Fragment,
                          null,
                          vue.renderList(10, (item) => {
                            return vue.createElementVNode("view", {
                              class: "pCountItem",
                              onClick: ($event) => $options.selectPeople(item),
                              style: vue.normalizeStyle({ backgroundColor: $data.selectedPeople === item ? "#fe7815" : "#f6f7fb", color: $data.selectedPeople === item ? "white" : "#333" })
                            }, vue.toDisplayString(item) + "人", 13, ["onClick"]);
                          }),
                          64
                          /* STABLE_FRAGMENT */
                        )),
                        vue.createElementVNode(
                          "view",
                          {
                            class: "pCountItem",
                            onClick: _cache[11] || (_cache[11] = ($event) => $options.selectPeople("10+")),
                            style: vue.normalizeStyle({ backgroundColor: $data.selectedPeople === "10+" ? "#fe7815" : "#f6f7fb", color: $data.selectedPeople === "10+" ? "white" : "#333" })
                          },
                          "10人+",
                          4
                          /* STYLE */
                        ),
                        vue.createElementVNode("i")
                      ])
                    ])
                  ]),
                  vue.createElementVNode("view", { class: "peopleCount-wrapper bedCount" }, [
                    vue.createElementVNode("view", { class: "title" }, "床铺数量"),
                    vue.createElementVNode("view", { class: "peopleCount" }, [
                      vue.createElementVNode("view", { class: "pCount" }, [
                        (vue.openBlock(), vue.createElementBlock(
                          vue.Fragment,
                          null,
                          vue.renderList(10, (item) => {
                            return vue.createElementVNode("view", {
                              class: "pCountItem",
                              onClick: ($event) => $options.selectBed(item),
                              style: vue.normalizeStyle({ backgroundColor: $data.selectedBed === item ? "#fe7815" : "#f6f7fb", color: $data.selectedBed === item ? "white" : "#333" })
                            }, vue.toDisplayString(item) + "张", 13, ["onClick"]);
                          }),
                          64
                          /* STABLE_FRAGMENT */
                        )),
                        vue.createElementVNode(
                          "view",
                          {
                            class: "pCountItem",
                            onClick: _cache[12] || (_cache[12] = ($event) => $options.selectBed("10+")),
                            style: vue.normalizeStyle({ backgroundColor: $data.selectedBed === "10+" ? "#fe7815" : "#f6f7fb", color: $data.selectedBed === "10+" ? "white" : "#333" })
                          },
                          "10张+",
                          4
                          /* STYLE */
                        ),
                        vue.createElementVNode("i")
                      ])
                    ])
                  ]),
                  vue.createElementVNode("view", { class: "button-group" }, [
                    vue.createElementVNode("view", {
                      class: "cancle-btn btn",
                      onClick: _cache[13] || (_cache[13] = (...args) => $options.clearCondition && $options.clearCondition(...args))
                    }, "清空"),
                    vue.createElementVNode("view", {
                      class: "confirm-btn btn",
                      onClick: _cache[14] || (_cache[14] = (...args) => $options.confirmCondition && $options.confirmCondition(...args))
                    }, "确定")
                  ])
                ])
              ]),
              _: 1
              /* STABLE */
            },
            512
            /* NEED_PATCH */
          )
        ])
      ], 40, ["scroll-into-view"])
    ]);
  }
  const PagesComponentsHomeHome = /* @__PURE__ */ _export_sfc(_sfc_main$P, [["render", _sfc_render$O], ["__file", "D:/HLTrip/hl/pages/Components/home/home.vue"]]);
  const _sfc_main$O = {
    data() {
      return {
        title: "Hello"
      };
    },
    onLoad() {
      setTimeout(() => {
      }, 1500);
    },
    methods: {}
  };
  function _sfc_render$N(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("view", { class: "content" }, [
      vue.createElementVNode("image", {
        src: "/static/image/start/startBanner.png",
        mode: "aspectFit",
        class: "banner"
      })
    ]);
  }
  const PagesIndexIndex = /* @__PURE__ */ _export_sfc(_sfc_main$O, [["render", _sfc_render$N], ["__scopeId", "data-v-1cf27b2a"], ["__file", "D:/HLTrip/hl/pages/index/index.vue"]]);
  const _sfc_main$N = {
    data() {
      return {
        avatar: "",
        nickname: "",
        favorcount: 0,
        browsecount: 0,
        isfirst: true
      };
    },
    methods: {
      toHAB(index2) {
        uni.$emit("sendIndexToFavor", index2);
        uni.switchTab({
          url: `/pages/Components/Favor/Favor`,
          success: (res) => {
            formatAppLog("log", "at pages/Components/profile/profile.vue:96", res);
          }
        });
      },
      toLandlord() {
        uni.navigateTo({
          url: "/pages/landlordProfile/landlordProfile"
        });
      },
      toAddpeople() {
        uni.navigateTo({
          url: "/pages/addContract/addContract"
        });
      },
      toEP() {
        uni.navigateTo({
          url: "/pages/editprofile/editprofile"
        });
      },
      toCommentList() {
        uni.navigateTo({
          url: `/pages/commentList_user/commentList_user?uname=${this.nickname}`
        });
      },
      toOrderList(index2) {
        uni.navigateTo({
          url: `/pages/orderList_user/orderList_user?page=${index2}`
        });
      },
      logout() {
        uni.removeStorageSync("token");
        uni.removeStorageSync("phoneNumber");
        uni.removeStorageSync("userId");
        uni.removeStorageSync("landlordid");
        uni.redirectTo({
          url: "/pages/login/login"
        });
      }
    },
    onLoad() {
      uni.request({
        url: `${API.BASE_URL}/getProfileData`,
        //仅为示例，并非真实接口地址。
        data: {
          userid: uni.getStorageSync("userId")
          // userid: 7
        },
        success: (res) => {
          formatAppLog("log", "at pages/Components/profile/profile.vue:143", res);
          this.avatar = res.data.data.user.avatarpic;
          this.nickname = res.data.data.user.username;
          this.favorcount = res.data.data.favorcount;
          this.browsecount = res.data.data.browsecount;
          if (res.data.data.user.role != "landlord") {
            uni.setStorageSync("isLandlord", false);
            uni.removeStorageSync("landlordid");
          } else {
            uni.setStorageSync("isLandlord", true);
            uni.setStorageSync("landlordid", res.data.data.user.landlordid);
          }
        }
      });
    },
    onShow() {
      if (!this.isfirst) {
        uni.request({
          url: `${API.BASE_URL}/getProfileData`,
          //仅为示例，并非真实接口地址。
          data: {
            userid: uni.getStorageSync("userId")
          },
          success: (res) => {
            this.avatar = res.data.data.user.avatarpic;
            this.nickname = res.data.data.user.username;
            this.favorcount = res.data.data.favorcount;
            this.browsecount = res.data.data.browsecount;
          }
        });
      }
      this.isfirst = false;
    },
    mounted() {
    }
  };
  function _sfc_render$M(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("view", null, [
      vue.createElementVNode("view", { class: "statusbar" }),
      vue.createElementVNode("view", { class: "topblock" }, [
        vue.createElementVNode("view", {
          class: "profile",
          onClick: _cache[0] || (_cache[0] = (...args) => $options.toEP && $options.toEP(...args))
        }, [
          vue.createElementVNode("view", { class: "avatar" }, [
            vue.createElementVNode("image", {
              src: $data.avatar,
              class: "avatarPic",
              mode: "aspectFill"
            }, null, 8, ["src"])
          ]),
          vue.createElementVNode("view", { class: "nicknamebox" }, [
            vue.createElementVNode(
              "view",
              { class: "nickname" },
              vue.toDisplayString($data.nickname),
              1
              /* TEXT */
            ),
            vue.createElementVNode("view", { class: "desc" }, "身份认证")
          ])
        ]),
        vue.createElementVNode("view", { class: "favorData" }, [
          vue.createElementVNode("view", {
            class: "data-item",
            onClick: _cache[1] || (_cache[1] = ($event) => $options.toHAB(0))
          }, [
            vue.createElementVNode(
              "view",
              { class: "count" },
              vue.toDisplayString($data.favorcount),
              1
              /* TEXT */
            ),
            vue.createElementVNode("view", { class: "desc" }, "收藏")
          ]),
          vue.createElementVNode("view", {
            class: "data-item",
            onClick: _cache[2] || (_cache[2] = ($event) => $options.toHAB(1))
          }, [
            vue.createElementVNode(
              "view",
              { class: "count" },
              vue.toDisplayString($data.browsecount),
              1
              /* TEXT */
            ),
            vue.createElementVNode("view", { class: "desc" }, "浏览")
          ]),
          vue.createElementVNode("view", { class: "data-item" }, [
            vue.createElementVNode("view", { class: "count" }, "0"),
            vue.createElementVNode("view", { class: "desc" }, "代金券")
          ]),
          vue.createElementVNode("view", { class: "data-item" }, [
            vue.createElementVNode("view", { class: "count" }, "0"),
            vue.createElementVNode("view", { class: "desc" }, "积分")
          ])
        ])
      ]),
      vue.createElementVNode("view", { class: "content" }, [
        vue.createElementVNode("view", { class: "orders" }, [
          vue.createElementVNode("view", { class: "title" }, "我的订单"),
          vue.createElementVNode("view", { class: "icongroup" }, [
            vue.createElementVNode("view", {
              class: "iconwrapper",
              onClick: _cache[3] || (_cache[3] = ($event) => $options.toOrderList(1))
            }, [
              vue.createElementVNode("view", null, [
                vue.createElementVNode("image", {
                  class: "iconPic wallet",
                  src: "/static/image/icon/wallet.png",
                  mode: "aspectFit"
                })
              ]),
              vue.createElementVNode("view", { class: "desc marginTopre" }, "待支付")
            ]),
            vue.createElementVNode("view", {
              class: "iconwrapper",
              onClick: _cache[4] || (_cache[4] = ($event) => $options.toOrderList(2))
            }, [
              vue.createElementVNode("view", null, [
                vue.createElementVNode("image", {
                  class: "iconPic",
                  src: "/static/image/icon/processing.png"
                })
              ]),
              vue.createElementVNode("view", { class: "desc" }, "进行中")
            ]),
            vue.createElementVNode("view", {
              class: "iconwrapper",
              onClick: _cache[5] || (_cache[5] = (...args) => $options.toCommentList && $options.toCommentList(...args))
            }, [
              vue.createElementVNode("view", null, [
                vue.createElementVNode("image", {
                  class: "iconPic comment",
                  src: "/static/image/icon/comment.png",
                  mode: "aspectFit"
                })
              ]),
              vue.createElementVNode("view", { class: "desc marginTopre" }, "待点评")
            ]),
            vue.createElementVNode("view", {
              class: "iconwrapper",
              onClick: _cache[6] || (_cache[6] = ($event) => $options.toOrderList(0))
            }, [
              vue.createElementVNode("view", null, [
                vue.createElementVNode("image", {
                  class: "iconPic",
                  src: "/static/image/icon/order.png"
                })
              ]),
              vue.createElementVNode("view", { class: "desc" }, "全部")
            ])
          ])
        ]),
        vue.createElementVNode("view", { class: "sep" }),
        vue.createElementVNode("view", { class: "fun" }, [
          vue.createElementVNode("view", {
            class: "con",
            onClick: _cache[7] || (_cache[7] = (...args) => $options.toAddpeople && $options.toAddpeople(...args))
          }, [
            vue.createElementVNode("view", null, [
              vue.createElementVNode("image", {
                class: "pic",
                src: "/static/image/icon/group.png",
                mode: "apsectFit"
              })
            ]),
            vue.createElementVNode("view", { class: "desc" }, "常用入住人")
          ])
        ]),
        vue.createElementVNode("view", {
          class: "logout btnsty",
          onClick: _cache[8] || (_cache[8] = (...args) => $options.logout && $options.logout(...args))
        }, "退出登录"),
        vue.createElementVNode("view", {
          class: "switchTolandlord btnsty",
          onClick: _cache[9] || (_cache[9] = (...args) => $options.toLandlord && $options.toLandlord(...args))
        }, "切换到房东版")
      ])
    ]);
  }
  const PagesComponentsProfileProfile = /* @__PURE__ */ _export_sfc(_sfc_main$N, [["render", _sfc_render$M], ["__file", "D:/HLTrip/hl/pages/Components/profile/profile.vue"]]);
  const popup = {
    data() {
      return {};
    },
    created() {
      this.popup = this.getParent();
    },
    methods: {
      /**
       * 获取父元素实例
       */
      getParent(name2 = "uniPopup") {
        let parent = this.$parent;
        let parentName = parent.$options.name;
        while (parentName !== name2) {
          parent = parent.$parent;
          if (!parent)
            return false;
          parentName = parent.$options.name;
        }
        return parent;
      }
    }
  };
  const _sfc_main$M = {
    name: "uniPopupMessage",
    mixins: [popup],
    props: {
      /**
       * 主题 success/warning/info/error	  默认 success
       */
      type: {
        type: String,
        default: "success"
      },
      /**
       * 消息文字
       */
      message: {
        type: String,
        default: ""
      },
      /**
       * 显示时间，设置为 0 则不会自动关闭
       */
      duration: {
        type: Number,
        default: 3e3
      },
      maskShow: {
        type: Boolean,
        default: false
      }
    },
    data() {
      return {};
    },
    created() {
      this.popup.maskShow = this.maskShow;
      this.popup.messageChild = this;
    },
    methods: {
      timerClose() {
        if (this.duration === 0)
          return;
        clearTimeout(this.timer);
        this.timer = setTimeout(() => {
          this.popup.close();
        }, this.duration);
      }
    }
  };
  function _sfc_render$L(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("view", { class: "uni-popup-message" }, [
      vue.createElementVNode(
        "view",
        {
          class: vue.normalizeClass(["uni-popup-message__box fixforpc-width", "uni-popup__" + $props.type])
        },
        [
          vue.renderSlot(_ctx.$slots, "default", {}, () => [
            vue.createElementVNode(
              "text",
              {
                class: vue.normalizeClass(["uni-popup-message-text", "uni-popup__" + $props.type + "-text"])
              },
              vue.toDisplayString($props.message),
              3
              /* TEXT, CLASS */
            )
          ], true)
        ],
        2
        /* CLASS */
      )
    ]);
  }
  const __easycom_2$1 = /* @__PURE__ */ _export_sfc(_sfc_main$M, [["render", _sfc_render$L], ["__scopeId", "data-v-a4566996"], ["__file", "D:/HLTrip/hl/uni_modules/uni-popup/components/uni-popup-message/uni-popup-message.vue"]]);
  const en$1 = {
    "uni-popup.cancel": "cancel",
    "uni-popup.ok": "ok",
    "uni-popup.placeholder": "pleace enter",
    "uni-popup.title": "Hint",
    "uni-popup.shareTitle": "Share to"
  };
  const zhHans$1 = {
    "uni-popup.cancel": "取消",
    "uni-popup.ok": "确定",
    "uni-popup.placeholder": "请输入",
    "uni-popup.title": "提示",
    "uni-popup.shareTitle": "分享到"
  };
  const zhHant$1 = {
    "uni-popup.cancel": "取消",
    "uni-popup.ok": "確定",
    "uni-popup.placeholder": "請輸入",
    "uni-popup.title": "提示",
    "uni-popup.shareTitle": "分享到"
  };
  const messages = {
    en: en$1,
    "zh-Hans": zhHans$1,
    "zh-Hant": zhHant$1
  };
  const {
    t: t$2
  } = initVueI18n(messages);
  const _sfc_main$L = {
    name: "uniPopupDialog",
    mixins: [popup],
    emits: ["confirm", "close", "update:modelValue", "input"],
    props: {
      inputType: {
        type: String,
        default: "text"
      },
      showClose: {
        type: Boolean,
        default: true
      },
      modelValue: {
        type: [Number, String],
        default: ""
      },
      placeholder: {
        type: [String, Number],
        default: ""
      },
      type: {
        type: String,
        default: "error"
      },
      mode: {
        type: String,
        default: "base"
      },
      title: {
        type: String,
        default: ""
      },
      content: {
        type: String,
        default: ""
      },
      beforeClose: {
        type: Boolean,
        default: false
      },
      cancelText: {
        type: String,
        default: ""
      },
      confirmText: {
        type: String,
        default: ""
      },
      maxlength: {
        type: Number,
        default: -1
      },
      focus: {
        type: Boolean,
        default: true
      }
    },
    data() {
      return {
        dialogType: "error",
        val: ""
      };
    },
    computed: {
      okText() {
        return this.confirmText || t$2("uni-popup.ok");
      },
      closeText() {
        return this.cancelText || t$2("uni-popup.cancel");
      },
      placeholderText() {
        return this.placeholder || t$2("uni-popup.placeholder");
      },
      titleText() {
        return this.title || t$2("uni-popup.title");
      }
    },
    watch: {
      type(val) {
        this.dialogType = val;
      },
      mode(val) {
        if (val === "input") {
          this.dialogType = "info";
        }
      },
      value(val) {
        if (this.maxlength != -1 && this.mode === "input") {
          this.val = val.slice(0, this.maxlength);
        } else {
          this.val = val;
        }
      },
      val(val) {
        this.$emit("update:modelValue", val);
      }
    },
    created() {
      this.popup.disableMask();
      if (this.mode === "input") {
        this.dialogType = "info";
        this.val = this.value;
        this.val = this.modelValue;
      } else {
        this.dialogType = this.type;
      }
    },
    methods: {
      /**
       * 点击确认按钮
       */
      onOk() {
        if (this.mode === "input") {
          this.$emit("confirm", this.val);
        } else {
          this.$emit("confirm");
        }
        if (this.beforeClose)
          return;
        this.popup.close();
      },
      /**
       * 点击取消按钮
       */
      closeDialog() {
        this.$emit("close");
        if (this.beforeClose)
          return;
        this.popup.close();
      },
      close() {
        this.popup.close();
      }
    }
  };
  function _sfc_render$K(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("view", { class: "uni-popup-dialog" }, [
      vue.createElementVNode("view", { class: "uni-dialog-title" }, [
        vue.createElementVNode(
          "text",
          {
            class: vue.normalizeClass(["uni-dialog-title-text", ["uni-popup__" + $data.dialogType]])
          },
          vue.toDisplayString($options.titleText),
          3
          /* TEXT, CLASS */
        )
      ]),
      $props.mode === "base" ? (vue.openBlock(), vue.createElementBlock("view", {
        key: 0,
        class: "uni-dialog-content"
      }, [
        vue.renderSlot(_ctx.$slots, "default", {}, () => [
          vue.createElementVNode(
            "text",
            { class: "uni-dialog-content-text" },
            vue.toDisplayString($props.content),
            1
            /* TEXT */
          )
        ], true)
      ])) : (vue.openBlock(), vue.createElementBlock("view", {
        key: 1,
        class: "uni-dialog-content"
      }, [
        vue.renderSlot(_ctx.$slots, "default", {}, () => [
          vue.withDirectives(vue.createElementVNode("input", {
            class: "uni-dialog-input",
            maxlength: $props.maxlength,
            "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => $data.val = $event),
            type: $props.inputType,
            placeholder: $options.placeholderText,
            focus: $props.focus
          }, null, 8, ["maxlength", "type", "placeholder", "focus"]), [
            [vue.vModelDynamic, $data.val]
          ])
        ], true)
      ])),
      vue.createElementVNode("view", { class: "uni-dialog-button-group" }, [
        $props.showClose ? (vue.openBlock(), vue.createElementBlock("view", {
          key: 0,
          class: "uni-dialog-button",
          onClick: _cache[1] || (_cache[1] = (...args) => $options.closeDialog && $options.closeDialog(...args))
        }, [
          vue.createElementVNode(
            "text",
            { class: "uni-dialog-button-text" },
            vue.toDisplayString($options.closeText),
            1
            /* TEXT */
          )
        ])) : vue.createCommentVNode("v-if", true),
        vue.createElementVNode(
          "view",
          {
            class: vue.normalizeClass(["uni-dialog-button", $props.showClose ? "uni-border-left" : ""]),
            onClick: _cache[2] || (_cache[2] = (...args) => $options.onOk && $options.onOk(...args))
          },
          [
            vue.createElementVNode(
              "text",
              { class: "uni-dialog-button-text uni-button-color" },
              vue.toDisplayString($options.okText),
              1
              /* TEXT */
            )
          ],
          2
          /* CLASS */
        )
      ])
    ]);
  }
  const __easycom_0$5 = /* @__PURE__ */ _export_sfc(_sfc_main$L, [["render", _sfc_render$K], ["__scopeId", "data-v-d78c88b7"], ["__file", "D:/HLTrip/hl/uni_modules/uni-popup/components/uni-popup-dialog/uni-popup-dialog.vue"]]);
  const _sfc_main$K = {
    data() {
      return {
        balance: 0,
        nocompleteMonry: 0,
        wAmount: 0,
        account: "",
        wdwTxt: "",
        msgType: "",
        isLoading: false
      };
    },
    methods: {
      nvback() {
        uni.navigateBack();
      },
      getLandlordProfile() {
        uni.request({
          url: `${API.BASE_URL}/getLandlordProfileData`,
          //仅为示例，并非真实接口地址。
          data: {
            landlordid: uni.getStorageSync("landlordid")
          },
          success: (res) => {
            formatAppLog("log", "at pages/withdrawal/withdrawal.vue:98", res.data);
            this.balance = res.data.data.landlordProfile.balance;
            this.nocompleteMonry = res.data.data.noarrived;
          }
        });
      },
      inputAccount(e) {
        this.account = e.detail.value;
      },
      handleInput(e) {
        formatAppLog("log", "at pages/withdrawal/withdrawal.vue:108", e.detail);
        this.wAmount = e.detail.value;
      },
      requestwd() {
        this.isLoading = true;
        uni.request({
          url: `${API.BASE_URL}/withdrawal`,
          data: {
            amount: this.wAmount,
            lid: uni.getStorageSync("landlordid"),
            account: this.account
          },
          success: (res) => {
            if (res.data.status == 200) {
              this.isLoading = false;
              this.wdwTxt = "提现成功";
              this.msgType = "success";
              this.$refs.message.open();
              setTimeout(() => {
                uni.navigateBack({
                  delta: 1
                });
              }, 1400);
            } else {
              this.isLoading = false;
              this.wdwTxt = res.data.reason;
              this.msgType = "error";
              this.$refs.message.open();
            }
          },
          fail: (err2) => {
            formatAppLog("log", "at pages/withdrawal/withdrawal.vue:140", err2);
          }
        });
      },
      confirmCancle() {
        this.requestwd();
      },
      clickBtn() {
        if (this.canNext) {
          this.$refs.alertDialog1.open();
        } else {
          this.msgType = "warn";
          this.wdwTxt = "请输入金额或账户";
          this.$refs.message.open();
        }
      }
    },
    computed: {
      tipText() {
        return "确认要提现到账户" + this.account + "吗，本操作不可撤回";
      },
      money() {
        return "最多可提￥" + this.balance;
      },
      actualAmount() {
        const mv = this.wAmount - this.wAmount * 0.01;
        return mv.toFixed(2);
      },
      fee() {
        const mv = this.wAmount * 0.01;
        return mv.toFixed(2);
      },
      canNext() {
        if (this.wAmount != 0 || this.wAmount != "") {
          if (this.account != "") {
            if (this.balance >= parseInt(this.wAmount)) {
              return true;
            }
          }
        } else {
          return false;
        }
      }
    },
    onShow() {
      this.getLandlordProfile();
    }
  };
  function _sfc_render$J(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_uni_popup_message = resolveEasycom(vue.resolveDynamicComponent("uni-popup-message"), __easycom_2$1);
    const _component_uni_popup = resolveEasycom(vue.resolveDynamicComponent("uni-popup"), __easycom_1$2);
    const _component_uni_popup_dialog = resolveEasycom(vue.resolveDynamicComponent("uni-popup-dialog"), __easycom_0$5);
    return vue.openBlock(), vue.createElementBlock("view", { class: "graybgc" }, [
      vue.createElementVNode("view", { class: "statusbar" }),
      vue.createElementVNode("view", { class: "topbar" }, [
        vue.createElementVNode("view", {
          class: "left",
          onClick: _cache[0] || (_cache[0] = (...args) => $options.nvback && $options.nvback(...args))
        }, [
          vue.createElementVNode("image", {
            class: "topbar-icon leftIco",
            src: "/static/image/icon/back_balck.png",
            mode: "aspectFit"
          })
        ]),
        vue.createElementVNode("view", { class: "housename" }, "余额管理"),
        vue.createElementVNode("view", { class: "right" })
      ]),
      vue.createElementVNode("view", { class: "content" }, [
        vue.createElementVNode("view", { class: "balanceModule" }, [
          vue.createElementVNode("view", { class: "balance bitem" }, [
            vue.createElementVNode("view", { class: "desc" }, "我的余额"),
            vue.createElementVNode(
              "view",
              { class: "amount" },
              "￥" + vue.toDisplayString($data.balance),
              1
              /* TEXT */
            )
          ]),
          vue.createElementVNode("view", { class: "noarrive bitem" }, [
            vue.createElementVNode("view", { class: "desc" }, "未到账"),
            vue.createElementVNode(
              "view",
              { class: "amount" },
              "￥" + vue.toDisplayString($data.nocompleteMonry),
              1
              /* TEXT */
            )
          ])
        ]),
        vue.createElementVNode("view", { class: "withdrawal" }, [
          vue.createElementVNode("view", { class: "wdamount" }, [
            vue.createElementVNode("view", { class: "desc" }, "提现金额："),
            vue.createElementVNode("view", { class: "ph" }),
            vue.createElementVNode("view", { class: "right" }, [
              vue.createElementVNode("text", { class: "rmb" }, "￥"),
              vue.createElementVNode("input", {
                class: "tipt",
                onInput: _cache[1] || (_cache[1] = (...args) => $options.handleInput && $options.handleInput(...args)),
                placeholder: $options.money,
                type: "Number"
              }, null, 40, ["placeholder"])
            ])
          ]),
          vue.createElementVNode("view", { class: "wdamount" }, [
            vue.createElementVNode("view", { class: "desc" }, "提现账户："),
            vue.createElementVNode("view", { class: "ph" }),
            vue.createElementVNode("view", { class: "right" }, [
              vue.createElementVNode(
                "input",
                {
                  class: "tipt tipt2",
                  onInput: _cache[2] || (_cache[2] = (...args) => $options.inputAccount && $options.inputAccount(...args)),
                  placeholder: "输入收款账户",
                  type: "text"
                },
                null,
                32
                /* HYDRATE_EVENTS */
              )
            ])
          ]),
          vue.createElementVNode("view", { class: "wdamount" }, [
            vue.createElementVNode("view", { class: "desc" }, "预计到账："),
            vue.createElementVNode(
              "view",
              { class: "right_t" },
              " ￥" + vue.toDisplayString($options.actualAmount),
              1
              /* TEXT */
            )
          ]),
          vue.createElementVNode("view", { class: "wdamount" }, [
            vue.createElementVNode("view", { class: "desc" }, "服务费："),
            vue.createElementVNode(
              "view",
              { class: "right_t" },
              " ￥" + vue.toDisplayString($options.fee),
              1
              /* TEXT */
            )
          ]),
          vue.createElementVNode(
            "view",
            {
              class: vue.normalizeClass(["btn", { "active": $options.canNext }]),
              onClick: _cache[3] || (_cache[3] = (...args) => $options.clickBtn && $options.clickBtn(...args))
            },
            "提现",
            2
            /* CLASS */
          )
        ])
      ]),
      $data.isLoading ? (vue.openBlock(), vue.createElementBlock("view", {
        key: 0,
        class: "loading"
      }, [
        vue.createElementVNode("image", {
          class: "loadingPic",
          src: "/static/image/icon/loading.gif",
          mode: ""
        })
      ])) : vue.createCommentVNode("v-if", true),
      vue.createVNode(
        _component_uni_popup,
        {
          ref: "message",
          type: "message"
        },
        {
          default: vue.withCtx(() => [
            vue.createVNode(_component_uni_popup_message, {
              type: $data.msgType,
              message: $data.wdwTxt,
              duration: 1400
            }, null, 8, ["type", "message"])
          ]),
          _: 1
          /* STABLE */
        },
        512
        /* NEED_PATCH */
      ),
      vue.createVNode(
        _component_uni_popup,
        {
          ref: "alertDialog1",
          type: "dialog"
        },
        {
          default: vue.withCtx(() => [
            vue.createVNode(_component_uni_popup_dialog, {
              type: "error",
              cancelText: "关闭",
              confirmText: "确定",
              title: "通知",
              content: $options.tipText,
              onConfirm: $options.confirmCancle
            }, null, 8, ["content", "onConfirm"])
          ]),
          _: 1
          /* STABLE */
        },
        512
        /* NEED_PATCH */
      )
    ]);
  }
  const PagesWithdrawalWithdrawal = /* @__PURE__ */ _export_sfc(_sfc_main$K, [["render", _sfc_render$J], ["__file", "D:/HLTrip/hl/pages/withdrawal/withdrawal.vue"]]);
  const _sfc_main$J = {
    data() {
      return {
        currentPage: 0,
        allOrder: [],
        wait_pay: [],
        processing: [],
        complete: [],
        cancleOnum1: 0,
        cancleOnum2: 0,
        tipText: "",
        message: ""
      };
    },
    onLoad(option) {
      if (option.page == void 0) {
        this.currentPage = 0;
      } else {
        this.currentPage = option.page;
      }
      this.getOrderList();
    },
    methods: {
      getOrderList() {
        uni.request({
          url: `${API.BASE_URL}/getUserOrders`,
          //仅为示例，并非真实接口地址。
          data: {
            uid: uni.getStorageSync("userId")
          },
          success: (res) => {
            const orderList = res.data.data.orderList.reverse();
            orderList.forEach((element) => {
              element.order.starttime = this.getTime(new Date(element.order.starttime));
              element.order.endtime = this.getTime(new Date(element.order.endtime));
            });
            this.allOrder = orderList;
            this.allOrder.forEach((element) => {
              if (element.order.ostatus == "待支付") {
                this.wait_pay.unshift(element);
              } else if (element.order.ostatus == "进行中" || element.order.ostatus == "待入住") {
                this.processing.unshift(element);
              } else if (element.order.ostatus == "已完成") {
                this.complete.unshift(element);
              }
            });
          }
        });
      },
      nvback() {
        uni.navigateBack();
      },
      getTime(dateObj) {
        const year = dateObj.getFullYear();
        const month = dateObj.getMonth() + 1;
        const date2 = dateObj.getDate();
        const day = dateObj.getDay();
        return {
          year,
          month: month.toString().padStart(2, "0"),
          date: date2.toString().padStart(2, "0"),
          day,
          arr: ["日", "一", "二", "三", "四", "五", "六"],
          timestamp: dateObj
        };
      },
      changePage(index2) {
        this.currentPage = index2;
      },
      bookagain(item) {
        uni.navigateTo({
          url: `/pages/hotelDetail/hotelDetail?houseid=${item.hov.houseid}`
        });
      },
      toBill(item) {
        uni.navigateTo({
          url: `/pages/orderpay/orderpay?num=${item.order.ordernumber}`
        });
      },
      alertCancle() {
        this.canaleOrder();
      },
      canaleOrder() {
        uni.request({
          url: `${API.BASE_URL}/closeOrder`,
          data: {
            orderNum: this.cancleOnum1
          },
          success: (res) => {
            this.allOrder = [];
            this.wait_pay = [];
            this.processing = [];
            this.complete = [];
            this.getOrderList();
            this.message = "取消成功";
            this.$refs.message.open();
          }
        });
      },
      openCD1(item) {
        this.cancleOnum1 = item.order.ordernumber;
        this.$refs.alertDialog.open();
      },
      openCD2(item) {
        this.cancleOnum2 = item.order.ordernumber;
        uni.request({
          url: `${API.BASE_URL}/canIcancleOrder`,
          data: {
            onum: this.cancleOnum2
          },
          success: (res) => {
            if (res.data) {
              this.tipText = "确定取消订单吗，现在取消将全额退款";
              this.$refs.alertDialog1.open();
            } else {
              this.tipText = "确定取消订单吗，现在取消将扣除所有房费";
              this.$refs.alertDialog1.open();
            }
          }
        });
      },
      confirmCancle() {
        uni.request({
          url: `${API.BASE_URL}/confirmCancle`,
          data: {
            onum: this.cancleOnum2
          },
          success: (res) => {
            if (res.data) {
              this.message = "取消成功";
              this.$refs.message.open();
              this.allOrder = [];
              this.wait_pay = [];
              this.processing = [];
              this.complete = [];
              this.getOrderList();
            } else {
              this.message = "取消失败";
              this.$refs.message.open();
              this.allOrder = [];
              this.wait_pay = [];
              this.processing = [];
              this.complete = [];
              this.getOrderList();
            }
          }
        });
      }
    }
  };
  function _sfc_render$I(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_uni_popup_dialog = resolveEasycom(vue.resolveDynamicComponent("uni-popup-dialog"), __easycom_0$5);
    const _component_uni_popup = resolveEasycom(vue.resolveDynamicComponent("uni-popup"), __easycom_1$2);
    const _component_uni_popup_message = resolveEasycom(vue.resolveDynamicComponent("uni-popup-message"), __easycom_2$1);
    return vue.openBlock(), vue.createElementBlock("view", null, [
      vue.createElementVNode("view", { class: "statusbar" }),
      vue.createElementVNode("view", { class: "topbar" }, [
        vue.createElementVNode("view", {
          class: "left",
          onClick: _cache[0] || (_cache[0] = (...args) => $options.nvback && $options.nvback(...args))
        }, [
          vue.createElementVNode("image", {
            class: "topbar-icon leftIco",
            src: "/static/image/icon/back_balck.png",
            mode: "aspectFit"
          })
        ]),
        vue.createElementVNode("view", { class: "housename" }, "全部订单"),
        vue.createElementVNode("view", { class: "right" })
      ]),
      vue.createElementVNode("view", { class: "switchTab" }, [
        vue.createElementVNode(
          "view",
          {
            class: vue.normalizeClass(["item", { "tab_select": $data.currentPage == 0 }]),
            onClick: _cache[1] || (_cache[1] = ($event) => $options.changePage(0))
          },
          "全部",
          2
          /* CLASS */
        ),
        vue.createElementVNode(
          "view",
          {
            class: vue.normalizeClass(["item", { "tab_select": $data.currentPage == 1 }]),
            onClick: _cache[2] || (_cache[2] = ($event) => $options.changePage(1))
          },
          "待支付",
          2
          /* CLASS */
        ),
        vue.createElementVNode(
          "view",
          {
            class: vue.normalizeClass(["item", { "tab_select": $data.currentPage == 2 }]),
            onClick: _cache[3] || (_cache[3] = ($event) => $options.changePage(2))
          },
          "进行中",
          2
          /* CLASS */
        ),
        vue.createElementVNode(
          "view",
          {
            class: vue.normalizeClass(["item", { "tab_select": $data.currentPage == 3 }]),
            onClick: _cache[4] || (_cache[4] = ($event) => $options.changePage(3))
          },
          "已完成",
          2
          /* CLASS */
        )
      ]),
      vue.createElementVNode("scroll-view", {
        "scroll-y": "",
        class: "sw_content"
      }, [
        $data.currentPage == 0 ? (vue.openBlock(), vue.createElementBlock("view", {
          key: 0,
          class: "se_item"
        }, [
          $data.allOrder.length == 0 ? (vue.openBlock(), vue.createElementBlock("view", {
            key: 0,
            class: "empty"
          }, [
            vue.createElementVNode("image", {
              class: "imgept",
              src: "/static/image/empty_bg.png",
              mode: ""
            }),
            vue.createElementVNode("br"),
            vue.createTextVNode(" 暂无相关订单 ")
          ])) : vue.createCommentVNode("v-if", true),
          $data.allOrder.length != 0 ? (vue.openBlock(true), vue.createElementBlock(
            vue.Fragment,
            { key: 1 },
            vue.renderList($data.allOrder, (item, index2) => {
              return vue.openBlock(), vue.createElementBlock("view", {
                class: "commentItem",
                key: index2
              }, [
                vue.createElementVNode("view", {
                  class: "picwrp",
                  onClick: ($event) => $options.toBill(item)
                }, [
                  vue.createElementVNode("view", { class: "left" }, [
                    vue.createElementVNode(
                      "view",
                      {
                        class: vue.normalizeClass(["order_status", { "active": item.order.ostatus == "待支付" }])
                      },
                      vue.toDisplayString(item.order.ostatus),
                      3
                      /* TEXT, CLASS */
                    ),
                    vue.createElementVNode(
                      "view",
                      { class: "housename" },
                      vue.toDisplayString(item.hov.housename),
                      1
                      /* TEXT */
                    ),
                    vue.createElementVNode(
                      "view",
                      { class: "checktime" },
                      vue.toDisplayString(item.order.starttime.month) + "." + vue.toDisplayString(item.order.starttime.date) + " -" + vue.toDisplayString(item.order.endtime.month) + "." + vue.toDisplayString(item.order.endtime.date) + " · " + vue.toDisplayString(item.hov.rentaltype),
                      1
                      /* TEXT */
                    ),
                    vue.createElementVNode(
                      "view",
                      { class: "checktime" },
                      " 金额:￥" + vue.toDisplayString(item.order.totalprice.toFixed(2)),
                      1
                      /* TEXT */
                    )
                  ]),
                  vue.createElementVNode("image", {
                    class: "pic",
                    src: item.hov.coverurl,
                    mode: "aspectFill"
                  }, null, 8, ["src"])
                ], 8, ["onClick"]),
                vue.createElementVNode("view", null, [
                  item.order.ostatus == "待支付" ? (vue.openBlock(), vue.createElementBlock("view", {
                    key: 0,
                    class: "bbtn2"
                  }, [
                    vue.createElementVNode("view", {
                      class: "toDetail",
                      onClick: ($event) => $options.toBill(item)
                    }, "去支付", 8, ["onClick"]),
                    vue.createElementVNode("view", {
                      class: "cancle",
                      onClick: ($event) => $options.openCD1(item)
                    }, "取消订单", 8, ["onClick"]),
                    vue.createElementVNode("view", { class: "blk" }),
                    vue.createElementVNode(
                      "view",
                      { class: "ordernum" },
                      "订单号:" + vue.toDisplayString(item.order.ordernumber),
                      1
                      /* TEXT */
                    )
                  ])) : item.order.ostatus == "进行中" || item.order.ostatus == "待入住" ? (vue.openBlock(), vue.createElementBlock("view", {
                    key: 1,
                    class: "bbtn3"
                  }, [
                    vue.createElementVNode("view", {
                      class: "cancle",
                      onClick: ($event) => $options.openCD2(item)
                    }, "取消订单", 8, ["onClick"]),
                    vue.createElementVNode(
                      "view",
                      { class: "ordernum" },
                      "订单号:" + vue.toDisplayString(item.order.ordernumber),
                      1
                      /* TEXT */
                    )
                  ])) : (vue.openBlock(), vue.createElementBlock("view", {
                    key: 2,
                    class: "bbtn1"
                  }, [
                    vue.createElementVNode("view", {
                      class: "toDetail",
                      onClick: ($event) => $options.bookagain(item)
                    }, "再次预订", 8, ["onClick"]),
                    vue.createElementVNode(
                      "view",
                      { class: "ordernum" },
                      "订单号:" + vue.toDisplayString(item.order.ordernumber),
                      1
                      /* TEXT */
                    )
                  ]))
                ])
              ]);
            }),
            128
            /* KEYED_FRAGMENT */
          )) : vue.createCommentVNode("v-if", true)
        ])) : vue.createCommentVNode("v-if", true),
        $data.currentPage == 1 ? (vue.openBlock(), vue.createElementBlock("view", {
          key: 1,
          class: "se_item"
        }, [
          $data.wait_pay.length == 0 ? (vue.openBlock(), vue.createElementBlock("view", {
            key: 0,
            class: "empty"
          }, [
            vue.createElementVNode("image", {
              class: "imgept",
              src: "/static/image/empty_bg.png",
              mode: ""
            }),
            vue.createElementVNode("br"),
            vue.createTextVNode(" 暂无相关订单 ")
          ])) : vue.createCommentVNode("v-if", true),
          $data.wait_pay.length != 0 ? (vue.openBlock(true), vue.createElementBlock(
            vue.Fragment,
            { key: 1 },
            vue.renderList($data.wait_pay, (item, index2) => {
              return vue.openBlock(), vue.createElementBlock("view", {
                class: "commentItem",
                key: index2
              }, [
                vue.createElementVNode("view", {
                  class: "picwrp",
                  onClick: ($event) => $options.toBill(item)
                }, [
                  vue.createElementVNode("view", { class: "left" }, [
                    vue.createElementVNode(
                      "view",
                      {
                        class: vue.normalizeClass(["order_status", { "active": item.order.ostatus == "待支付" }])
                      },
                      vue.toDisplayString(item.order.ostatus),
                      3
                      /* TEXT, CLASS */
                    ),
                    vue.createElementVNode(
                      "view",
                      { class: "housename" },
                      vue.toDisplayString(item.hov.housename),
                      1
                      /* TEXT */
                    ),
                    vue.createElementVNode(
                      "view",
                      { class: "checktime" },
                      vue.toDisplayString(item.order.starttime.month) + "." + vue.toDisplayString(item.order.starttime.date) + " -" + vue.toDisplayString(item.order.endtime.month) + "." + vue.toDisplayString(item.order.endtime.date) + " · " + vue.toDisplayString(item.hov.rentaltype),
                      1
                      /* TEXT */
                    ),
                    vue.createElementVNode(
                      "view",
                      { class: "checktime" },
                      " 金额:￥" + vue.toDisplayString(item.order.totalprice.toFixed(2)),
                      1
                      /* TEXT */
                    )
                  ]),
                  vue.createElementVNode("image", {
                    class: "pic",
                    src: item.hov.coverurl,
                    mode: "aspectFill"
                  }, null, 8, ["src"])
                ], 8, ["onClick"]),
                vue.createElementVNode("view", { class: "bbtn2" }, [
                  vue.createElementVNode("view", {
                    class: "toDetail",
                    onClick: ($event) => $options.toBill(item)
                  }, "去支付", 8, ["onClick"]),
                  vue.createElementVNode("view", {
                    class: "cancle",
                    onClick: ($event) => $options.openCD1(item)
                  }, "取消订单", 8, ["onClick"]),
                  vue.createElementVNode("view", { class: "blk" }),
                  vue.createElementVNode(
                    "view",
                    { class: "ordernum" },
                    "订单号:" + vue.toDisplayString(item.order.ordernumber),
                    1
                    /* TEXT */
                  )
                ])
              ]);
            }),
            128
            /* KEYED_FRAGMENT */
          )) : vue.createCommentVNode("v-if", true)
        ])) : vue.createCommentVNode("v-if", true),
        $data.currentPage == 2 ? (vue.openBlock(), vue.createElementBlock("view", {
          key: 2,
          class: "se_item"
        }, [
          $data.processing.length == 0 ? (vue.openBlock(), vue.createElementBlock("view", {
            key: 0,
            class: "empty"
          }, [
            vue.createElementVNode("image", {
              class: "imgept",
              src: "/static/image/empty_bg.png",
              mode: ""
            }),
            vue.createElementVNode("br"),
            vue.createTextVNode(" 暂无相关订单 ")
          ])) : vue.createCommentVNode("v-if", true),
          $data.processing.length != 0 ? (vue.openBlock(true), vue.createElementBlock(
            vue.Fragment,
            { key: 1 },
            vue.renderList($data.processing, (item, index2) => {
              return vue.openBlock(), vue.createElementBlock("view", {
                class: "commentItem",
                key: index2
              }, [
                vue.createElementVNode("view", {
                  class: "picwrp",
                  onClick: ($event) => $options.toBill(item)
                }, [
                  vue.createElementVNode("view", { class: "left" }, [
                    vue.createElementVNode(
                      "view",
                      {
                        class: vue.normalizeClass(["order_status", { "active": item.order.ostatus == "待支付" }])
                      },
                      vue.toDisplayString(item.order.ostatus),
                      3
                      /* TEXT, CLASS */
                    ),
                    vue.createElementVNode(
                      "view",
                      { class: "housename" },
                      vue.toDisplayString(item.hov.housename),
                      1
                      /* TEXT */
                    ),
                    vue.createElementVNode(
                      "view",
                      { class: "checktime" },
                      vue.toDisplayString(item.order.starttime.month) + "." + vue.toDisplayString(item.order.starttime.date) + " -" + vue.toDisplayString(item.order.endtime.month) + "." + vue.toDisplayString(item.order.endtime.date) + " · " + vue.toDisplayString(item.hov.rentaltype),
                      1
                      /* TEXT */
                    ),
                    vue.createElementVNode(
                      "view",
                      { class: "checktime" },
                      " 金额:￥" + vue.toDisplayString(item.order.totalprice.toFixed(2)),
                      1
                      /* TEXT */
                    )
                  ]),
                  vue.createElementVNode("image", {
                    class: "pic",
                    src: item.hov.coverurl,
                    mode: "aspectFill"
                  }, null, 8, ["src"])
                ], 8, ["onClick"]),
                vue.createElementVNode("view", null, [
                  vue.createElementVNode("view", { class: "bbtn3" }, [
                    vue.createElementVNode("view", {
                      class: "cancle",
                      onClick: ($event) => $options.openCD2(item)
                    }, "取消订单", 8, ["onClick"]),
                    vue.createElementVNode(
                      "view",
                      { class: "ordernum" },
                      "订单号:" + vue.toDisplayString(item.order.ordernumber),
                      1
                      /* TEXT */
                    )
                  ])
                ])
              ]);
            }),
            128
            /* KEYED_FRAGMENT */
          )) : vue.createCommentVNode("v-if", true)
        ])) : vue.createCommentVNode("v-if", true),
        $data.currentPage == 3 ? (vue.openBlock(), vue.createElementBlock("view", {
          key: 3,
          class: "se_item"
        }, [
          $data.complete.length == 0 ? (vue.openBlock(), vue.createElementBlock("view", {
            key: 0,
            class: "empty"
          }, [
            vue.createElementVNode("image", {
              class: "imgept",
              src: "/static/image/empty_bg.png",
              mode: ""
            }),
            vue.createElementVNode("br"),
            vue.createTextVNode(" 暂无相关订单 ")
          ])) : vue.createCommentVNode("v-if", true),
          $data.complete.length != 0 ? (vue.openBlock(true), vue.createElementBlock(
            vue.Fragment,
            { key: 1 },
            vue.renderList($data.complete, (item, index2) => {
              return vue.openBlock(), vue.createElementBlock("view", {
                class: "commentItem",
                key: index2
              }, [
                vue.createElementVNode("view", {
                  class: "picwrp",
                  onClick: ($event) => $options.toBill(item)
                }, [
                  vue.createElementVNode("view", { class: "left" }, [
                    vue.createElementVNode(
                      "view",
                      {
                        class: vue.normalizeClass(["order_status", { "active": item.order.ostatus == "待支付" }])
                      },
                      vue.toDisplayString(item.order.ostatus),
                      3
                      /* TEXT, CLASS */
                    ),
                    vue.createElementVNode(
                      "view",
                      { class: "housename" },
                      vue.toDisplayString(item.hov.housename),
                      1
                      /* TEXT */
                    ),
                    vue.createElementVNode(
                      "view",
                      { class: "checktime" },
                      vue.toDisplayString(item.order.starttime.month) + "." + vue.toDisplayString(item.order.starttime.date) + " -" + vue.toDisplayString(item.order.endtime.month) + "." + vue.toDisplayString(item.order.endtime.date) + " · " + vue.toDisplayString(item.hov.rentaltype),
                      1
                      /* TEXT */
                    ),
                    vue.createElementVNode(
                      "view",
                      { class: "checktime" },
                      " 金额:￥" + vue.toDisplayString(item.order.totalprice.toFixed(2)),
                      1
                      /* TEXT */
                    )
                  ]),
                  vue.createElementVNode("image", {
                    class: "pic",
                    src: item.hov.coverurl,
                    mode: "aspectFill"
                  }, null, 8, ["src"])
                ], 8, ["onClick"]),
                vue.createElementVNode("view", null, [
                  vue.createElementVNode("view", { class: "bbtn1" }, [
                    vue.createElementVNode("view", {
                      class: "toDetail",
                      onClick: ($event) => $options.bookagain(item)
                    }, "再次预订", 8, ["onClick"]),
                    vue.createElementVNode(
                      "view",
                      { class: "ordernum" },
                      "订单号:" + vue.toDisplayString(item.order.ordernumber),
                      1
                      /* TEXT */
                    )
                  ])
                ])
              ]);
            }),
            128
            /* KEYED_FRAGMENT */
          )) : vue.createCommentVNode("v-if", true)
        ])) : vue.createCommentVNode("v-if", true),
        vue.createElementVNode("view", { class: "mbb" })
      ]),
      vue.createVNode(
        _component_uni_popup,
        {
          ref: "alertDialog",
          type: "dialog"
        },
        {
          default: vue.withCtx(() => [
            vue.createVNode(_component_uni_popup_dialog, {
              type: "error",
              cancelText: "按错了",
              confirmText: "确定",
              title: "通知",
              content: "确定要取消该订单吗",
              onConfirm: $options.alertCancle
            }, null, 8, ["onConfirm"])
          ]),
          _: 1
          /* STABLE */
        },
        512
        /* NEED_PATCH */
      ),
      vue.createVNode(
        _component_uni_popup,
        {
          ref: "alertDialog1",
          type: "dialog"
        },
        {
          default: vue.withCtx(() => [
            vue.createVNode(_component_uni_popup_dialog, {
              type: "error",
              cancelText: "关闭",
              confirmText: "确定",
              title: "通知",
              content: $data.tipText,
              onConfirm: $options.confirmCancle
            }, null, 8, ["content", "onConfirm"])
          ]),
          _: 1
          /* STABLE */
        },
        512
        /* NEED_PATCH */
      ),
      vue.createVNode(
        _component_uni_popup,
        {
          ref: "message",
          type: "message"
        },
        {
          default: vue.withCtx(() => [
            vue.createVNode(_component_uni_popup_message, {
              type: "warn",
              message: $data.message,
              duration: 2e3
            }, null, 8, ["message"])
          ]),
          _: 1
          /* STABLE */
        },
        512
        /* NEED_PATCH */
      )
    ]);
  }
  const PagesOrderList_userOrderList_user = /* @__PURE__ */ _export_sfc(_sfc_main$J, [["render", _sfc_render$I], ["__file", "D:/HLTrip/hl/pages/orderList_user/orderList_user.vue"]]);
  const _sfc_main$I = {
    props: {
      urls: {
        type: Array,
        required: true,
        default: () => {
          return [];
        }
      }
    },
    data() {
      return {
        show: false,
        current: 0,
        //当前页
        scale: 1,
        isZooming: false
        // 是否处于缩放状态
      };
    },
    methods: {
      //打开
      open(current) {
        this.current = this.urls.findIndex((item) => item === current);
        this.show = true;
        this.$emit("open");
      },
      //关闭
      close() {
        if (!this.isZooming) {
          this.show = false;
          this.current = 0;
          this.$emit("close");
        }
      },
      //图片改变
      swiperChange(e) {
        this.current = e.detail.current;
      },
      //监听长按
      onLongpress(e) {
        this.$emit("onLongpress", e);
      },
      handleTouchStart() {
        this.isZooming = true;
      },
      handleTouchEnd() {
        this.isZooming = false;
      }
    }
  };
  function _sfc_render$H(_ctx, _cache, $props, $setup, $data, $options) {
    return $data.show ? (vue.openBlock(), vue.createElementBlock("view", {
      key: 0,
      class: "previewImage",
      onClick: _cache[3] || (_cache[3] = (...args) => $options.close && $options.close(...args))
    }, [
      $props.urls.length > 0 ? (vue.openBlock(), vue.createElementBlock("view", {
        key: 0,
        class: "page"
      }, [
        vue.createElementVNode(
          "text",
          { class: "text" },
          vue.toDisplayString($data.current + 1) + " / " + vue.toDisplayString($props.urls.length),
          1
          /* TEXT */
        )
      ])) : vue.createCommentVNode("v-if", true),
      vue.createElementVNode("swiper", {
        class: "swiper",
        current: $data.current,
        onChange: _cache[0] || (_cache[0] = (...args) => $options.swiperChange && $options.swiperChange(...args)),
        onTouchstart: _cache[1] || (_cache[1] = (...args) => $options.handleTouchStart && $options.handleTouchStart(...args)),
        onTouchend: _cache[2] || (_cache[2] = (...args) => $options.handleTouchEnd && $options.handleTouchEnd(...args))
      }, [
        (vue.openBlock(true), vue.createElementBlock(
          vue.Fragment,
          null,
          vue.renderList($props.urls, (item, index2) => {
            return vue.openBlock(), vue.createElementBlock("swiper-item", { key: index2 }, [
              vue.createElementVNode("movable-area", {
                class: "movable-area",
                "scale-area": ""
              }, [
                vue.createElementVNode("movable-view", {
                  class: "movable-view",
                  direction: "all",
                  inertia: true,
                  damping: "100",
                  scale: "true",
                  "scale-min": "1",
                  "scale-max": "4",
                  "scale-value": $data.scale
                }, [
                  vue.createElementVNode("scroll-view", {
                    "scroll-y": "true",
                    class: "uni-scroll-view"
                  }, [
                    vue.createElementVNode("view", { class: "scroll-view" }, [
                      (vue.openBlock(), vue.createElementBlock("image", {
                        key: index2,
                        class: "image",
                        src: item,
                        mode: "widthFix",
                        onLongpress: ($event) => $options.onLongpress(item)
                      }, null, 40, ["src", "onLongpress"]))
                    ])
                  ])
                ], 8, ["scale-value"])
              ])
            ]);
          }),
          128
          /* KEYED_FRAGMENT */
        ))
      ], 40, ["current"])
    ])) : vue.createCommentVNode("v-if", true);
  }
  const __easycom_0$4 = /* @__PURE__ */ _export_sfc(_sfc_main$I, [["render", _sfc_render$H], ["__scopeId", "data-v-fdd21252"], ["__file", "D:/HLTrip/hl/uni_modules/q-previewImage/components/q-previewImage/q-previewImage.vue"]]);
  const _sfc_main$H = {
    data() {
      return {
        info: {},
        txt: "",
        cid: "",
        poptext: ""
      };
    },
    computed: {
      placeholder() {
        return "回复 @" + this.info.comment.username + "...";
      }
    },
    methods: {
      nvback() {
        uni.navigateBack({
          delta: 1
        });
      },
      getTime(dateObj) {
        const year = dateObj.getFullYear();
        const month = dateObj.getMonth() + 1;
        const date2 = dateObj.getDate();
        const day = dateObj.getDay();
        return {
          year,
          month: month.toString().padStart(2, "0"),
          date: date2.toString().padStart(2, "0"),
          day,
          arr: ["日", "一", "二", "三", "四", "五", "六"],
          timestamp: dateObj
        };
      },
      zoom(index2) {
        this.$refs.previewImage.open(this.info.urls[index2]);
      },
      openReply() {
        this.$refs.distancepopup.open("bottom");
      },
      sendComment() {
        if (this.txt != "") {
          uni.request({
            url: `${API.BASE_URL}/replyComment`,
            data: {
              cid: this.cid,
              reply: this.txt
            },
            success: (res) => {
              if (res.data) {
                this.poptext = "回复成功";
                this.$refs.alertDialog.open();
              } else {
                this.poptext = "回复失败";
                this.$refs.alertDialog.open();
              }
            }
          });
        }
      }
    },
    onLoad(option) {
      this.cid = option.cid;
      uni.request({
        url: `${API.BASE_URL}/getSingalComment`,
        //仅为示例，并非真实接口地址。
        data: {
          cid: this.cid
        },
        success: (res) => {
          formatAppLog("log", "at pages/comment_reply/comment_reply.vue:128", res.data);
          this.info = res.data.data;
          this.info.comment.commenttime = this.getTime(new Date(this.info.comment.commenttime));
          this.info.comment.commentcontent = "环境很不错，下次还会再来";
          this.info.comment.rating = this.info.comment.rating.toFixed(1);
        }
      });
    }
  };
  function _sfc_render$G(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_uni_popup = resolveEasycom(vue.resolveDynamicComponent("uni-popup"), __easycom_1$2);
    const _component_uni_popup_dialog = resolveEasycom(vue.resolveDynamicComponent("uni-popup-dialog"), __easycom_0$5);
    const _component_q_previewImage = resolveEasycom(vue.resolveDynamicComponent("q-previewImage"), __easycom_0$4);
    return vue.openBlock(), vue.createElementBlock("view", null, [
      vue.createElementVNode("view", { class: "statusbar" }),
      vue.createElementVNode("view", { class: "topbar" }, [
        vue.createElementVNode("view", {
          class: "left",
          onClick: _cache[0] || (_cache[0] = (...args) => $options.nvback && $options.nvback(...args))
        }, [
          vue.createElementVNode("image", {
            class: "topbar-icon leftIco",
            src: "/static/image/icon/back_balck.png",
            mode: "aspectFit"
          })
        ]),
        vue.createElementVNode("view", { class: "housename" }, "评论详情"),
        vue.createElementVNode("view", { class: "right" })
      ]),
      $data.info != {} ? (vue.openBlock(), vue.createElementBlock("view", {
        key: 0,
        class: "commentbody"
      }, [
        vue.createElementVNode("view", { class: "commentHeader" }, [
          vue.createElementVNode("view", { class: "avatar" }, [
            vue.createElementVNode("image", {
              class: "avatarPic",
              src: $data.info.avatar,
              mode: "aspectFill"
            }, null, 8, ["src"])
          ]),
          vue.createElementVNode("view", { class: "right" }, [
            vue.createElementVNode(
              "view",
              { class: "name" },
              vue.toDisplayString($data.info.comment.username),
              1
              /* TEXT */
            ),
            vue.createElementVNode("view", { class: "commenttime" }, [
              vue.createElementVNode(
                "view",
                { class: "time" },
                vue.toDisplayString($data.info.comment.commenttime.year) + "-" + vue.toDisplayString($data.info.comment.commenttime.month) + "-" + vue.toDisplayString($data.info.comment.commenttime.date),
                1
                /* TEXT */
              ),
              vue.createElementVNode(
                "view",
                { class: "rating" },
                vue.toDisplayString($data.info.comment.rating),
                1
                /* TEXT */
              )
            ])
          ])
        ]),
        vue.createElementVNode(
          "view",
          { class: "commentContent" },
          vue.toDisplayString($data.info.comment.commentcontent),
          1
          /* TEXT */
        ),
        vue.createElementVNode("view", { class: "picwrpper" }, [
          (vue.openBlock(true), vue.createElementBlock(
            vue.Fragment,
            null,
            vue.renderList($data.info.urls, (item, index2) => {
              return vue.openBlock(), vue.createElementBlock("view", {
                class: "picitem",
                onClick: ($event) => $options.zoom(index2)
              }, [
                vue.createElementVNode("image", {
                  class: "images",
                  src: item,
                  mode: "aspectFill"
                }, null, 8, ["src"])
              ], 8, ["onClick"]);
            }),
            256
            /* UNKEYED_FRAGMENT */
          )),
          vue.createElementVNode("i"),
          vue.createElementVNode("i"),
          vue.createElementVNode("i")
        ])
      ])) : vue.createCommentVNode("v-if", true),
      $data.info != {} ? (vue.openBlock(), vue.createElementBlock("view", {
        key: 1,
        class: "replyBar"
      }, [
        vue.createElementVNode(
          "view",
          {
            class: "inputblock",
            onClick: _cache[1] || (_cache[1] = (...args) => $options.openReply && $options.openReply(...args))
          },
          "回复 @" + vue.toDisplayString($data.info.comment.username) + " ...",
          1
          /* TEXT */
        )
      ])) : vue.createCommentVNode("v-if", true),
      vue.createVNode(
        _component_uni_popup,
        {
          ref: "distancepopup",
          "background-color": "#fff",
          "border-radius": "20rpx 20rpx 0 0"
        },
        {
          default: vue.withCtx(() => [
            vue.createElementVNode("view", { class: "popup_content" }, [
              vue.withDirectives(vue.createElementVNode("textarea", {
                "confirm-type": "send",
                class: "textarea",
                placeholder: $options.placeholder,
                "onUpdate:modelValue": _cache[2] || (_cache[2] = ($event) => $data.txt = $event),
                onConfirm: _cache[3] || (_cache[3] = (...args) => $options.sendComment && $options.sendComment(...args))
              }, null, 40, ["placeholder"]), [
                [vue.vModelText, $data.txt]
              ]),
              vue.createElementVNode("view", { class: "btnph" }, [
                $data.txt != "" ? (vue.openBlock(), vue.createElementBlock("view", {
                  key: 0,
                  class: "sendBtn",
                  onClick: _cache[4] || (_cache[4] = (...args) => $options.sendComment && $options.sendComment(...args))
                }, "发送")) : vue.createCommentVNode("v-if", true)
              ])
            ])
          ]),
          _: 1
          /* STABLE */
        },
        512
        /* NEED_PATCH */
      ),
      vue.createVNode(
        _component_uni_popup,
        {
          ref: "alertDialog",
          type: "dialog"
        },
        {
          default: vue.withCtx(() => [
            vue.createVNode(_component_uni_popup_dialog, {
              type: "error",
              cancelText: "关闭",
              confirmText: "确定",
              title: "通知",
              content: $data.poptext,
              onClose: $options.nvback,
              onConfirm: $options.nvback
            }, null, 8, ["content", "onClose", "onConfirm"])
          ]),
          _: 1
          /* STABLE */
        },
        512
        /* NEED_PATCH */
      ),
      vue.createVNode(_component_q_previewImage, {
        ref: "previewImage",
        urls: $data.info.urls
      }, null, 8, ["urls"])
    ]);
  }
  const PagesComment_replyComment_reply = /* @__PURE__ */ _export_sfc(_sfc_main$H, [["render", _sfc_render$G], ["__file", "D:/HLTrip/hl/pages/comment_reply/comment_reply.vue"]]);
  const _sfc_main$G = {
    data() {
      return {
        info: []
      };
    },
    methods: {
      nvback() {
        uni.navigateBack({
          delta: 1
        });
      },
      getComments() {
        uni.request({
          url: `${API.BASE_URL}/landlordQueryComment`,
          data: {
            lid: uni.getStorageSync("landlordid")
          },
          success: (res) => {
            formatAppLog("log", "at pages/landCommentList/landCommentList.vue:57", res.data);
            this.info = res.data.data.comments;
            this.info.forEach((element) => {
              element.comment.commenttime = this.getTime(new Date(element.comment.commenttime));
            });
          }
        });
      },
      getTime(dateObj) {
        const year = dateObj.getFullYear();
        const month = dateObj.getMonth() + 1;
        const date2 = dateObj.getDate();
        const day = dateObj.getDay();
        return {
          year,
          month: month.toString().padStart(2, "0"),
          date: date2.toString().padStart(2, "0"),
          day,
          arr: ["日", "一", "二", "三", "四", "五", "六"],
          timestamp: dateObj
        };
      },
      toreply(item) {
        uni.navigateTo({
          url: `/pages/comment_reply/comment_reply?cid=${item.comment.commentid}`
        });
      }
    },
    onShow() {
      this.getComments();
    }
  };
  function _sfc_render$F(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("view", null, [
      vue.createElementVNode("view", { class: "statusbar" }),
      vue.createElementVNode("view", { class: "topbar" }, [
        vue.createElementVNode("view", {
          class: "left",
          onClick: _cache[0] || (_cache[0] = (...args) => $options.nvback && $options.nvback(...args))
        }, [
          vue.createElementVNode("image", {
            class: "topbar-icon leftIco",
            src: "/static/image/icon/back_balck.png",
            mode: "aspectFit"
          })
        ]),
        vue.createElementVNode("view", { class: "housename" }, "待回复"),
        vue.createElementVNode("view", { class: "right" })
      ]),
      vue.createElementVNode(
        "scroll-view",
        {
          "scroll-y": "",
          class: vue.normalizeClass(["commentList", { "whiteBg": $data.info.length == 0 }])
        },
        [
          (vue.openBlock(true), vue.createElementBlock(
            vue.Fragment,
            null,
            vue.renderList($data.info, (item, index2) => {
              return vue.openBlock(), vue.createElementBlock("view", {
                class: "commentItem",
                onClick: ($event) => $options.toreply(item)
              }, [
                vue.createElementVNode("view", { class: "citem" }, [
                  vue.createElementVNode("view", { class: "left" }, [
                    vue.createElementVNode("view", { class: "comment" }, [
                      vue.createTextVNode("@"),
                      vue.createElementVNode(
                        "text",
                        { class: "uname" },
                        vue.toDisplayString(item.comment.username),
                        1
                        /* TEXT */
                      ),
                      vue.createTextVNode(
                        " 回复说：" + vue.toDisplayString(item.comment.commentcontent),
                        1
                        /* TEXT */
                      )
                    ]),
                    vue.createElementVNode("view", { class: "commenttime" }, [
                      vue.createTextVNode(
                        vue.toDisplayString(item.comment.commenttime.year) + "-" + vue.toDisplayString(item.comment.commenttime.month) + "-" + vue.toDisplayString(item.comment.commenttime.date) + " 评论",
                        1
                        /* TEXT */
                      ),
                      vue.createElementVNode("text", { class: "reply" }, "回复")
                    ])
                  ]),
                  vue.createElementVNode("view", { class: "right" }, [
                    vue.createElementVNode("image", {
                      src: item.hov.coverurl,
                      class: "cover",
                      mode: "aspectFill"
                    }, null, 8, ["src"])
                  ])
                ])
              ], 8, ["onClick"]);
            }),
            256
            /* UNKEYED_FRAGMENT */
          )),
          $data.info.length == 0 ? (vue.openBlock(), vue.createElementBlock("view", {
            key: 0,
            class: "empty"
          }, [
            vue.createElementVNode("image", {
              src: "/static/image/empty_bg.png",
              mode: ""
            }),
            vue.createElementVNode("br"),
            vue.createTextVNode(" 暂无相关订单 ")
          ])) : vue.createCommentVNode("v-if", true),
          vue.createElementVNode("view", { class: "mbb" })
        ],
        2
        /* CLASS */
      )
    ]);
  }
  const PagesLandCommentListLandCommentList = /* @__PURE__ */ _export_sfc(_sfc_main$G, [["render", _sfc_render$F], ["__file", "D:/HLTrip/hl/pages/landCommentList/landCommentList.vue"]]);
  const fontData = [
    {
      "font_class": "arrow-down",
      "unicode": ""
    },
    {
      "font_class": "arrow-left",
      "unicode": ""
    },
    {
      "font_class": "arrow-right",
      "unicode": ""
    },
    {
      "font_class": "arrow-up",
      "unicode": ""
    },
    {
      "font_class": "auth",
      "unicode": ""
    },
    {
      "font_class": "auth-filled",
      "unicode": ""
    },
    {
      "font_class": "back",
      "unicode": ""
    },
    {
      "font_class": "bars",
      "unicode": ""
    },
    {
      "font_class": "calendar",
      "unicode": ""
    },
    {
      "font_class": "calendar-filled",
      "unicode": ""
    },
    {
      "font_class": "camera",
      "unicode": ""
    },
    {
      "font_class": "camera-filled",
      "unicode": ""
    },
    {
      "font_class": "cart",
      "unicode": ""
    },
    {
      "font_class": "cart-filled",
      "unicode": ""
    },
    {
      "font_class": "chat",
      "unicode": ""
    },
    {
      "font_class": "chat-filled",
      "unicode": ""
    },
    {
      "font_class": "chatboxes",
      "unicode": ""
    },
    {
      "font_class": "chatboxes-filled",
      "unicode": ""
    },
    {
      "font_class": "chatbubble",
      "unicode": ""
    },
    {
      "font_class": "chatbubble-filled",
      "unicode": ""
    },
    {
      "font_class": "checkbox",
      "unicode": ""
    },
    {
      "font_class": "checkbox-filled",
      "unicode": ""
    },
    {
      "font_class": "checkmarkempty",
      "unicode": ""
    },
    {
      "font_class": "circle",
      "unicode": ""
    },
    {
      "font_class": "circle-filled",
      "unicode": ""
    },
    {
      "font_class": "clear",
      "unicode": ""
    },
    {
      "font_class": "close",
      "unicode": ""
    },
    {
      "font_class": "closeempty",
      "unicode": ""
    },
    {
      "font_class": "cloud-download",
      "unicode": ""
    },
    {
      "font_class": "cloud-download-filled",
      "unicode": ""
    },
    {
      "font_class": "cloud-upload",
      "unicode": ""
    },
    {
      "font_class": "cloud-upload-filled",
      "unicode": ""
    },
    {
      "font_class": "color",
      "unicode": ""
    },
    {
      "font_class": "color-filled",
      "unicode": ""
    },
    {
      "font_class": "compose",
      "unicode": ""
    },
    {
      "font_class": "contact",
      "unicode": ""
    },
    {
      "font_class": "contact-filled",
      "unicode": ""
    },
    {
      "font_class": "down",
      "unicode": ""
    },
    {
      "font_class": "bottom",
      "unicode": ""
    },
    {
      "font_class": "download",
      "unicode": ""
    },
    {
      "font_class": "download-filled",
      "unicode": ""
    },
    {
      "font_class": "email",
      "unicode": ""
    },
    {
      "font_class": "email-filled",
      "unicode": ""
    },
    {
      "font_class": "eye",
      "unicode": ""
    },
    {
      "font_class": "eye-filled",
      "unicode": ""
    },
    {
      "font_class": "eye-slash",
      "unicode": ""
    },
    {
      "font_class": "eye-slash-filled",
      "unicode": ""
    },
    {
      "font_class": "fire",
      "unicode": ""
    },
    {
      "font_class": "fire-filled",
      "unicode": ""
    },
    {
      "font_class": "flag",
      "unicode": ""
    },
    {
      "font_class": "flag-filled",
      "unicode": ""
    },
    {
      "font_class": "folder-add",
      "unicode": ""
    },
    {
      "font_class": "folder-add-filled",
      "unicode": ""
    },
    {
      "font_class": "font",
      "unicode": ""
    },
    {
      "font_class": "forward",
      "unicode": ""
    },
    {
      "font_class": "gear",
      "unicode": ""
    },
    {
      "font_class": "gear-filled",
      "unicode": ""
    },
    {
      "font_class": "gift",
      "unicode": ""
    },
    {
      "font_class": "gift-filled",
      "unicode": ""
    },
    {
      "font_class": "hand-down",
      "unicode": ""
    },
    {
      "font_class": "hand-down-filled",
      "unicode": ""
    },
    {
      "font_class": "hand-up",
      "unicode": ""
    },
    {
      "font_class": "hand-up-filled",
      "unicode": ""
    },
    {
      "font_class": "headphones",
      "unicode": ""
    },
    {
      "font_class": "heart",
      "unicode": ""
    },
    {
      "font_class": "heart-filled",
      "unicode": ""
    },
    {
      "font_class": "help",
      "unicode": ""
    },
    {
      "font_class": "help-filled",
      "unicode": ""
    },
    {
      "font_class": "home",
      "unicode": ""
    },
    {
      "font_class": "home-filled",
      "unicode": ""
    },
    {
      "font_class": "image",
      "unicode": ""
    },
    {
      "font_class": "image-filled",
      "unicode": ""
    },
    {
      "font_class": "images",
      "unicode": ""
    },
    {
      "font_class": "images-filled",
      "unicode": ""
    },
    {
      "font_class": "info",
      "unicode": ""
    },
    {
      "font_class": "info-filled",
      "unicode": ""
    },
    {
      "font_class": "left",
      "unicode": ""
    },
    {
      "font_class": "link",
      "unicode": ""
    },
    {
      "font_class": "list",
      "unicode": ""
    },
    {
      "font_class": "location",
      "unicode": ""
    },
    {
      "font_class": "location-filled",
      "unicode": ""
    },
    {
      "font_class": "locked",
      "unicode": ""
    },
    {
      "font_class": "locked-filled",
      "unicode": ""
    },
    {
      "font_class": "loop",
      "unicode": ""
    },
    {
      "font_class": "mail-open",
      "unicode": ""
    },
    {
      "font_class": "mail-open-filled",
      "unicode": ""
    },
    {
      "font_class": "map",
      "unicode": ""
    },
    {
      "font_class": "map-filled",
      "unicode": ""
    },
    {
      "font_class": "map-pin",
      "unicode": ""
    },
    {
      "font_class": "map-pin-ellipse",
      "unicode": ""
    },
    {
      "font_class": "medal",
      "unicode": ""
    },
    {
      "font_class": "medal-filled",
      "unicode": ""
    },
    {
      "font_class": "mic",
      "unicode": ""
    },
    {
      "font_class": "mic-filled",
      "unicode": ""
    },
    {
      "font_class": "micoff",
      "unicode": ""
    },
    {
      "font_class": "micoff-filled",
      "unicode": ""
    },
    {
      "font_class": "minus",
      "unicode": ""
    },
    {
      "font_class": "minus-filled",
      "unicode": ""
    },
    {
      "font_class": "more",
      "unicode": ""
    },
    {
      "font_class": "more-filled",
      "unicode": ""
    },
    {
      "font_class": "navigate",
      "unicode": ""
    },
    {
      "font_class": "navigate-filled",
      "unicode": ""
    },
    {
      "font_class": "notification",
      "unicode": ""
    },
    {
      "font_class": "notification-filled",
      "unicode": ""
    },
    {
      "font_class": "paperclip",
      "unicode": ""
    },
    {
      "font_class": "paperplane",
      "unicode": ""
    },
    {
      "font_class": "paperplane-filled",
      "unicode": ""
    },
    {
      "font_class": "person",
      "unicode": ""
    },
    {
      "font_class": "person-filled",
      "unicode": ""
    },
    {
      "font_class": "personadd",
      "unicode": ""
    },
    {
      "font_class": "personadd-filled",
      "unicode": ""
    },
    {
      "font_class": "personadd-filled-copy",
      "unicode": ""
    },
    {
      "font_class": "phone",
      "unicode": ""
    },
    {
      "font_class": "phone-filled",
      "unicode": ""
    },
    {
      "font_class": "plus",
      "unicode": ""
    },
    {
      "font_class": "plus-filled",
      "unicode": ""
    },
    {
      "font_class": "plusempty",
      "unicode": ""
    },
    {
      "font_class": "pulldown",
      "unicode": ""
    },
    {
      "font_class": "pyq",
      "unicode": ""
    },
    {
      "font_class": "qq",
      "unicode": ""
    },
    {
      "font_class": "redo",
      "unicode": ""
    },
    {
      "font_class": "redo-filled",
      "unicode": ""
    },
    {
      "font_class": "refresh",
      "unicode": ""
    },
    {
      "font_class": "refresh-filled",
      "unicode": ""
    },
    {
      "font_class": "refreshempty",
      "unicode": ""
    },
    {
      "font_class": "reload",
      "unicode": ""
    },
    {
      "font_class": "right",
      "unicode": ""
    },
    {
      "font_class": "scan",
      "unicode": ""
    },
    {
      "font_class": "search",
      "unicode": ""
    },
    {
      "font_class": "settings",
      "unicode": ""
    },
    {
      "font_class": "settings-filled",
      "unicode": ""
    },
    {
      "font_class": "shop",
      "unicode": ""
    },
    {
      "font_class": "shop-filled",
      "unicode": ""
    },
    {
      "font_class": "smallcircle",
      "unicode": ""
    },
    {
      "font_class": "smallcircle-filled",
      "unicode": ""
    },
    {
      "font_class": "sound",
      "unicode": ""
    },
    {
      "font_class": "sound-filled",
      "unicode": ""
    },
    {
      "font_class": "spinner-cycle",
      "unicode": ""
    },
    {
      "font_class": "staff",
      "unicode": ""
    },
    {
      "font_class": "staff-filled",
      "unicode": ""
    },
    {
      "font_class": "star",
      "unicode": ""
    },
    {
      "font_class": "star-filled",
      "unicode": ""
    },
    {
      "font_class": "starhalf",
      "unicode": ""
    },
    {
      "font_class": "trash",
      "unicode": ""
    },
    {
      "font_class": "trash-filled",
      "unicode": ""
    },
    {
      "font_class": "tune",
      "unicode": ""
    },
    {
      "font_class": "tune-filled",
      "unicode": ""
    },
    {
      "font_class": "undo",
      "unicode": ""
    },
    {
      "font_class": "undo-filled",
      "unicode": ""
    },
    {
      "font_class": "up",
      "unicode": ""
    },
    {
      "font_class": "top",
      "unicode": ""
    },
    {
      "font_class": "upload",
      "unicode": ""
    },
    {
      "font_class": "upload-filled",
      "unicode": ""
    },
    {
      "font_class": "videocam",
      "unicode": ""
    },
    {
      "font_class": "videocam-filled",
      "unicode": ""
    },
    {
      "font_class": "vip",
      "unicode": ""
    },
    {
      "font_class": "vip-filled",
      "unicode": ""
    },
    {
      "font_class": "wallet",
      "unicode": ""
    },
    {
      "font_class": "wallet-filled",
      "unicode": ""
    },
    {
      "font_class": "weibo",
      "unicode": ""
    },
    {
      "font_class": "weixin",
      "unicode": ""
    }
  ];
  const getVal = (val) => {
    const reg = /^[0-9]*$/g;
    return typeof val === "number" || reg.test(val) ? val + "px" : val;
  };
  const _sfc_main$F = {
    name: "UniIcons",
    emits: ["click"],
    props: {
      type: {
        type: String,
        default: ""
      },
      color: {
        type: String,
        default: "#333333"
      },
      size: {
        type: [Number, String],
        default: 16
      },
      customPrefix: {
        type: String,
        default: ""
      },
      fontFamily: {
        type: String,
        default: ""
      }
    },
    data() {
      return {
        icons: fontData
      };
    },
    computed: {
      unicode() {
        let code2 = this.icons.find((v) => v.font_class === this.type);
        if (code2) {
          return code2.unicode;
        }
        return "";
      },
      iconSize() {
        return getVal(this.size);
      },
      styleObj() {
        if (this.fontFamily !== "") {
          return `color: ${this.color}; font-size: ${this.iconSize}; font-family: ${this.fontFamily};`;
        }
        return `color: ${this.color}; font-size: ${this.iconSize};`;
      }
    },
    methods: {
      _onClick() {
        this.$emit("click");
      }
    }
  };
  function _sfc_render$E(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock(
      "text",
      {
        style: vue.normalizeStyle($options.styleObj),
        class: vue.normalizeClass(["uni-icons", ["uniui-" + $props.type, $props.customPrefix, $props.customPrefix ? $props.type : ""]]),
        onClick: _cache[0] || (_cache[0] = (...args) => $options._onClick && $options._onClick(...args))
      },
      [
        vue.renderSlot(_ctx.$slots, "default", {}, void 0, true)
      ],
      6
      /* CLASS, STYLE */
    );
  }
  const __easycom_0$3 = /* @__PURE__ */ _export_sfc(_sfc_main$F, [["render", _sfc_render$E], ["__scopeId", "data-v-d31e1c47"], ["__file", "D:/HLTrip/hl/uni_modules/uni-icons/components/uni-icons/uni-icons.vue"]]);
  const _sfc_main$E = {
    name: "UniRate",
    props: {
      isFill: {
        // 星星的类型，是否镂空
        type: [Boolean, String],
        default: true
      },
      color: {
        // 星星未选中的颜色
        type: String,
        default: "#ececec"
      },
      activeColor: {
        // 星星选中状态颜色
        type: String,
        default: "#ffca3e"
      },
      disabledColor: {
        // 星星禁用状态颜色
        type: String,
        default: "#c0c0c0"
      },
      size: {
        // 星星的大小
        type: [Number, String],
        default: 24
      },
      value: {
        // 当前评分
        type: [Number, String],
        default: 0
      },
      modelValue: {
        // 当前评分
        type: [Number, String],
        default: 0
      },
      max: {
        // 最大评分
        type: [Number, String],
        default: 5
      },
      margin: {
        // 星星的间距
        type: [Number, String],
        default: 0
      },
      disabled: {
        // 是否可点击
        type: [Boolean, String],
        default: false
      },
      readonly: {
        // 是否只读
        type: [Boolean, String],
        default: false
      },
      allowHalf: {
        // 是否显示半星
        type: [Boolean, String],
        default: false
      },
      touchable: {
        // 是否支持滑动手势
        type: [Boolean, String],
        default: true
      }
    },
    data() {
      return {
        valueSync: "",
        userMouseFristMove: true,
        userRated: false,
        userLastRate: 1
      };
    },
    watch: {
      value(newVal) {
        this.valueSync = Number(newVal);
      },
      modelValue(newVal) {
        this.valueSync = Number(newVal);
      }
    },
    computed: {
      stars() {
        const value = this.valueSync ? this.valueSync : 0;
        const starList = [];
        const floorValue = Math.floor(value);
        const ceilValue = Math.ceil(value);
        for (let i = 0; i < this.max; i++) {
          if (floorValue > i) {
            starList.push({
              activeWitch: "100%"
            });
          } else if (ceilValue - 1 === i) {
            starList.push({
              activeWitch: (value - floorValue) * 100 + "%"
            });
          } else {
            starList.push({
              activeWitch: "0"
            });
          }
        }
        return starList;
      },
      marginNumber() {
        return Number(this.margin);
      }
    },
    created() {
      this.valueSync = Number(this.value || this.modelValue);
      this._rateBoxLeft = 0;
      this._oldValue = null;
    },
    mounted() {
      setTimeout(() => {
        this._getSize();
      }, 100);
    },
    methods: {
      touchstart(e) {
        if (this.readonly || this.disabled)
          return;
        const {
          clientX,
          screenX
        } = e.changedTouches[0];
        this._getRateCount(clientX || screenX);
      },
      touchmove(e) {
        if (this.readonly || this.disabled || !this.touchable)
          return;
        const {
          clientX,
          screenX
        } = e.changedTouches[0];
        this._getRateCount(clientX || screenX);
      },
      /**
       * 兼容 PC @tian
       */
      mousedown(e) {
      },
      mousemove(e) {
      },
      mouseleave(e) {
      },
      /**
       * 获取星星个数
       */
      _getRateCount(clientX) {
        this._getSize();
        const size = Number(this.size);
        if (isNaN(size)) {
          return new Error("size 属性只能设置为数字");
        }
        const rateMoveRange = clientX - this._rateBoxLeft;
        let index2 = parseInt(rateMoveRange / (size + this.marginNumber));
        index2 = index2 < 0 ? 0 : index2;
        index2 = index2 > this.max ? this.max : index2;
        const range2 = parseInt(rateMoveRange - (size + this.marginNumber) * index2);
        let value = 0;
        if (this._oldValue === index2 && !this.PC)
          return;
        this._oldValue = index2;
        if (this.allowHalf) {
          if (range2 > size / 2) {
            value = index2 + 1;
          } else {
            value = index2 + 0.5;
          }
        } else {
          value = index2 + 1;
        }
        value = Math.max(0.5, Math.min(value, this.max));
        this.valueSync = value;
        this._onChange();
      },
      /**
       * 触发动态修改
       */
      _onChange() {
        this.$emit("input", this.valueSync);
        this.$emit("update:modelValue", this.valueSync);
        this.$emit("change", {
          value: this.valueSync
        });
      },
      /**
       * 获取星星距离屏幕左侧距离
       */
      _getSize() {
        uni.createSelectorQuery().in(this).select(".uni-rate").boundingClientRect().exec((ret2) => {
          if (ret2) {
            this._rateBoxLeft = ret2[0].left;
          }
        });
      }
    }
  };
  function _sfc_render$D(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_uni_icons = resolveEasycom(vue.resolveDynamicComponent("uni-icons"), __easycom_0$3);
    return vue.openBlock(), vue.createElementBlock("view", null, [
      vue.createElementVNode(
        "view",
        {
          ref: "uni-rate",
          class: "uni-rate"
        },
        [
          (vue.openBlock(true), vue.createElementBlock(
            vue.Fragment,
            null,
            vue.renderList($options.stars, (star, index2) => {
              return vue.openBlock(), vue.createElementBlock(
                "view",
                {
                  class: vue.normalizeClass(["uni-rate__icon", { "uni-cursor-not-allowed": $props.disabled }]),
                  style: vue.normalizeStyle({ "margin-right": $options.marginNumber + "px" }),
                  key: index2,
                  onTouchstart: _cache[0] || (_cache[0] = vue.withModifiers((...args) => $options.touchstart && $options.touchstart(...args), ["stop"])),
                  onTouchmove: _cache[1] || (_cache[1] = vue.withModifiers((...args) => $options.touchmove && $options.touchmove(...args), ["stop"])),
                  onMousedown: _cache[2] || (_cache[2] = vue.withModifiers((...args) => $options.mousedown && $options.mousedown(...args), ["stop"])),
                  onMousemove: _cache[3] || (_cache[3] = vue.withModifiers((...args) => $options.mousemove && $options.mousemove(...args), ["stop"])),
                  onMouseleave: _cache[4] || (_cache[4] = (...args) => $options.mouseleave && $options.mouseleave(...args))
                },
                [
                  vue.createVNode(_component_uni_icons, {
                    color: $props.color,
                    size: $props.size,
                    type: $props.isFill ? "star-filled" : "star"
                  }, null, 8, ["color", "size", "type"]),
                  vue.createElementVNode(
                    "view",
                    {
                      style: vue.normalizeStyle({ width: star.activeWitch }),
                      class: "uni-rate__icon-on"
                    },
                    [
                      vue.createVNode(_component_uni_icons, {
                        color: $props.disabled ? $props.disabledColor : $props.activeColor,
                        size: $props.size,
                        type: "star-filled"
                      }, null, 8, ["color", "size"])
                    ],
                    4
                    /* STYLE */
                  )
                ],
                38
                /* CLASS, STYLE, HYDRATE_EVENTS */
              );
            }),
            128
            /* KEYED_FRAGMENT */
          ))
        ],
        512
        /* NEED_PATCH */
      )
    ]);
  }
  const __easycom_0$2 = /* @__PURE__ */ _export_sfc(_sfc_main$E, [["render", _sfc_render$D], ["__scopeId", "data-v-5c8fbdf3"], ["__file", "D:/HLTrip/hl/uni_modules/uni-rate/components/uni-rate/uni-rate.vue"]]);
  const _sfc_main$D = {
    data() {
      return {
        uname: "",
        lid: "",
        hid: "",
        oid: "",
        currentCursor: 0,
        content: "",
        urls: [],
        clean: 0,
        acc: 0,
        ltp: 0,
        sft: 0,
        vfm: 0,
        messageText: ""
      };
    },
    methods: {
      hanldeInput(e) {
        this.currentCursor = e.detail.cursor;
      },
      naback() {
        uni.navigateBack({
          delta: 1
        });
      },
      chooseImage() {
        uni.chooseImage({
          count: 9,
          //默认9
          sizeType: ["original", "compressed"],
          //可以指定是原图还是压缩图，默认二者都有
          sourceType: ["album", "camera"],
          //从相册选择
          success: function(res) {
            res.tempFilePaths.forEach((filePath) => {
              uni.uploadFile({
                url: `${API.BASE_URL}/uploadImage`,
                filePath,
                name: "file",
                formData: {
                  // 其他参数
                  uid: uni.getStorageSync("userId"),
                  role: "landlord"
                },
                success: (uploadFileRes) => {
                  if (uploadFileRes.data != "error") {
                    this.urls.push(uploadFileRes.data);
                  }
                },
                fail: (uploadFileRes) => {
                  formatAppLog("log", "at pages/comment_detail/comment_detail.vue:109", uploadFileRes);
                }
              });
            });
          }.bind(this)
        });
      },
      deleteImage(index2) {
        uni.request({
          url: `${API.BASE_URL}/deletePic`,
          //仅为示例，并非真实接口地址。
          data: {
            url: this.urls[index2]
          },
          success: (res) => {
            this.urls.splice(index2, 1);
          }
        });
      },
      commitComment() {
        if (this.canNext) {
          let calcrating = ((this.clean + this.acc + this.ltp + this.sft + this.vfm) / 5).toFixed(1);
          uni.request({
            url: `${API.BASE_URL}/commitComment`,
            data: {
              uid: uni.getStorageSync("userId"),
              commentContent: this.content,
              uname: this.uname,
              rate1: this.clean,
              rate2: this.acc,
              rate3: this.ltp,
              rate4: this.sft,
              rate5: this.vfm,
              rating: calcrating,
              lid: this.lid,
              hid: this.hid,
              urls: this.urls,
              oid: this.oid
            },
            success: (res) => {
              if (res.data) {
                this.messageText = "点评成功";
                this.$refs.alertDialog.open();
              } else {
                this.messageText = "点评失败";
                this.$refs.alertDialog.open();
              }
            }
          });
        } else {
          this.$refs.message.open();
        }
      },
      dialogConfirm() {
        uni.navigateBack({
          delta: 2
        });
      }
    },
    onLoad(option) {
      this.uname = option.uname;
      this.lid = option.lid;
      this.hid = option.hid;
      this.oid = option.oid;
    },
    computed: {
      canNext() {
        if (this.content != "") {
          return true;
        } else {
          return false;
        }
      }
    }
  };
  function _sfc_render$C(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_uni_rate = resolveEasycom(vue.resolveDynamicComponent("uni-rate"), __easycom_0$2);
    const _component_uni_popup_dialog = resolveEasycom(vue.resolveDynamicComponent("uni-popup-dialog"), __easycom_0$5);
    const _component_uni_popup = resolveEasycom(vue.resolveDynamicComponent("uni-popup"), __easycom_1$2);
    const _component_uni_popup_message = resolveEasycom(vue.resolveDynamicComponent("uni-popup-message"), __easycom_2$1);
    return vue.openBlock(), vue.createElementBlock("view", null, [
      vue.createElementVNode("view", { class: "statusbar" }),
      vue.createElementVNode("view", { class: "topbar" }, [
        vue.createElementVNode("view", {
          class: "left",
          onClick: _cache[0] || (_cache[0] = (...args) => $options.naback && $options.naback(...args))
        }, [
          vue.createElementVNode("image", {
            class: "topbar-icon leftIco",
            src: "/static/image/icon/back_balck.png",
            mode: "aspectFit"
          })
        ]),
        vue.createElementVNode("view", { class: "housename" }, "评论"),
        vue.createElementVNode(
          "view",
          {
            class: vue.normalizeClass(["right", { "actived": $options.canNext }]),
            onClick: _cache[1] || (_cache[1] = (...args) => $options.commitComment && $options.commitComment(...args))
          },
          " 发布 ",
          2
          /* CLASS */
        )
      ]),
      vue.createElementVNode("scroll-view", {
        "scroll-y": "",
        class: "commentcontent"
      }, [
        vue.withDirectives(vue.createElementVNode(
          "textarea",
          {
            class: "tarea",
            "placeholder-style": "color:#bdbdbd",
            placeholder: "说点什么吧...",
            onInput: _cache[2] || (_cache[2] = (...args) => $options.hanldeInput && $options.hanldeInput(...args)),
            "onUpdate:modelValue": _cache[3] || (_cache[3] = ($event) => $data.content = $event)
          },
          null,
          544
          /* HYDRATE_EVENTS, NEED_PATCH */
        ), [
          [vue.vModelText, $data.content]
        ]),
        vue.createElementVNode(
          "view",
          { class: "count" },
          vue.toDisplayString($data.currentCursor) + "/120",
          1
          /* TEXT */
        ),
        vue.createElementVNode("scroll-view", {
          "scroll-x": "true",
          class: "item"
        }, [
          vue.createElementVNode("view", {
            class: "addPic",
            onClick: _cache[4] || (_cache[4] = (...args) => $options.chooseImage && $options.chooseImage(...args))
          }, [
            vue.createElementVNode("image", {
              class: "image",
              src: "/static/image/icon/add.png",
              mode: "aspectFill"
            })
          ]),
          (vue.openBlock(true), vue.createElementBlock(
            vue.Fragment,
            null,
            vue.renderList($data.urls, (url2, index2) => {
              return vue.openBlock(), vue.createElementBlock("view", {
                class: "image-container",
                key: index2
              }, [
                vue.createElementVNode("image", {
                  class: "image",
                  src: url2,
                  mode: "aspectFill"
                }, null, 8, ["src"]),
                vue.createElementVNode("view", {
                  class: "delete-icon",
                  onClick: ($event) => $options.deleteImage(index2)
                }, [
                  vue.createElementVNode("image", {
                    class: "deleteIco",
                    src: "/static/image/icon/clear.png",
                    mode: "aspectFill"
                  })
                ], 8, ["onClick"])
              ]);
            }),
            128
            /* KEYED_FRAGMENT */
          ))
        ]),
        vue.createElementVNode("view", { class: "rating" }, [
          vue.createElementVNode("view", { class: "ritem" }, [
            vue.createElementVNode("view", { class: "desc" }, "整洁卫生"),
            vue.createVNode(_component_uni_rate, {
              "allow-half": "",
              activeColor: "#fd7c3c",
              margin: 8,
              modelValue: $data.clean,
              "onUpdate:modelValue": _cache[5] || (_cache[5] = ($event) => $data.clean = $event)
            }, null, 8, ["modelValue"]),
            vue.createTextVNode(),
            vue.createElementVNode(
              "view",
              { class: "rate" },
              vue.toDisplayString($data.clean),
              1
              /* TEXT */
            )
          ]),
          vue.createElementVNode("view", { class: "ritem" }, [
            vue.createElementVNode("view", { class: "desc" }, "描述相符"),
            vue.createVNode(_component_uni_rate, {
              "allow-half": "",
              activeColor: "#fd7c3c",
              margin: 8,
              modelValue: $data.acc,
              "onUpdate:modelValue": _cache[6] || (_cache[6] = ($event) => $data.acc = $event)
            }, null, 8, ["modelValue"]),
            vue.createTextVNode(),
            vue.createElementVNode(
              "view",
              { class: "rate" },
              vue.toDisplayString($data.acc),
              1
              /* TEXT */
            )
          ]),
          vue.createElementVNode("view", { class: "ritem" }, [
            vue.createElementVNode("view", { class: "desc" }, "交通位置"),
            vue.createVNode(_component_uni_rate, {
              "allow-half": "",
              activeColor: "#fd7c3c",
              margin: 8,
              modelValue: $data.ltp,
              "onUpdate:modelValue": _cache[7] || (_cache[7] = ($event) => $data.ltp = $event)
            }, null, 8, ["modelValue"]),
            vue.createTextVNode(),
            vue.createElementVNode(
              "view",
              { class: "rate" },
              vue.toDisplayString($data.ltp),
              1
              /* TEXT */
            )
          ]),
          vue.createElementVNode("view", { class: "ritem" }, [
            vue.createElementVNode("view", { class: "desc" }, "安全程度"),
            vue.createVNode(_component_uni_rate, {
              "allow-half": "",
              activeColor: "#fd7c3c",
              margin: 8,
              modelValue: $data.sft,
              "onUpdate:modelValue": _cache[8] || (_cache[8] = ($event) => $data.sft = $event)
            }, null, 8, ["modelValue"]),
            vue.createTextVNode(),
            vue.createElementVNode(
              "view",
              { class: "rate" },
              vue.toDisplayString($data.sft),
              1
              /* TEXT */
            )
          ]),
          vue.createElementVNode("view", { class: "ritem" }, [
            vue.createElementVNode("view", { class: "desc" }, "性价比"),
            vue.createVNode(_component_uni_rate, {
              "allow-half": "",
              activeColor: "#fd7c3c",
              margin: 8,
              modelValue: $data.vfm,
              "onUpdate:modelValue": _cache[9] || (_cache[9] = ($event) => $data.vfm = $event)
            }, null, 8, ["modelValue"]),
            vue.createTextVNode(),
            vue.createElementVNode(
              "view",
              { class: "rate" },
              vue.toDisplayString($data.vfm),
              1
              /* TEXT */
            )
          ])
        ]),
        vue.createElementVNode("view", { class: "mbb" })
      ]),
      vue.createVNode(
        _component_uni_popup,
        {
          ref: "alertDialog",
          type: "dialog"
        },
        {
          default: vue.withCtx(() => [
            vue.createVNode(_component_uni_popup_dialog, {
              type: "error",
              cancelText: "关闭",
              onClose: $options.dialogConfirm,
              confirmText: "确定",
              title: "通知",
              content: $data.messageText,
              onConfirm: $options.dialogConfirm
            }, null, 8, ["onClose", "content", "onConfirm"])
          ]),
          _: 1
          /* STABLE */
        },
        512
        /* NEED_PATCH */
      ),
      vue.createVNode(
        _component_uni_popup,
        {
          ref: "message",
          type: "message"
        },
        {
          default: vue.withCtx(() => [
            vue.createVNode(_component_uni_popup_message, {
              type: "warn",
              message: "请先输入内容",
              duration: _ctx.duration
            }, null, 8, ["duration"])
          ]),
          _: 1
          /* STABLE */
        },
        512
        /* NEED_PATCH */
      )
    ]);
  }
  const PagesComment_detailComment_detail = /* @__PURE__ */ _export_sfc(_sfc_main$D, [["render", _sfc_render$C], ["__file", "D:/HLTrip/hl/pages/comment_detail/comment_detail.vue"]]);
  const _sfc_main$C = {
    data() {
      return {
        info: [],
        uname: ""
      };
    },
    methods: {
      getTime(dateObj) {
        const year = dateObj.getFullYear();
        const month = dateObj.getMonth() + 1;
        const date2 = dateObj.getDate();
        const day = dateObj.getDay();
        return {
          year,
          month: month.toString().padStart(2, "0"),
          date: date2.toString().padStart(2, "0"),
          day,
          arr: ["日", "一", "二", "三", "四", "五", "六"],
          timestamp: dateObj
        };
      },
      naback() {
        uni.navigateBack({
          delta: 1
        });
      },
      bookagain(item) {
        uni.navigateTo({
          url: `/pages/hotelDetail/hotelDetail?houseid=${item.hid}`
        });
      },
      tocomm(item) {
        uni.navigateTo({
          url: `/pages/comment_detail/comment_detail?uname=${this.uname}&lid=${item.lid}&hid=${item.hid}&oid=${item.oid}`
        });
      },
      queryCl() {
        uni.request({
          url: `${API.BASE_URL}/queryComments`,
          //仅为示例，并非真实接口地址。
          data: {
            userid: uni.getStorageSync("userId")
          },
          success: (res) => {
            formatAppLog("log", "at pages/commentList_user/commentList_user.vue:93", res.data);
            if (res.data.data.comments.length != 0) {
              const orgList = res.data.data.comments;
              orgList.forEach((element) => {
                const obj = {};
                obj.housename = element.hov.housename;
                obj.hid = element.hov.houseid;
                obj.cover = element.hov.coverurl;
                obj.st = this.getTime(new Date(element.order.starttime));
                obj.et = this.getTime(new Date(element.order.endtime));
                obj.lid = element.hov.landlordid;
                obj.uname = this.uname;
                obj.tprice = element.order.totalprice;
                this.info.unshift(obj);
                obj.oid = element.order.orderid;
              });
              formatAppLog("log", "at pages/commentList_user/commentList_user.vue:109", this.info);
            }
          }
        });
      }
    },
    onLoad(option) {
      this.uname = option.uname;
    },
    onShow() {
      this.info = [];
      this.queryCl();
    }
  };
  function _sfc_render$B(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("view", null, [
      vue.createElementVNode("view", { class: "statusbar" }),
      vue.createElementVNode("view", { class: "topbar" }, [
        vue.createElementVNode("view", {
          class: "left",
          onClick: _cache[0] || (_cache[0] = (...args) => $options.naback && $options.naback(...args))
        }, [
          vue.createElementVNode("image", {
            class: "topbar-icon leftIco",
            src: "/static/image/icon/back_balck.png",
            mode: "aspectFit"
          })
        ]),
        vue.createElementVNode("view", { class: "housename" }, "待评价"),
        vue.createElementVNode("view", { class: "right" })
      ]),
      vue.createElementVNode(
        "scroll-view",
        {
          "scroll-y": "",
          class: vue.normalizeClass(["commentList", { "whiteBg": $data.info.length == 0 }])
        },
        [
          $data.info.length != 0 ? (vue.openBlock(true), vue.createElementBlock(
            vue.Fragment,
            { key: 0 },
            vue.renderList($data.info, (item, index2) => {
              return vue.openBlock(), vue.createElementBlock("view", {
                class: "commentItem",
                key: index2
              }, [
                vue.createElementVNode("view", { class: "item" }, " 民宿 "),
                vue.createElementVNode("view", { class: "picwrp" }, [
                  vue.createElementVNode("view", { class: "left" }, [
                    vue.createElementVNode(
                      "view",
                      { class: "housename" },
                      vue.toDisplayString(item.housename),
                      1
                      /* TEXT */
                    ),
                    vue.createElementVNode("view", { class: "checktime" }, [
                      vue.createTextVNode(
                        vue.toDisplayString(item.st.year) + "-" + vue.toDisplayString(item.st.month) + "-" + vue.toDisplayString(item.st.date) + " 至",
                        1
                        /* TEXT */
                      ),
                      vue.createElementVNode("br"),
                      vue.createTextVNode(
                        vue.toDisplayString(item.et.year) + "-" + vue.toDisplayString(item.et.month) + "-" + vue.toDisplayString(item.et.date),
                        1
                        /* TEXT */
                      )
                    ])
                  ]),
                  vue.createElementVNode("image", {
                    class: "pic",
                    src: item.cover,
                    mode: "aspectFill"
                  }, null, 8, ["src"])
                ]),
                vue.createElementVNode(
                  "view",
                  { class: "price" },
                  "￥" + vue.toDisplayString(item.tprice),
                  1
                  /* TEXT */
                ),
                vue.createElementVNode("view", { class: "btngroup" }, [
                  vue.createElementVNode("view", { class: "placeholder" }),
                  vue.createElementVNode("view", {
                    class: "mybtn",
                    onClick: ($event) => $options.tocomm(item)
                  }, "去评价", 8, ["onClick"]),
                  vue.createElementVNode("view", {
                    class: "mybtn",
                    onClick: ($event) => $options.bookagain(item)
                  }, "再次预订", 8, ["onClick"])
                ])
              ]);
            }),
            128
            /* KEYED_FRAGMENT */
          )) : vue.createCommentVNode("v-if", true),
          $data.info.length == 0 ? (vue.openBlock(), vue.createElementBlock("view", {
            key: 1,
            class: "empty"
          }, [
            vue.createElementVNode("image", {
              src: "/static/image/empty_bg.png",
              mode: ""
            }),
            vue.createElementVNode("br"),
            vue.createTextVNode(" 暂无相关订单 ")
          ])) : vue.createCommentVNode("v-if", true),
          vue.createElementVNode("view", { class: "mbb" })
        ],
        2
        /* CLASS */
      )
    ]);
  }
  const PagesCommentList_userCommentList_user = /* @__PURE__ */ _export_sfc(_sfc_main$C, [["render", _sfc_render$B], ["__file", "D:/HLTrip/hl/pages/commentList_user/commentList_user.vue"]]);
  const _sfc_main$B = {
    data() {
      return {
        avatar: "",
        nickname: "",
        phonenumber: "",
        editNameL: false,
        tiptext: ""
      };
    },
    methods: {
      nvback() {
        uni.navigateBack();
      },
      chooseImage() {
        uni.chooseImage({
          count: 1,
          //默认9
          sizeType: ["original", "compressed"],
          //可以指定是原图还是压缩图，默认二者都有
          sourceType: ["album", "camera"],
          //从相册选择
          success: function(res) {
            res.tempFilePaths.forEach((filePath) => {
              uni.uploadFile({
                url: `${API.BASE_URL}/uploadImage`,
                filePath,
                name: "file",
                formData: {
                  // 其他参数
                  uid: uni.getStorageSync("userId"),
                  role: "tenant"
                },
                success: (uploadFileRes) => {
                  if (uploadFileRes.data != "error") {
                    this.avatar = uploadFileRes.data;
                  }
                },
                fail: (uploadFileRes) => {
                  formatAppLog("log", "at pages/editprofile/editprofile.vue:69", uploadFileRes);
                }
              });
            });
          }.bind(this)
        });
      },
      changeProfile() {
        uni.request({
          url: `${API.BASE_URL}/changeUserProfile`,
          data: {
            name: this.nickname,
            avatar: this.avatar,
            uid: uni.getStorageSync("userId")
          },
          success: (res) => {
            if (res.data) {
              formatAppLog("log", "at pages/editprofile/editprofile.vue:86", "修改成功");
              this.tiptext = "修改成功";
              this.$refs.alertDialog.open("info");
            }
          },
          fail: (res) => {
            this.tiptext = "修改失败";
            this.$refs.alertDialog.open("info");
            formatAppLog("log", "at pages/editprofile/editprofile.vue:96", "修改失败");
          }
        });
      },
      dialogConfirm() {
        uni.navigateBack({
          delta: 1
        });
      }
    },
    onLoad() {
      uni.request({
        url: `${API.BASE_URL}/getProfileData`,
        //仅为示例，并非真实接口地址。
        data: {
          userid: uni.getStorageSync("userId")
          // userid: 7
        },
        success: (res) => {
          formatAppLog("log", "at pages/editprofile/editprofile.vue:115", res.data);
          this.avatar = res.data.data.user.avatarpic;
          this.nickname = res.data.data.user.username;
          this.phonenumber = res.data.data.user.phonenumber;
          this.browsecount = res.data.data.browsecount;
        }
      });
    },
    computed: {
      canNext() {
        if (this.avatar != "" || this.nickname != "") {
          return true;
        } else {
          return false;
        }
      }
    }
  };
  function _sfc_render$A(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_uni_popup_dialog = resolveEasycom(vue.resolveDynamicComponent("uni-popup-dialog"), __easycom_0$5);
    const _component_uni_popup = resolveEasycom(vue.resolveDynamicComponent("uni-popup"), __easycom_1$2);
    return vue.openBlock(), vue.createElementBlock("view", null, [
      vue.createElementVNode("view", { class: "statusbar" }),
      vue.createElementVNode("view", { class: "topbar" }, [
        vue.createElementVNode("view", {
          class: "left",
          onClick: _cache[0] || (_cache[0] = (...args) => $options.nvback && $options.nvback(...args))
        }, [
          vue.createElementVNode("image", {
            class: "topbar-icon leftIco",
            src: "/static/image/icon/back_balck.png",
            mode: "aspectFit"
          })
        ]),
        vue.createElementVNode("view", { class: "housename" }, "个人资料"),
        vue.createElementVNode(
          "view",
          {
            class: vue.normalizeClass(["right", { "actived": $options.canNext }]),
            onClick: _cache[1] || (_cache[1] = (...args) => $options.changeProfile && $options.changeProfile(...args))
          },
          " 更改 ",
          2
          /* CLASS */
        )
      ]),
      vue.createElementVNode("view", { class: "content" }, [
        vue.createElementVNode("view", { class: "avatarw p2s" }, [
          vue.createElementVNode("view", {
            class: "left",
            onClick: _cache[2] || (_cache[2] = (...args) => $options.chooseImage && $options.chooseImage(...args))
          }, [
            vue.createElementVNode("image", {
              class: "avatar",
              src: $data.avatar,
              mode: "aspectFill"
            }, null, 8, ["src"])
          ]),
          vue.withDirectives(vue.createElementVNode(
            "input",
            {
              type: "text",
              class: "nameinput",
              "onUpdate:modelValue": _cache[3] || (_cache[3] = ($event) => $data.nickname = $event),
              placeholder: "请输入用户名"
            },
            null,
            512
            /* NEED_PATCH */
          ), [
            [vue.vModelText, $data.nickname]
          ])
        ]),
        vue.createElementVNode("view", { class: "mb" }),
        vue.createElementVNode("view", { class: "phone p2s" }, [
          vue.createElementVNode("div", { class: "left" }, "手机号"),
          vue.createElementVNode(
            "view",
            { class: "right" },
            vue.toDisplayString($data.phonenumber),
            1
            /* TEXT */
          )
        ])
      ]),
      vue.createVNode(
        _component_uni_popup,
        {
          ref: "alertDialog",
          type: "dialog"
        },
        {
          default: vue.withCtx(() => [
            vue.createVNode(_component_uni_popup_dialog, {
              type: "error",
              cancelText: "关闭",
              confirmText: "确定",
              title: "通知",
              content: $data.tiptext,
              onConfirm: $options.dialogConfirm,
              onClose: $options.dialogConfirm
            }, null, 8, ["content", "onConfirm", "onClose"])
          ]),
          _: 1
          /* STABLE */
        },
        512
        /* NEED_PATCH */
      )
    ]);
  }
  const PagesEditprofileEditprofile = /* @__PURE__ */ _export_sfc(_sfc_main$B, [["render", _sfc_render$A], ["__file", "D:/HLTrip/hl/pages/editprofile/editprofile.vue"]]);
  const _sfc_main$A = {
    data() {
      return {
        houseType: "",
        maxPeople: 0,
        roomcount: 0,
        bathcount: 0,
        housename: "",
        cancleRule: "30",
        deposit: 0,
        price: 0,
        oprice: 0,
        startTime: {},
        endTime: {},
        stayRange: 0,
        idinfo: [],
        sList: [],
        houseid: 0,
        lid: 0,
        orderNum: "",
        orderTime: {},
        coverurl: "",
        ostatus: "",
        endTimestamp: 0,
        timer: null
      };
    },
    methods: {
      pad(val) {
        return val < 10 ? `0${val}` : val;
      },
      naback() {
        uni.navigateBack({
          delta: 1
        });
      },
      getInfo() {
        uni.request({
          url: `${API.BASE_URL}/getOrderInfo`,
          //仅为示例，并非真实接口地址。
          data: {
            orderNum: this.orderNum
          },
          success: (res) => {
            formatAppLog("log", "at pages/orderpay/orderpay.vue:164", res.data);
            const rdata = res.data.data;
            this.housename = rdata.overview.housename;
            this.startTime = this.getTime(new Date(rdata.orderInfo.starttime));
            this.endTime = this.getTime(new Date(rdata.orderInfo.endtime));
            this.ostatus = rdata.orderInfo.ostatus;
            this.sList = JSON.parse(rdata.orderInfo.guestinfo);
            this.bathcount = rdata.overview.bathroomcount;
            this.roomcount = rdata.overview.roomcount;
            this.houseType = rdata.overview.rentaltype;
            this.maxPeople = rdata.overview.maxguests;
            this.deposit = rdata.policy.deposit;
            this.cancleRule = rdata.policy.cancelpolicy;
            this.price = rdata.overview.discountprice;
            this.oprice = rdata.overview.originalprice;
            this.coverurl = rdata.overview.coverurl;
            const TimeObj = new Date(rdata.orderInfo.ordertime);
            this.orderTime = this.getTime(TimeObj);
            this.orderTime.hour = TimeObj.getHours();
            this.orderTime.minute = TimeObj.getMinutes();
            this.orderTime.seconds = TimeObj.getSeconds();
            this.stayRange = this.calculateNightsBetweenTimestamps(this.endTime.timestamp, this.startTime.timestamp);
            if (this.ostatus == "待支付") {
              this.endTimestamp = this.orderTime.timestamp.getTime() + 30 * 60 * 1e3;
              const now2 = (/* @__PURE__ */ new Date()).getTime();
              const timeIntervel = this.endTimestamp - now2;
              this.endTimestamp = timeIntervel;
              this.timer = setInterval(() => {
                if (this.endTimestamp <= 0) {
                  clearInterval(this.timer);
                  this.ostatus = "已关闭";
                }
                this.endTimestamp = this.endTimestamp - 1e3;
              }, 1e3);
            }
          }
        });
      },
      hideIDNumber(idNumber) {
        idNumber = idNumber.toString();
        var length = idNumber.length;
        if (length <= 10) {
          return idNumber;
        }
        var hiddenPart = idNumber.substring(6, length - 4).replace(/\d/g, "*");
        var result = idNumber.substring(0, 6) + hiddenPart + idNumber.substring(length - 4, length);
        return result;
      },
      getTime(dateObj) {
        const year = dateObj.getFullYear();
        const month = dateObj.getMonth() + 1;
        const date2 = dateObj.getDate();
        const day = dateObj.getDay();
        return {
          year,
          month: month.toString().padStart(2, "0"),
          date: date2.toString().padStart(2, "0"),
          day,
          arr: ["日", "一", "二", "三", "四", "五", "六"],
          timestamp: dateObj
        };
      },
      speople(e) {
        this.sList = e.detail.value;
        formatAppLog("log", "at pages/orderpay/orderpay.vue:239", this.sList);
      },
      toAddpage() {
        uni.navigateTo({
          url: "/pages/addCon_text/addCon_text"
        });
      },
      commitOrder() {
      },
      calculateNightsBetweenTimestamps(timestamp1, timestamp2) {
        let time1 = new Date(timestamp1);
        let time2 = new Date(timestamp2);
        time1.setHours(0, 0, 0, 0);
        time2.setHours(0, 0, 0, 0);
        var diffDays = Math.floor((time1 - time2) / (1e3 * 60 * 60 * 24));
        if (diffDays < 0) {
          return 0;
        }
        if (diffDays === 0) {
          return 1;
        }
        return diffDays;
      },
      topay() {
        uni.navigateTo({
          url: `/pages/payment/payment?num=${this.orderNum}`
        });
      },
      tapCancle() {
        this.$refs.alertDialog.open();
      },
      canaleOrder() {
        uni.request({
          url: `${API.BASE_URL}/closeOrder`,
          data: {
            orderNum: this.orderNum
          },
          success: (res) => {
            this.getInfo();
          }
        });
      }
    },
    computed: {
      countdownTime() {
        if (!this.endTimestamp) {
          return "--:--:--";
        }
        if (this.endTimestamp > 0) {
          const hours = Math.floor(this.endTimestamp % (1e3 * 60 * 60 * 24) / (1e3 * 60 * 60));
          const minutes = Math.floor(this.endTimestamp % (1e3 * 60 * 60) / (1e3 * 60));
          const seconds = Math.floor(this.endTimestamp % (1e3 * 60) / 1e3);
          return `${this.pad(hours)}:${this.pad(minutes)}:${this.pad(seconds)}`;
        } else {
          return "00:00:00";
        }
      }
    },
    onLoad(option) {
      this.orderNum = option.num;
    },
    onShow() {
      formatAppLog("log", "at pages/orderpay/orderpay.vue:311", 111);
      this.timer = null;
      this.getInfo();
    },
    beforeUnmount() {
      formatAppLog("log", "at pages/orderpay/orderpay.vue:318", "orderpay 销毁");
    }
  };
  function _sfc_render$z(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_uni_popup_dialog = resolveEasycom(vue.resolveDynamicComponent("uni-popup-dialog"), __easycom_0$5);
    const _component_uni_popup = resolveEasycom(vue.resolveDynamicComponent("uni-popup"), __easycom_1$2);
    return vue.openBlock(), vue.createElementBlock("view", { class: "rt" }, [
      vue.createElementVNode("view", { class: "statusbar" }),
      vue.createElementVNode("view", { class: "topbar" }, [
        vue.createElementVNode("view", {
          class: "left",
          onClick: _cache[0] || (_cache[0] = (...args) => $options.naback && $options.naback(...args))
        }, [
          vue.createElementVNode("image", {
            class: "topbar-icon leftIco",
            src: "/static/image/icon/back_balck.png",
            mode: "aspectFit"
          })
        ]),
        vue.createElementVNode("view", { class: "right" })
      ]),
      vue.createElementVNode("scroll-view", {
        "scroll-y": "",
        class: "content"
      }, [
        vue.createElementVNode("view", { class: "orderstatus" }, [
          vue.createTextVNode(
            vue.toDisplayString($data.ostatus) + " ",
            1
            /* TEXT */
          ),
          $data.ostatus == "待支付" ? (vue.openBlock(), vue.createElementBlock("view", {
            key: 0,
            class: "countdown"
          }, [
            vue.createElementVNode(
              "text",
              { class: "countTime" },
              vue.toDisplayString($options.countdownTime),
              1
              /* TEXT */
            ),
            vue.createTextVNode(" "),
            vue.createElementVNode("text", { class: "desc" }, "后失效")
          ])) : vue.createCommentVNode("v-if", true)
        ]),
        $data.ostatus == "待支付" ? (vue.openBlock(), vue.createElementBlock("view", {
          key: 0,
          class: "tips"
        }, "未支付订单可能被他人抢订，请尽快完成支付!")) : vue.createCommentVNode("v-if", true),
        vue.createElementVNode("view", { class: "hinfo" }, [
          vue.createElementVNode("view", { class: "checkTime" }, [
            vue.createElementVNode("view", { class: "left" }, [
              vue.createElementVNode("view", { class: "desc" }, "入离时间"),
              vue.createElementVNode(
                "view",
                { class: "checkIn" },
                vue.toDisplayString($data.startTime.month) + "-" + vue.toDisplayString($data.startTime.date),
                1
                /* TEXT */
              ),
              vue.createElementVNode("view", { class: "sep1" }, "-·-"),
              vue.createElementVNode(
                "view",
                { class: "checkOut" },
                vue.toDisplayString($data.endTime.month) + "-" + vue.toDisplayString($data.endTime.date),
                1
                /* TEXT */
              )
            ]),
            vue.createElementVNode(
              "view",
              { class: "right" },
              "共" + vue.toDisplayString($data.stayRange) + "晚",
              1
              /* TEXT */
            )
          ])
        ]),
        vue.createElementVNode("view", { class: "rentpeople" }, [
          vue.createElementVNode("view", { class: "title" }, [
            vue.createElementVNode("view", { class: "desc" }, "入住人信息")
          ]),
          vue.createElementVNode("view", { class: "mb" }),
          vue.createElementVNode("view", { class: "peopleList" }, [
            (vue.openBlock(true), vue.createElementBlock(
              vue.Fragment,
              null,
              vue.renderList($data.sList, (item, index2) => {
                return vue.openBlock(), vue.createElementBlock("view", { class: "listItem" }, [
                  vue.createElementVNode(
                    "view",
                    { class: "rname" },
                    vue.toDisplayString(item.realname),
                    1
                    /* TEXT */
                  ),
                  vue.createElementVNode(
                    "view",
                    { class: "idnum" },
                    " 身份证 " + vue.toDisplayString(item.idnumber),
                    1
                    /* TEXT */
                  )
                ]);
              }),
              256
              /* UNKEYED_FRAGMENT */
            ))
          ])
        ]),
        vue.createElementVNode("view", { class: "price" }, [
          vue.createElementVNode("view", { class: "coverItem" }, [
            vue.createElementVNode("view", { class: "left" }, [
              vue.createElementVNode("image", {
                class: "cover",
                src: $data.coverurl,
                mode: "aspectFill"
              }, null, 8, ["src"])
            ]),
            vue.createElementVNode("view", { class: "right" }, [
              vue.createElementVNode(
                "view",
                { class: "housename" },
                vue.toDisplayString($data.housename),
                1
                /* TEXT */
              ),
              vue.createElementVNode("view", { class: "facbrief" }, [
                vue.createElementVNode(
                  "view",
                  { class: "type" },
                  vue.toDisplayString($data.houseType),
                  1
                  /* TEXT */
                ),
                vue.createElementVNode("view", { class: "sep" }, " · "),
                vue.createElementVNode(
                  "view",
                  { class: "roomcount" },
                  vue.toDisplayString($data.roomcount) + "室" + vue.toDisplayString($data.bathcount) + "卫",
                  1
                  /* TEXT */
                ),
                vue.createElementVNode("view", { class: "sep" }, " · "),
                vue.createElementVNode(
                  "view",
                  { class: "pcount" },
                  "宜居" + vue.toDisplayString($data.maxPeople) + "人",
                  1
                  /* TEXT */
                )
              ])
            ])
          ]),
          vue.createElementVNode("view", { class: "item" }, [
            vue.createElementVNode(
              "view",
              null,
              "房费 " + vue.toDisplayString($data.stayRange) + " 晚",
              1
              /* TEXT */
            ),
            vue.createElementVNode(
              "view",
              { class: "totalprice" },
              "￥" + vue.toDisplayString($data.oprice * $data.stayRange),
              1
              /* TEXT */
            )
          ]),
          vue.createElementVNode("view", { class: "item" }, [
            vue.createElementVNode("view", { class: "left" }, "押金"),
            vue.createElementVNode(
              "view",
              { class: "right" },
              "￥" + vue.toDisplayString($data.deposit),
              1
              /* TEXT */
            )
          ]),
          vue.createElementVNode("view", { class: "item" }, [
            vue.createElementVNode("view", { class: "left" }, "专享优惠"),
            vue.createElementVNode(
              "view",
              { class: "right orange" },
              "￥" + vue.toDisplayString($data.stayRange * ($data.oprice - $data.price)),
              1
              /* TEXT */
            )
          ]),
          vue.createElementVNode("view", { class: "item mt10" }, [
            vue.createElementVNode("view", { class: "left" }),
            vue.createElementVNode("view", { class: "right" }, [
              vue.createTextVNode("本单您需要支付 ￥"),
              vue.createElementVNode(
                "text",
                { class: "total" },
                vue.toDisplayString($data.price * $data.stayRange + $data.deposit),
                1
                /* TEXT */
              )
            ])
          ])
        ]),
        vue.createElementVNode("view", { class: "provider" }, [
          vue.createElementVNode("view", { class: "pitem" }, [
            vue.createElementVNode("view", { class: "left" }, "支付方式"),
            vue.createElementVNode("view", { class: "right" }, [
              vue.createElementVNode("image", {
                src: "/static/image/icon/alipay.png",
                mode: "aspectFit",
                class: "ali"
              }),
              vue.createElementVNode("view", null, "支付宝支付")
            ])
          ]),
          vue.createElementVNode("view", { class: "pitem1" }, [
            vue.createElementVNode("view", { class: "left" }, "发票"),
            vue.createElementVNode("view", { class: "right" }, "离店当日12:00后，可申请开票")
          ])
        ]),
        vue.createElementVNode("view", { class: "orderMsg" }, [
          vue.createElementVNode("view", { class: "title" }, "订单信息"),
          vue.createElementVNode(
            "view",
            { class: "ordernum" },
            "订单编号: " + vue.toDisplayString($data.orderNum),
            1
            /* TEXT */
          ),
          vue.createElementVNode(
            "view",
            { class: "ordernum" },
            "下单时间: " + vue.toDisplayString($data.orderTime.year) + "." + vue.toDisplayString($data.orderTime.month) + "." + vue.toDisplayString($data.orderTime.date) + " " + vue.toDisplayString($data.orderTime.hour) + ":" + vue.toDisplayString($data.orderTime.minute) + ":" + vue.toDisplayString($data.orderTime.seconds),
            1
            /* TEXT */
          )
        ]),
        vue.createElementVNode("view", { class: "tipsbottom" }, [
          vue.createElementVNode("view", { class: "item" }, "入住时间:14:00后可入住，12:00之前需退房"),
          vue.createElementVNode("view", { class: "item" }, "温馨提示:您未到店或未入住时，如需联系房东商家，请使用平台在线聊天工具。请勿轻易线下转账方式支付押金或其他费用，以免上当受骗。")
        ]),
        vue.createElementVNode("view", { class: "mblock" })
      ]),
      $data.ostatus == "待支付" ? (vue.openBlock(), vue.createElementBlock("view", {
        key: 0,
        class: "bottomBar"
      }, [
        vue.createElementVNode("view", { class: "bbwrapper" }, [
          vue.createElementVNode("view", {
            class: "cancleorder",
            onClick: _cache[1] || (_cache[1] = (...args) => $options.tapCancle && $options.tapCancle(...args))
          }, " 取消订单 "),
          vue.createElementVNode("view", { class: "btnwrapper" }, [
            vue.createElementVNode("view", {
              class: "bookingBtn",
              onClick: _cache[2] || (_cache[2] = (...args) => $options.topay && $options.topay(...args))
            }, "去支付")
          ])
        ])
      ])) : vue.createCommentVNode("v-if", true),
      vue.createVNode(
        _component_uni_popup,
        {
          ref: "alertDialog",
          type: "dialog"
        },
        {
          default: vue.withCtx(() => [
            vue.createVNode(_component_uni_popup_dialog, {
              type: "error",
              cancelText: "按错了",
              confirmText: "确定",
              title: "通知",
              content: "确定要取消该订单吗",
              onConfirm: $options.canaleOrder
            }, null, 8, ["onConfirm"])
          ]),
          _: 1
          /* STABLE */
        },
        512
        /* NEED_PATCH */
      )
    ]);
  }
  const PagesOrderpayOrderpay = /* @__PURE__ */ _export_sfc(_sfc_main$A, [["render", _sfc_render$z], ["__file", "D:/HLTrip/hl/pages/orderpay/orderpay.vue"]]);
  const _sfc_main$z = {
    data() {
      return {
        houseType: "",
        maxPeople: 0,
        roomcount: 0,
        bathcount: 0,
        housename: "",
        cancleRule: "30",
        deposit: 0,
        price: 0,
        oprice: 0,
        startTime: {},
        endTime: {},
        stayRange: 0,
        idinfo: [],
        sList: [],
        houseid: 0,
        lid: 0,
        msgType: "",
        messageText: "",
        duration: 2e3
      };
    },
    methods: {
      dialogConfirm() {
        uni.navigateBack({
          delta: 1
        });
      },
      naback() {
        uni.navigateBack({
          delta: 1
        });
      },
      getInfo() {
        uni.request({
          url: `${API.BASE_URL}/getIDinfo`,
          //仅为示例，并非真实接口地址。
          data: {
            uid: uni.getStorageSync("userId")
          },
          success: (res) => {
            this.idinfo = res.data.data.info;
            this.idinfo.forEach((element) => {
              element.orgNum = element.idnumber;
              element.idnumber = this.hideIDNumber(element.idnumber);
            });
          }
        });
      },
      hideIDNumber(idNumber) {
        idNumber = idNumber.toString();
        var length = idNumber.length;
        if (length <= 10) {
          return idNumber;
        }
        var hiddenPart = idNumber.substring(6, length - 4).replace(/\d/g, "*");
        var result = idNumber.substring(0, 6) + hiddenPart + idNumber.substring(length - 4, length);
        return result;
      },
      speople(e) {
        this.sList = e.detail.value;
        formatAppLog("log", "at pages/commitOrder/commitOrder.vue:200", this.sList);
      },
      toAddpage() {
        uni.navigateTo({
          url: "/pages/addCon_text/addCon_text"
        });
      },
      commitOrder() {
        if (this.canNext) {
          uni.request({
            url: `${API.BASE_URL}/getOrder`,
            data: {
              hid: this.houseid,
              endTimeStr: this.endTime.timestamp,
              startTimeStr: this.startTime.timestamp,
              totalprice: this.price * this.stayRange + this.deposit,
              uid: uni.getStorageSync("userId"),
              guestInfo: JSON.stringify(this.sList),
              lid: this.lid,
              housename: this.housename
            },
            success: (res) => {
              formatAppLog("log", "at pages/commitOrder/commitOrder.vue:222", res.data);
              if (res.data.requestStatus == "200") {
                const orderStr = res.data.data.orderStr;
                const orderNum = res.data.data.orderNum;
                uni.setStorageSync("orderStr", orderStr);
                uni.navigateTo({
                  url: `/pages/payment/payment?num=${orderNum}`
                });
              } else if (res.data.requestStatus == "401") {
                this.$refs.alertDialog.open("info");
                formatAppLog("log", "at pages/commitOrder/commitOrder.vue:232", "生成订单失败，已经有人订了");
              } else {
                this.$refs.alertDialog.open("info");
                formatAppLog("log", "at pages/commitOrder/commitOrder.vue:235", "出现错误，请重试");
              }
            }
          });
        } else {
          this.msgType = "warn";
          this.messageText = "请先选择入住人";
          this.$refs.message.open();
        }
      }
    },
    onLoad(option) {
      this.startTime = uni.getStorageSync("startTime");
      this.endTime = uni.getStorageSync("endTime");
      this.stayRange = uni.getStorageSync("stayRange");
      formatAppLog("log", "at pages/commitOrder/commitOrder.vue:250", option);
      this.cancleRule = option.cancleRule;
      this.deposit = parseFloat(option.deposit);
      this.houseType = option.houseType;
      this.housename = option.housename;
      this.maxPeople = option.maxPeople;
      this.price = parseFloat(option.price);
      this.oprice = parseFloat(option.oprice);
      this.roomcount = option.roomcount;
      this.bathcount = option.bathcount;
      this.houseid = option.houseid;
      this.lid = option.lid;
    },
    onShow() {
      this.getInfo();
    },
    computed: {
      canNext() {
        if (this.sList.length == 0) {
          return false;
        } else {
          return true;
        }
      }
    }
  };
  function _sfc_render$y(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_uni_popup_message = resolveEasycom(vue.resolveDynamicComponent("uni-popup-message"), __easycom_2$1);
    const _component_uni_popup = resolveEasycom(vue.resolveDynamicComponent("uni-popup"), __easycom_1$2);
    const _component_uni_popup_dialog = resolveEasycom(vue.resolveDynamicComponent("uni-popup-dialog"), __easycom_0$5);
    return vue.openBlock(), vue.createElementBlock("view", { class: "rt" }, [
      vue.createElementVNode("view", { class: "statusbar" }),
      vue.createElementVNode("view", { class: "topbar" }, [
        vue.createElementVNode("view", {
          class: "left",
          onClick: _cache[0] || (_cache[0] = (...args) => $options.naback && $options.naback(...args))
        }, [
          vue.createElementVNode("image", {
            class: "topbar-icon leftIco",
            src: "/static/image/icon/back_balck.png",
            mode: "aspectFit"
          })
        ]),
        vue.createElementVNode(
          "view",
          { class: "housename" },
          vue.toDisplayString($data.housename),
          1
          /* TEXT */
        ),
        vue.createElementVNode("view", { class: "right" })
      ]),
      vue.createElementVNode("scroll-view", { class: "content" }, [
        vue.createElementVNode("view", { class: "hinfo" }, [
          vue.createElementVNode("view", { class: "checkTime" }, [
            vue.createElementVNode("view", { class: "left" }, [
              vue.createElementVNode("view", { class: "desc" }, "入离时间"),
              vue.createElementVNode(
                "view",
                { class: "checkIn" },
                vue.toDisplayString($data.startTime.month) + "-" + vue.toDisplayString($data.startTime.date),
                1
                /* TEXT */
              ),
              vue.createElementVNode("view", { class: "sep1" }, "-·-"),
              vue.createElementVNode(
                "view",
                { class: "checkOut" },
                vue.toDisplayString($data.endTime.month) + "-" + vue.toDisplayString($data.endTime.date),
                1
                /* TEXT */
              )
            ]),
            vue.createElementVNode(
              "view",
              { class: "right" },
              "共" + vue.toDisplayString($data.stayRange) + "晚",
              1
              /* TEXT */
            )
          ]),
          vue.createElementVNode("view", { class: "facbrief" }, [
            vue.createElementVNode(
              "view",
              { class: "type" },
              vue.toDisplayString($data.houseType),
              1
              /* TEXT */
            ),
            vue.createElementVNode("view", { class: "sep" }, " · "),
            vue.createElementVNode(
              "view",
              { class: "roomcount" },
              vue.toDisplayString($data.roomcount) + "室" + vue.toDisplayString($data.bathcount) + "卫",
              1
              /* TEXT */
            ),
            vue.createElementVNode("view", { class: "sep" }, " · "),
            vue.createElementVNode(
              "view",
              { class: "pcount" },
              "宜居" + vue.toDisplayString($data.maxPeople) + "人",
              1
              /* TEXT */
            )
          ]),
          vue.createElementVNode("view", { class: "tips" }, [
            vue.createTextVNode("预订成功 "),
            $data.cancleRule == "30" ? (vue.openBlock(), vue.createElementBlock(
              "text",
              {
                key: 0,
                class: "tip"
              },
              vue.toDisplayString($data.cancleRule) + "分钟",
              1
              /* TEXT */
            )) : vue.createCommentVNode("v-if", true),
            $data.cancleRule != "30" ? (vue.openBlock(), vue.createElementBlock(
              "text",
              {
                key: 1,
                class: "tip"
              },
              vue.toDisplayString($data.cancleRule) + "天",
              1
              /* TEXT */
            )) : vue.createCommentVNode("v-if", true),
            vue.createTextVNode(" 内可以免费取消 ")
          ])
        ]),
        vue.createElementVNode("view", { class: "rentpeople" }, [
          vue.createElementVNode("view", { class: "title" }, [
            vue.createElementVNode("view", { class: "desc" }, "入住人信息"),
            vue.createElementVNode(
              "view",
              { class: "peoplecount" },
              "已选" + vue.toDisplayString($data.sList.length) + "人",
              1
              /* TEXT */
            )
          ]),
          vue.createElementVNode("view", { class: "selectPeople" }, [
            vue.createElementVNode(
              "checkbox-group",
              {
                onChange: _cache[2] || (_cache[2] = (...args) => $options.speople && $options.speople(...args)),
                class: "checkgroup"
              },
              [
                (vue.openBlock(true), vue.createElementBlock(
                  vue.Fragment,
                  null,
                  vue.renderList($data.idinfo, (item) => {
                    return vue.openBlock(), vue.createElementBlock("label", { class: "checkitem" }, [
                      vue.createElementVNode("checkbox", {
                        value: item,
                        checked: false,
                        color: "#fd6f10",
                        style: { "transform": "scale(0.5)" }
                      }, null, 8, ["value"]),
                      vue.createElementVNode(
                        "text",
                        { class: "rname" },
                        vue.toDisplayString(item.realname),
                        1
                        /* TEXT */
                      )
                    ]);
                  }),
                  256
                  /* UNKEYED_FRAGMENT */
                )),
                vue.createElementVNode("view", {
                  class: "addBtn",
                  onClick: _cache[1] || (_cache[1] = (...args) => $options.toAddpage && $options.toAddpage(...args))
                }, "添加")
              ],
              32
              /* HYDRATE_EVENTS */
            )
          ]),
          vue.createElementVNode("view", { class: "mb" }),
          vue.createElementVNode("view", { class: "peopleList" }, [
            (vue.openBlock(true), vue.createElementBlock(
              vue.Fragment,
              null,
              vue.renderList($data.sList, (item, index2) => {
                return vue.openBlock(), vue.createElementBlock("view", { class: "listItem" }, [
                  vue.createElementVNode(
                    "view",
                    { class: "rname" },
                    vue.toDisplayString(item.realname),
                    1
                    /* TEXT */
                  ),
                  vue.createElementVNode(
                    "view",
                    { class: "idnum" },
                    " 身份证 " + vue.toDisplayString(item.idnumber),
                    1
                    /* TEXT */
                  )
                ]);
              }),
              256
              /* UNKEYED_FRAGMENT */
            ))
          ])
        ]),
        vue.createElementVNode("view", { class: "price" }, [
          vue.createElementVNode("view", { class: "item" }, [
            vue.createElementVNode(
              "view",
              null,
              "房费 " + vue.toDisplayString($data.stayRange) + " 晚",
              1
              /* TEXT */
            ),
            vue.createElementVNode(
              "view",
              { class: "totalprice" },
              "￥" + vue.toDisplayString($data.oprice * $data.stayRange),
              1
              /* TEXT */
            )
          ]),
          vue.createElementVNode("view", { class: "item" }, [
            vue.createElementVNode("view", { class: "left" }, "押金"),
            vue.createElementVNode(
              "view",
              { class: "right" },
              "￥" + vue.toDisplayString($data.deposit),
              1
              /* TEXT */
            )
          ]),
          vue.createElementVNode("view", { class: "item" }, [
            vue.createElementVNode("view", { class: "left" }, "专享优惠"),
            vue.createElementVNode(
              "view",
              { class: "right orange" },
              "￥" + vue.toDisplayString($data.stayRange * ($data.oprice - $data.price)),
              1
              /* TEXT */
            )
          ]),
          vue.createElementVNode("view", { class: "item mt10" }, [
            vue.createElementVNode("view", { class: "left" }),
            vue.createElementVNode("view", { class: "right" }, [
              vue.createTextVNode("本单您需要支付 ￥"),
              vue.createElementVNode(
                "text",
                { class: "total" },
                vue.toDisplayString($data.price * $data.stayRange + $data.deposit),
                1
                /* TEXT */
              )
            ])
          ])
        ]),
        vue.createElementVNode("view", { class: "provider" }, [
          vue.createElementVNode("view", { class: "pitem" }, [
            vue.createElementVNode("view", { class: "left" }, "支付方式"),
            vue.createElementVNode("view", { class: "right" }, [
              vue.createElementVNode("image", {
                src: "/static/image/icon/alipay.png",
                mode: "aspectFit",
                class: "ali"
              }),
              vue.createElementVNode("view", null, "支付宝支付")
            ])
          ]),
          vue.createElementVNode("view", { class: "pitem1" }, [
            vue.createElementVNode("view", { class: "left" }, "发票"),
            vue.createElementVNode("view", { class: "right" }, "离店当日12:00后，可申请开票")
          ])
        ]),
        vue.createElementVNode("view", { class: "tipsbottom" }, [
          vue.createElementVNode("view", { class: "item" }, "入住时间:14:00后可入住，12:00之前需退房"),
          vue.createElementVNode("view", { class: "item" }, "温馨提示:您未到店或未入住时，如需联系房东商家，请使用平台在线聊天工具。请勿轻易线下转账方式支付押金或其他费用，以免上当受骗。")
        ]),
        vue.createElementVNode("view", { class: "mblock" })
      ]),
      vue.createElementVNode("view", { class: "bottomBar" }, [
        vue.createElementVNode("view", { class: "bbwrapper" }, [
          vue.createElementVNode("view", { class: "pricemoudle" }, [
            vue.createElementVNode("view", { class: "pricewrapper" }, [
              vue.createElementVNode("text", { class: "symbol" }, "￥"),
              vue.createElementVNode(
                "text",
                { class: "discounprice" },
                vue.toDisplayString($data.price),
                1
                /* TEXT */
              ),
              vue.createElementVNode("text", { class: "night" }, "/晚"),
              vue.createElementVNode(
                "del",
                { class: "orgprice" },
                "￥" + vue.toDisplayString($data.oprice),
                1
                /* TEXT */
              )
            ]),
            vue.createElementVNode(
              "view",
              { class: "discoutMoudle" },
              " 促销已减" + vue.toDisplayString($data.oprice - $data.price) + "元 ",
              1
              /* TEXT */
            )
          ]),
          vue.createElementVNode("view", { class: "btnwrapper" }, [
            vue.createElementVNode("view", {
              class: "bookingBtn",
              onClick: _cache[3] || (_cache[3] = (...args) => $options.commitOrder && $options.commitOrder(...args))
            }, "去支付")
          ])
        ])
      ]),
      vue.createVNode(
        _component_uni_popup,
        {
          ref: "message",
          type: "message"
        },
        {
          default: vue.withCtx(() => [
            vue.createVNode(_component_uni_popup_message, {
              type: $data.msgType,
              message: $data.messageText,
              duration: $data.duration
            }, null, 8, ["type", "message", "duration"])
          ]),
          _: 1
          /* STABLE */
        },
        512
        /* NEED_PATCH */
      ),
      vue.createVNode(
        _component_uni_popup,
        {
          ref: "alertDialog",
          type: "dialog"
        },
        {
          default: vue.withCtx(() => [
            vue.createVNode(_component_uni_popup_dialog, {
              type: "error",
              cancelText: "关闭",
              confirmText: "确定",
              title: "通知",
              content: "该房间已被预订或您有未完成的订单",
              onConfirm: $options.dialogConfirm
            }, null, 8, ["onConfirm"])
          ]),
          _: 1
          /* STABLE */
        },
        512
        /* NEED_PATCH */
      )
    ]);
  }
  const PagesCommitOrderCommitOrder = /* @__PURE__ */ _export_sfc(_sfc_main$z, [["render", _sfc_render$y], ["__file", "D:/HLTrip/hl/pages/commitOrder/commitOrder.vue"]]);
  const _sfc_main$y = {
    data() {
      return {
        personInfo: [],
        currentIndex: 0,
        msgtype: "",
        msgText: "",
        isFirst: true
      };
    },
    methods: {
      deletePop(index2) {
        this.currentIndex = index2;
        this.$refs.alertDialog.open("info");
      },
      addpeople() {
        uni.navigateTo({
          url: "/pages/addCon_text/addCon_text"
        });
      },
      dialogConfirm() {
        uni.request({
          url: `${API.BASE_URL}/deleteIDinfo`,
          //仅为示例，并非真实接口地址。
          data: {
            uid: uni.getStorageSync("userId"),
            name: this.personInfo[this.currentIndex].realname,
            idnum: this.personInfo[this.currentIndex].orgNum
          },
          success: (res) => {
            if (res.data) {
              this.personInfo.splice(this.currentIndex, 1);
              this.msgtype = "success";
              this.msgText = "删除成功";
              this.$refs.message.open();
            } else {
              this.msgtype = "error";
              this.msgText = "删除失败";
              this.$refs.message.open();
            }
          }
        });
      },
      back() {
        uni.navigateBack({
          delta: 1
        });
      },
      getInfo() {
        uni.request({
          url: `${API.BASE_URL}/getIDinfo`,
          //仅为示例，并非真实接口地址。
          data: {
            uid: uni.getStorageSync("userId")
          },
          success: (res) => {
            this.personInfo = res.data.data.info;
            this.personInfo.forEach((element) => {
              element.orgNum = element.idnumber;
              element.idnumber = this.hideIDNumber(element.idnumber);
            });
          }
        });
      },
      hideIDNumber(idNumber) {
        idNumber = idNumber.toString();
        var length = idNumber.length;
        if (length <= 10) {
          return idNumber;
        }
        var hiddenPart = idNumber.substring(6, length - 4).replace(/\d/g, "*");
        var result = idNumber.substring(0, 6) + hiddenPart + idNumber.substring(length - 4, length);
        return result;
      }
    },
    computed: {},
    onLoad() {
      this.getInfo();
    },
    onShow() {
      if (!this.isFirst) {
        this.getInfo();
      }
      this.isFirst = false;
    }
  };
  function _sfc_render$x(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_uni_popup_dialog = resolveEasycom(vue.resolveDynamicComponent("uni-popup-dialog"), __easycom_0$5);
    const _component_uni_popup = resolveEasycom(vue.resolveDynamicComponent("uni-popup"), __easycom_1$2);
    return vue.openBlock(), vue.createElementBlock("view", null, [
      vue.createElementVNode("view", { class: "statusbar" }),
      vue.createElementVNode("view", { class: "topbar" }, [
        vue.createElementVNode("view", {
          class: "left",
          onClick: _cache[0] || (_cache[0] = (...args) => $options.back && $options.back(...args))
        }, " 返回 "),
        vue.createTextVNode(" 常用入住人 "),
        vue.createElementVNode("view", { class: "right" })
      ]),
      vue.createElementVNode("scroll-view", {
        "scroll-y": "true",
        class: "content",
        "scroll-with-animation": "true"
      }, [
        vue.createElementVNode("view", {
          class: "addBtn",
          onClick: _cache[1] || (_cache[1] = (...args) => $options.addpeople && $options.addpeople(...args))
        }, [
          vue.createElementVNode("image", {
            class: "icon",
            src: "/static/image/icon/add.png",
            mode: "aspectFit"
          }),
          vue.createElementVNode("text", { class: "addtext" }, "添加入住人")
        ]),
        $data.personInfo.length != 0 ? (vue.openBlock(true), vue.createElementBlock(
          vue.Fragment,
          { key: 0 },
          vue.renderList($data.personInfo, (item, index2) => {
            return vue.openBlock(), vue.createElementBlock("view", {
              class: "featureitem",
              key: index2
            }, [
              vue.createElementVNode("view", { class: "left" }, [
                vue.createElementVNode(
                  "view",
                  { class: "ftitle" },
                  vue.toDisplayString(item.realname),
                  1
                  /* TEXT */
                ),
                vue.createElementVNode(
                  "view",
                  { class: "fcontent" },
                  vue.toDisplayString(item.idnumber),
                  1
                  /* TEXT */
                )
              ]),
              vue.createElementVNode("view", {
                class: "right",
                onClick: ($event) => $options.deletePop(index2)
              }, [
                vue.createElementVNode("image", {
                  class: "ico",
                  src: "/static/image/icon/clear.png",
                  mode: "aspectFit"
                })
              ], 8, ["onClick"])
            ]);
          }),
          128
          /* KEYED_FRAGMENT */
        )) : vue.createCommentVNode("v-if", true),
        $data.personInfo.length == 0 ? (vue.openBlock(), vue.createElementBlock("view", {
          key: 1,
          class: "empty"
        }, [
          vue.createElementVNode("image", {
            src: "/static/image/empty_bg.png",
            mode: ""
          }),
          vue.createElementVNode("br"),
          vue.createTextVNode(" 暂无记录 ")
        ])) : vue.createCommentVNode("v-if", true)
      ]),
      vue.createVNode(
        _component_uni_popup,
        {
          ref: "alertDialog",
          type: "dialog"
        },
        {
          default: vue.withCtx(() => [
            vue.createVNode(_component_uni_popup_dialog, {
              type: "error",
              cancelText: "关闭",
              confirmText: "确定",
              title: "通知",
              content: "确定删除吗",
              onConfirm: $options.dialogConfirm
            }, null, 8, ["onConfirm"])
          ]),
          _: 1
          /* STABLE */
        },
        512
        /* NEED_PATCH */
      )
    ]);
  }
  const PagesAddContractAddContract = /* @__PURE__ */ _export_sfc(_sfc_main$y, [["render", _sfc_render$x], ["__file", "D:/HLTrip/hl/pages/addContract/addContract.vue"]]);
  const _sfc_main$x = {
    data() {
      return {
        realname: "",
        cardNumber: "",
        msgtype: "success",
        msgText: "删除成功"
      };
    },
    methods: {
      confirm() {
        if (this.canNext) {
          uni.request({
            url: `${API.BASE_URL}/addIDinfo`,
            //仅为示例，并非真实接口地址。
            data: {
              uid: uni.getStorageSync("userId"),
              name: this.realname,
              idnum: this.cardNumber
            },
            success: (res) => {
              formatAppLog("log", "at pages/addCon_text/addCon_text.vue:52", res.data);
              if (res.data) {
                this.msgtype = "success";
                this.msgText = "添加成功";
                this.$refs.message.open();
                setTimeout(() => {
                  uni.navigateBack();
                }, 1e3);
              } else {
                this.msgtype = "error";
                this.msgText = "添加失败，请重试";
                this.$refs.message.open();
              }
            }
          });
        }
      },
      cancle() {
        uni.navigateBack();
      }
    },
    computed: {
      canNext() {
        if (this.realname != "" && this.cardNumber != "") {
          return true;
        } else {
          return false;
        }
      }
    },
    onLoad() {
    }
  };
  function _sfc_render$w(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_uni_popup_message = resolveEasycom(vue.resolveDynamicComponent("uni-popup-message"), __easycom_2$1);
    const _component_uni_popup = resolveEasycom(vue.resolveDynamicComponent("uni-popup"), __easycom_1$2);
    return vue.openBlock(), vue.createElementBlock("view", null, [
      vue.createElementVNode("view", { class: "statusbar" }),
      vue.createElementVNode("view", { class: "topbar" }, [
        vue.createElementVNode("view", {
          class: "left",
          onClick: _cache[0] || (_cache[0] = (...args) => $options.cancle && $options.cancle(...args))
        }, " 返回 "),
        vue.createTextVNode(" 添加信息 "),
        vue.createElementVNode("view", { class: "right" }, [
          vue.createElementVNode(
            "view",
            {
              class: vue.normalizeClass(["nextBtn", { "btnAct": $options.canNext }]),
              onClick: _cache[1] || (_cache[1] = (...args) => $options.confirm && $options.confirm(...args))
            },
            "确定",
            2
            /* CLASS */
          )
        ])
      ]),
      vue.createElementVNode("view", { class: "content" }, [
        vue.createElementVNode("view", { class: "housename tbmargin60" }, [
          vue.createElementVNode("view", { class: "title" }, "姓名"),
          vue.withDirectives(vue.createElementVNode(
            "textarea",
            {
              "auto-height": "true",
              class: "tarea1",
              onInput: _cache[2] || (_cache[2] = (...args) => _ctx.hanldeInput && _ctx.hanldeInput(...args)),
              "onUpdate:modelValue": _cache[3] || (_cache[3] = ($event) => $data.realname = $event),
              placeholder: "请输入姓名"
            },
            null,
            544
            /* HYDRATE_EVENTS, NEED_PATCH */
          ), [
            [vue.vModelText, $data.realname]
          ])
        ]),
        vue.createElementVNode("view", { class: "housename tbmargin60" }, [
          vue.createElementVNode("view", { class: "title" }, "身份证号"),
          vue.withDirectives(vue.createElementVNode(
            "textarea",
            {
              class: "tarea",
              "auto-height": "true",
              onInput: _cache[4] || (_cache[4] = (...args) => _ctx.hanldeInput && _ctx.hanldeInput(...args)),
              "onUpdate:modelValue": _cache[5] || (_cache[5] = ($event) => $data.cardNumber = $event),
              placeholder: "请输入身份证"
            },
            null,
            544
            /* HYDRATE_EVENTS, NEED_PATCH */
          ), [
            [vue.vModelText, $data.cardNumber]
          ])
        ])
      ]),
      vue.createVNode(
        _component_uni_popup,
        {
          ref: "message",
          type: "message"
        },
        {
          default: vue.withCtx(() => [
            vue.createVNode(_component_uni_popup_message, {
              type: $data.msgtype,
              message: $data.msgText,
              duration: 1e3
            }, null, 8, ["type", "message"])
          ]),
          _: 1
          /* STABLE */
        },
        512
        /* NEED_PATCH */
      )
    ]);
  }
  const PagesAddCon_textAddCon_text = /* @__PURE__ */ _export_sfc(_sfc_main$x, [["render", _sfc_render$w], ["__file", "D:/HLTrip/hl/pages/addCon_text/addCon_text.vue"]]);
  const _sfc_main$w = {
    data() {
      return {
        orderStr: "",
        orderNum: "",
        isFirst: true
      };
    },
    methods: {
      topay() {
        let info = "";
        info = this.orderStr;
        let orderNum = this.orderNum;
        uni.getProvider({
          service: "payment",
          success: function(res) {
            formatAppLog("log", "at pages/payment/payment.vue:25", res.provider);
            if (~res.provider.indexOf("alipay")) {
              uni.requestPayment({
                provider: "alipay",
                //固定值为"alipay"
                orderInfo: info,
                //此处为服务器返回的订单信息字符串
                success: function(res2) {
                  formatAppLog("log", "at pages/payment/payment.vue:31", "支付成功");
                  uni.request({
                    url: `${API.BASE_URL}/checkPayStatus`,
                    data: {
                      orderNum
                    },
                    success: (res3) => {
                      formatAppLog("log", "at pages/payment/payment.vue:38", res3);
                      if (res3.data.requestStatus == "200") {
                        formatAppLog("log", "at pages/payment/payment.vue:41", orderNum);
                        uni.removeStorageSync("orderStr");
                        uni.redirectTo({
                          url: `/pages/orderpay/orderpay?num=${orderNum}`
                        });
                      } else {
                        uni.redirectTo({
                          url: `/pages/orderpay/orderpay?num=${orderNum}`
                        });
                      }
                    }
                  });
                },
                fail: function(err2) {
                  uni.redirectTo({
                    url: `/pages/orderpay/orderpay?num=${orderNum}`
                  });
                  formatAppLog("log", "at pages/payment/payment.vue:60", "支付失败:" + JSON.stringify(err2));
                }
              });
            }
          }
        });
      }
    },
    onLoad(option) {
      try {
        var EnvUtils = plus.android.importClass("com.alipay.sdk.app.EnvUtils");
        EnvUtils.setEnv(EnvUtils.EnvEnum.SANDBOX);
      } catch (error2) {
      }
      this.orderStr = uni.getStorageSync("orderStr");
      this.orderNum = option.num;
      this.topay();
    },
    onShow() {
      formatAppLog("log", "at pages/payment/payment.vue:79", "payment onshow");
      if (!this.isFirst) {
        formatAppLog("log", "at pages/payment/payment.vue:81", "back1111");
        uni.navigateBack({
          delta: 1
        });
      }
      this.isFirst = false;
    }
  };
  function _sfc_render$v(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("view");
  }
  const PagesPaymentPayment = /* @__PURE__ */ _export_sfc(_sfc_main$w, [["render", _sfc_render$v], ["__file", "D:/HLTrip/hl/pages/payment/payment.vue"]]);
  const _sfc_main$v = {
    data() {
      return {
        avatar: "",
        nickname: "",
        balance: 0,
        isfirst: true,
        nocompleteMonry: 0,
        iLd: null,
        publiced: 0
      };
    },
    methods: {
      toUploadHouse() {
        uni.navigateTo({
          url: `/pages/upload/upload_overview/upload_overview?nickname=${this.nickname}`
        });
      },
      toVerify() {
        uni.navigateTo({
          url: "/pages/verifyLandlord/verifyLandlord"
        });
      },
      toIntro() {
        uni.navigateTo({
          url: "/pages/landlordIntro/landlordIntro"
        });
      },
      toUser() {
        uni.switchTab({
          url: "/pages/Components/profile/profile"
        });
      },
      isLandlordReq() {
        uni.request({
          url: `${API.BASE_URL}/hasLandlord`,
          data: {
            userid: uni.getStorageSync("userId")
          },
          success: (res) => {
            uni.setStorageSync("isLandlord", res.data);
            this.isLandlord = res.data;
          }
        });
      },
      getLandlordProfile() {
        uni.request({
          url: `${API.BASE_URL}/getLandlordProfileData`,
          //仅为示例，并非真实接口地址。
          data: {
            landlordid: uni.getStorageSync("landlordid")
          },
          success: (res) => {
            formatAppLog("log", "at pages/landlordProfile/landlordProfile.vue:159", res.data);
            this.avatar = res.data.data.avatar;
            this.nickname = res.data.data.landlordProfile.nickname;
            this.balance = res.data.data.landlordProfile.balance;
            this.nocompleteMonry = res.data.data.noarrived;
            this.publiced = res.data.data.hcount;
          }
        });
      },
      toManage() {
        uni.navigateTo({
          url: "/pages/houseManage/houseManage"
        });
      },
      toEp() {
        if (!this.iLd) {
          this.$refs.message.open();
        } else {
          uni.navigateTo({
            url: "/pages/editLprofile/editLprofile"
          });
        }
      },
      toReply() {
        uni.navigateTo({
          url: `/pages/landCommentList/landCommentList`
        });
      },
      toOrderList(index2) {
        uni.navigateTo({
          url: `/pages/orderList_landlord/orderList_landlord?page=${index2}`
        });
      },
      toWithDrawal() {
        uni.navigateTo({
          url: "/pages/withdrawal/withdrawal"
        });
      }
    },
    onLoad() {
      const isLandlord = uni.getStorageSync("isLandlord");
      this.iLd = JSON.parse(isLandlord);
      if (!isLandlord) {
        uni.request({
          url: `${API.BASE_URL}/getProfileData`,
          //仅为示例，并非真实接口地址。
          data: {
            userid: uni.getStorageSync("userId")
          },
          success: (res) => {
            this.avatar = res.data.data.user.avatarpic;
            this.nickname = res.data.data.user.username;
          }
        });
      } else {
        this.getLandlordProfile();
      }
    },
    onShow() {
      uni.$on("uploadHouseSuccess", () => {
        this.publiced += 1;
      });
      uni.$on("deleteHouseSuccess", () => {
        this.publiced -= 1;
      });
      if (!this.isfirst) {
        if (!this.isLandlord) {
          this.isLandlordReq();
        } else {
          formatAppLog("log", "at pages/landlordProfile/landlordProfile.vue:228", 111);
          this.getLandlordProfile();
        }
      }
      this.isfirst = false;
    }
  };
  function _sfc_render$u(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_uni_popup_message = resolveEasycom(vue.resolveDynamicComponent("uni-popup-message"), __easycom_2$1);
    const _component_uni_popup = resolveEasycom(vue.resolveDynamicComponent("uni-popup"), __easycom_1$2);
    return vue.openBlock(), vue.createElementBlock("view", null, [
      vue.createElementVNode("view", { class: "statusbar" }),
      vue.createElementVNode("view", { class: "topblock" }, [
        $data.iLd != null ? (vue.openBlock(), vue.createElementBlock("view", {
          key: 0,
          class: "profile",
          onClick: _cache[0] || (_cache[0] = (...args) => $options.toEp && $options.toEp(...args))
        }, [
          vue.createElementVNode("view", { class: "avatar" }, [
            vue.createElementVNode("image", {
              src: $data.avatar,
              class: "avatarPic",
              mode: "aspectFill"
            }, null, 8, ["src"])
          ]),
          vue.createElementVNode("view", { class: "nicknamebox" }, [
            vue.createElementVNode(
              "view",
              { class: "nickname" },
              vue.toDisplayString($data.nickname),
              1
              /* TEXT */
            ),
            vue.createElementVNode("view", { class: "desc" }, [
              vue.createTextVNode("身份"),
              !$data.iLd ? (vue.openBlock(), vue.createElementBlock("text", { key: 0 }, "未")) : vue.createCommentVNode("v-if", true),
              vue.createTextVNode("认证")
            ])
          ])
        ])) : vue.createCommentVNode("v-if", true),
        vue.createElementVNode("view", { class: "favorData" }, [
          vue.createElementVNode("view", {
            class: "data-item",
            onClick: _cache[1] || (_cache[1] = (...args) => $options.toWithDrawal && $options.toWithDrawal(...args))
          }, [
            vue.createElementVNode(
              "view",
              { class: "count" },
              "￥" + vue.toDisplayString($data.balance),
              1
              /* TEXT */
            ),
            vue.createElementVNode("view", { class: "desc" }, "余额")
          ]),
          vue.createElementVNode("view", {
            class: "data-item",
            onClick: _cache[2] || (_cache[2] = (...args) => $options.toWithDrawal && $options.toWithDrawal(...args))
          }, [
            vue.createElementVNode(
              "view",
              { class: "count" },
              "￥" + vue.toDisplayString($data.nocompleteMonry),
              1
              /* TEXT */
            ),
            vue.createElementVNode("view", { class: "desc" }, "未到账")
          ]),
          vue.createElementVNode("view", {
            class: "data-item",
            onClick: _cache[3] || (_cache[3] = (...args) => $options.toManage && $options.toManage(...args))
          }, [
            vue.createElementVNode(
              "view",
              { class: "count" },
              vue.toDisplayString($data.publiced),
              1
              /* TEXT */
            ),
            vue.createElementVNode("view", { class: "desc" }, "已发布")
          ]),
          vue.createElementVNode("view", { class: "data-item" }, [
            vue.createElementVNode("view", { class: "count" }, "0"),
            vue.createElementVNode("view", { class: "desc" }, "积分")
          ])
        ])
      ]),
      vue.createElementVNode("view", { class: "content" }, [
        vue.createElementVNode("view", { class: "orders" }, [
          vue.createElementVNode("view", { class: "title" }, "我的订单"),
          vue.createElementVNode("view", { class: "icongroup" }, [
            vue.createElementVNode("view", {
              class: "iconwrapper",
              onClick: _cache[4] || (_cache[4] = ($event) => $options.toOrderList(1))
            }, [
              vue.createElementVNode("view", { class: "iconcont" }, [
                vue.createElementVNode("image", {
                  class: "iconPic wallet",
                  src: "/static/image/icon/wallet.png",
                  mode: "aspectFit"
                })
              ]),
              vue.createElementVNode("view", { class: "desc" }, "待支付")
            ]),
            vue.createElementVNode("view", {
              class: "iconwrapper",
              onClick: _cache[5] || (_cache[5] = ($event) => $options.toOrderList(2))
            }, [
              vue.createElementVNode("view", { class: "iconcont" }, [
                vue.createElementVNode("image", {
                  class: "iconPic",
                  src: "/static/image/icon/processing.png"
                })
              ]),
              vue.createElementVNode("view", { class: "desc" }, "进行中")
            ]),
            vue.createElementVNode("view", {
              class: "iconwrapper",
              onClick: _cache[6] || (_cache[6] = (...args) => $options.toReply && $options.toReply(...args))
            }, [
              vue.createElementVNode("view", { class: "iconcont" }, [
                vue.createElementVNode("image", {
                  class: "iconPic comment",
                  src: "/static/image/icon/comment.png",
                  mode: "aspectFit"
                })
              ]),
              vue.createElementVNode("view", { class: "desc" }, "待回复")
            ]),
            vue.createElementVNode("view", {
              class: "iconwrapper",
              onClick: _cache[7] || (_cache[7] = ($event) => $options.toOrderList(0))
            }, [
              vue.createElementVNode("view", { class: "iconcont" }, [
                vue.createElementVNode("image", {
                  class: "iconPic",
                  src: "/static/image/icon/order.png"
                })
              ]),
              vue.createElementVNode("view", { class: "desc" }, "全部")
            ])
          ])
        ]),
        vue.createElementVNode("view", { class: "sep" }),
        vue.createElementVNode("view", { class: "fun" }, [
          vue.createElementVNode("view", {
            class: "fun-item",
            onClick: _cache[8] || (_cache[8] = (...args) => $options.toVerify && $options.toVerify(...args))
          }, [
            vue.createElementVNode("view", { class: "icowrapper" }, [
              vue.createElementVNode("image", {
                class: "ico",
                src: "/static/image/icon/verify.png",
                mode: ""
              })
            ]),
            vue.createElementVNode("view", { class: "desc" }, "房东认证")
          ]),
          vue.createElementVNode("view", {
            class: "fun-item",
            onClick: _cache[9] || (_cache[9] = (...args) => $options.toUploadHouse && $options.toUploadHouse(...args))
          }, [
            vue.createElementVNode("view", { class: "icowrapper" }, [
              vue.createElementVNode("image", {
                class: "ico",
                src: "/static/image/icon/uploadHouse.png",
                mode: ""
              })
            ]),
            vue.createElementVNode("view", { class: "desc" }, "发布房源")
          ]),
          vue.createElementVNode("view", {
            class: "fun-item",
            onClick: _cache[10] || (_cache[10] = (...args) => $options.toManage && $options.toManage(...args))
          }, [
            vue.createElementVNode("view", { class: "icowrapper" }, [
              vue.createElementVNode("image", {
                class: "ico",
                src: "/static/image/icon/manageHouse.png",
                mode: ""
              })
            ]),
            vue.createElementVNode("view", { class: "desc" }, "房源管理")
          ]),
          vue.createElementVNode("view", {
            class: "fun-item",
            onClick: _cache[11] || (_cache[11] = (...args) => $options.toIntro && $options.toIntro(...args))
          }, [
            vue.createElementVNode("view", { class: "icowrapper" }, [
              vue.createElementVNode("image", {
                class: "ico",
                src: "/static/image/icon/lprofile.png",
                mode: ""
              })
            ]),
            vue.createElementVNode("view", { class: "desc" }, "房东主页")
          ]),
          vue.createElementVNode("view", {
            class: "fun-item",
            onClick: _cache[12] || (_cache[12] = (...args) => $options.toWithDrawal && $options.toWithDrawal(...args))
          }, [
            vue.createElementVNode("view", { class: "icowrapper" }, [
              vue.createElementVNode("image", {
                class: "ico",
                src: "/static/image/icon/balance.png",
                mode: ""
              })
            ]),
            vue.createElementVNode("view", { class: "desc" }, "余额提现")
          ])
        ]),
        vue.createElementVNode("view", {
          class: "switchTolandlord btnsty",
          onClick: _cache[13] || (_cache[13] = (...args) => $options.toUser && $options.toUser(...args))
        }, "切换到用户版")
      ]),
      vue.createVNode(
        _component_uni_popup,
        {
          ref: "message",
          type: "message"
        },
        {
          default: vue.withCtx(() => [
            vue.createVNode(_component_uni_popup_message, {
              type: "warn",
              message: "请先认证",
              duration: 2e3
            })
          ]),
          _: 1
          /* STABLE */
        },
        512
        /* NEED_PATCH */
      )
    ]);
  }
  const PagesLandlordProfileLandlordProfile = /* @__PURE__ */ _export_sfc(_sfc_main$v, [["render", _sfc_render$u], ["__file", "D:/HLTrip/hl/pages/landlordProfile/landlordProfile.vue"]]);
  const _sfc_main$u = {
    data() {
      return {
        isLandlord: false,
        showLoading: false,
        houseList: [],
        currentHouseid: null,
        msgtype: "success",
        msgText: "删除成功",
        price: "",
        orgprice: ""
      };
    },
    methods: {
      back() {
        uni.navigateBack({
          delta: 1
        });
      },
      openDiag(id) {
        this.currentHouseid = id;
        this.$refs.alertDialog.open("info");
      },
      queryHouse() {
        uni.request({
          url: `${API.BASE_URL}/getLordHouses`,
          //仅为示例，并非真实接口地址。
          data: {
            landlordid: uni.getStorageSync("landlordid")
          },
          success: (res) => {
            formatAppLog("log", "at pages/houseManage/houseManage.vue:101", res.data);
            this.houseList = res.data.data.landlordHouses;
          }
        });
      },
      deleteConfirm() {
        uni.request({
          url: `${API.BASE_URL}/deleteHouse`,
          data: {
            landlordid: uni.getStorageSync("landlordid"),
            houseid: this.currentHouseid
          },
          success: (res) => {
            formatAppLog("log", "at pages/houseManage/houseManage.vue:114", res.data);
            if (res.data.requestStatus == "200") {
              this.houseList = this.houseList.filter((element) => {
                return element.houseid != this.currentHouseid;
              });
              this.msgtype = "success";
              this.msgText = "删除成功";
              this.$refs.message.open();
              uni.$emit("deleteHouseSuccess", null);
            } else {
              this.msgtype = "error";
              this.msgText = "删除失败";
              this.$refs.message.open();
            }
          },
          fail: (err2) => {
            formatAppLog("log", "at pages/houseManage/houseManage.vue:130", err2);
            this.msgtype = "error";
            this.msgText = "删除失败" + err2.message;
            this.$refs.message.open();
          }
        });
      },
      openPricePop(id) {
        this.currentHouseid = id;
        this.$refs.popup.open("center");
      },
      closedialog() {
        this.$refs.popup.close();
      },
      pricepopConfirm() {
        const p = parseFloat(this.price);
        const op = parseFloat(this.orgprice);
        if (this.price == "" || this.orgprice == "") {
          this.msgtype = "warn";
          this.msgText = "价格不能为空";
          this.$refs.message.open();
        } else if (p > op) {
          this.msgtype = "warn";
          this.msgText = "折扣价不能大于原价";
          this.$refs.message.open();
        } else {
          uni.request({
            url: `${API.BASE_URL}/updatePrice`,
            data: {
              landlordid: uni.getStorageSync("landlordid"),
              houseid: this.currentHouseid,
              orgprice: this.orgprice,
              price: this.price
            },
            success: (res) => {
              if (res.data.requestStatus == "200") {
                this.houseList.forEach((element) => {
                  if (element.houseid == this.currentHouseid) {
                    element.discountprice = this.price;
                    element.originalprice = this.orgprice;
                    this.price = "";
                    this.orgprice = "";
                  }
                });
                this.msgtype = "success";
                this.msgText = "修改价格成功";
                this.$refs.message.open();
                this.$refs.popup.close();
              } else {
                this.msgtype = "error";
                this.msgText = "修改价格失败";
                this.$refs.message.open();
                this.$refs.popup.close();
                this.price = "";
                this.orgprice = "";
              }
            },
            fail: (err2) => {
              this.msgtype = "error";
              this.msgText = "修改价格失败" + err2.message;
              this.$refs.message.open();
              this.price = "";
              this.orgprice = "";
            }
          });
        }
      }
    },
    onLoad() {
      this.isLandlord = uni.getStorageSync("isLandlord");
      uni.request({
        url: `${API.BASE_URL}/getLordHouses`,
        //仅为示例，并非真实接口地址。
        data: {
          landlordid: uni.getStorageSync("landlordid")
          // landlordid: 76
        },
        success: (res) => {
          formatAppLog("log", "at pages/houseManage/houseManage.vue:207", res.data);
          this.houseList = res.data.data.landlordHouses;
        }
      });
    }
  };
  function _sfc_render$t(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_uni_popup_dialog = resolveEasycom(vue.resolveDynamicComponent("uni-popup-dialog"), __easycom_0$5);
    const _component_uni_popup = resolveEasycom(vue.resolveDynamicComponent("uni-popup"), __easycom_1$2);
    const _component_uni_popup_message = resolveEasycom(vue.resolveDynamicComponent("uni-popup-message"), __easycom_2$1);
    return vue.openBlock(), vue.createElementBlock("view", null, [
      vue.createElementVNode("view", { class: "statusbar" }),
      vue.createElementVNode("view", { class: "topbar" }, [
        vue.createElementVNode("view", {
          class: "left",
          onClick: _cache[0] || (_cache[0] = (...args) => $options.back && $options.back(...args))
        }, " 返回 "),
        vue.createTextVNode(" 房源管理 "),
        vue.createElementVNode("view", { class: "right" })
      ]),
      $data.isLandlord ? (vue.openBlock(), vue.createElementBlock("scroll-view", {
        key: 0,
        "scroll-y": "true",
        class: "content",
        "scroll-with-animation": "true"
      }, [
        $data.houseList.length != 0 ? (vue.openBlock(true), vue.createElementBlock(
          vue.Fragment,
          { key: 0 },
          vue.renderList($data.houseList, (item, index2) => {
            return vue.openBlock(), vue.createElementBlock("view", {
              class: "house_item",
              key: index2
            }, [
              vue.createElementVNode("view", { class: "left" }, [
                vue.createElementVNode("view", { class: "picwrapper" }, [
                  vue.createElementVNode("image", {
                    class: "pic",
                    src: item.coverurl,
                    mode: "aspectFill"
                  }, null, 8, ["src"])
                ]),
                vue.createElementVNode("view", { class: "text" }, [
                  vue.createElementVNode(
                    "view",
                    { class: "hotelname" },
                    vue.toDisplayString(item.housename),
                    1
                    /* TEXT */
                  ),
                  vue.createElementVNode("view", { class: "price" }, [
                    vue.createElementVNode("text", { class: "rmb" }, "￥"),
                    vue.createElementVNode(
                      "text",
                      { class: "disprice" },
                      vue.toDisplayString(item.discountprice),
                      1
                      /* TEXT */
                    ),
                    vue.createElementVNode("text", { class: "per9" }, "/晚"),
                    vue.createElementVNode(
                      "del",
                      { class: "orgprice" },
                      "￥" + vue.toDisplayString(item.originalprice),
                      1
                      /* TEXT */
                    )
                  ])
                ])
              ]),
              vue.createElementVNode("view", { class: "right" }, [
                vue.createElementVNode("view", {
                  class: "delete ritem",
                  onClick: ($event) => $options.openDiag(item.houseid)
                }, "删除", 8, ["onClick"]),
                vue.createElementVNode("view", {
                  class: "changeprice ritem",
                  onClick: ($event) => $options.openPricePop(item.houseid)
                }, "改价", 8, ["onClick"])
              ])
            ]);
          }),
          128
          /* KEYED_FRAGMENT */
        )) : (vue.openBlock(), vue.createElementBlock("view", {
          key: 1,
          class: "empty"
        }, [
          vue.createElementVNode("image", {
            src: "/static/image/empty_bg.png",
            mode: ""
          }),
          vue.createElementVNode("br"),
          vue.createTextVNode(" 暂无房源 ")
        ]))
      ])) : vue.createCommentVNode("v-if", true),
      $data.showLoading ? (vue.openBlock(), vue.createElementBlock("view", {
        key: 1,
        class: "text"
      }, [
        vue.createElementVNode("image", {
          class: "ico",
          src: "/static/image/icon/loading.gif",
          mode: ""
        })
      ])) : vue.createCommentVNode("v-if", true),
      vue.createVNode(
        _component_uni_popup,
        {
          ref: "alertDialog",
          type: "dialog"
        },
        {
          default: vue.withCtx(() => [
            vue.createVNode(_component_uni_popup_dialog, {
              type: "error",
              cancelText: "关闭",
              confirmText: "确定",
              title: "通知",
              content: "确定删除房屋吗",
              onConfirm: $options.deleteConfirm
            }, null, 8, ["onConfirm"])
          ]),
          _: 1
          /* STABLE */
        },
        512
        /* NEED_PATCH */
      ),
      vue.createVNode(
        _component_uni_popup,
        {
          ref: "message",
          type: "message"
        },
        {
          default: vue.withCtx(() => [
            vue.createVNode(_component_uni_popup_message, {
              type: $data.msgtype,
              message: $data.msgText,
              duration: 2e3
            }, null, 8, ["type", "message"])
          ]),
          _: 1
          /* STABLE */
        },
        512
        /* NEED_PATCH */
      ),
      vue.createVNode(
        _component_uni_popup,
        {
          ref: "popup",
          "background-color": "#fff",
          borderRadius: "10px 10px 10px 10px"
        },
        {
          default: vue.withCtx(() => [
            vue.createElementVNode("view", { class: "pricepop" }, [
              vue.createElementVNode("view", { class: "title" }, "修改价格"),
              vue.createElementVNode("view", { class: "inputContainer" }, [
                vue.withDirectives(vue.createElementVNode(
                  "input",
                  {
                    type: "number",
                    "onUpdate:modelValue": _cache[1] || (_cache[1] = ($event) => $data.price = $event),
                    inputmode: "decimal",
                    "placeholder-style": "color:#c7c7c7",
                    class: "pinput",
                    placeholder: "请输入折扣价(实际价格)"
                  },
                  null,
                  512
                  /* NEED_PATCH */
                ), [
                  [vue.vModelText, $data.price]
                ]),
                vue.withDirectives(vue.createElementVNode(
                  "input",
                  {
                    type: "number",
                    "onUpdate:modelValue": _cache[2] || (_cache[2] = ($event) => $data.orgprice = $event),
                    "placeholder-style": "color:#c7c7c7",
                    inputmode: "decimal",
                    class: "pinput",
                    placeholder: "请输入原价"
                  },
                  null,
                  512
                  /* NEED_PATCH */
                ), [
                  [vue.vModelText, $data.orgprice]
                ])
              ]),
              vue.createElementVNode("view", { class: "btngroup" }, [
                vue.createElementVNode("view", {
                  class: "cancle",
                  onClick: _cache[3] || (_cache[3] = (...args) => $options.closedialog && $options.closedialog(...args))
                }, "取消"),
                vue.createElementVNode("view", {
                  class: "confirm",
                  onClick: _cache[4] || (_cache[4] = (...args) => $options.pricepopConfirm && $options.pricepopConfirm(...args))
                }, "确定")
              ])
            ])
          ]),
          _: 1
          /* STABLE */
        },
        512
        /* NEED_PATCH */
      )
    ]);
  }
  const PagesHouseManageHouseManage = /* @__PURE__ */ _export_sfc(_sfc_main$u, [["render", _sfc_render$t], ["__file", "D:/HLTrip/hl/pages/houseManage/houseManage.vue"]]);
  const _sfc_main$t = {
    data() {
      return {
        title: "",
        content: "",
        currentCursor: 0,
        isLandlord: false,
        showLoading: false
      };
    },
    methods: {
      dialogConfirm() {
        uni.navigateBack();
      },
      hanldeInput(e) {
        this.currentCursor = e.detail.cursor;
      },
      confirm() {
        if (this.canNext) {
          uni.request({
            url: `${API.BASE_URL}/addIntro`,
            //仅为示例，并非真实接口地址。
            data: {
              landlordid: 82,
              title: this.title,
              content: this.content
            },
            method: "POST",
            success: (res) => {
              formatAppLog("log", "at pages/landlordIntro/landlordIntro.vue:67", res.data);
              this.showLoading = false;
              this.$refs.alertDialog.open("info");
            },
            fail: (err2) => {
              formatAppLog("log", "at pages/landlordIntro/landlordIntro.vue:72", err2);
            }
          });
        }
      },
      cancle() {
        uni.navigateBack();
      }
    },
    computed: {
      canNext() {
        if (this.title != "" && this.content != "") {
          return true;
        } else {
          return false;
        }
      }
    },
    onLoad() {
      this.isLandlord = uni.getStorageSync("isLandlord");
      if (this.isLandlord) {
        uni.request({
          url: `${API.BASE_URL}/queryIntro`,
          //仅为示例，并非真实接口地址。
          data: {
            landlordid: uni.getStorageSync("landlordid")
          },
          success: (res) => {
            formatAppLog("log", "at pages/landlordIntro/landlordIntro.vue:99", res.data);
            if (res.data.data.intro != null) {
              this.title = res.data.data.intro.introtitle;
              this.content = res.data.data.intro.introcont;
            }
          },
          fail: (err2) => {
            formatAppLog("log", "at pages/landlordIntro/landlordIntro.vue:106", err2);
          }
        });
      }
    }
  };
  function _sfc_render$s(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_uni_popup_dialog = resolveEasycom(vue.resolveDynamicComponent("uni-popup-dialog"), __easycom_0$5);
    const _component_uni_popup = resolveEasycom(vue.resolveDynamicComponent("uni-popup"), __easycom_1$2);
    return vue.openBlock(), vue.createElementBlock("view", null, [
      vue.createElementVNode("view", { class: "statusbar" }),
      vue.createElementVNode("view", { class: "topbar" }, [
        vue.createElementVNode("view", {
          class: "left",
          onClick: _cache[0] || (_cache[0] = (...args) => $options.cancle && $options.cancle(...args))
        }, " 返回 "),
        vue.createTextVNode(" 房东介绍 "),
        vue.createElementVNode("view", { class: "right" }, [
          vue.createElementVNode(
            "view",
            {
              class: vue.normalizeClass(["nextBtn", { "btnAct": $options.canNext }]),
              onClick: _cache[1] || (_cache[1] = (...args) => $options.confirm && $options.confirm(...args))
            },
            "确定",
            2
            /* CLASS */
          )
        ])
      ]),
      $data.isLandlord ? (vue.openBlock(), vue.createElementBlock("view", {
        key: 0,
        class: "content"
      }, [
        vue.createElementVNode("view", { class: "housename tbmargin60" }, [
          vue.createElementVNode("view", { class: "title" }, "标题"),
          vue.withDirectives(vue.createElementVNode(
            "textarea",
            {
              "auto-height": "true",
              class: "tarea1",
              onInput: _cache[2] || (_cache[2] = (...args) => $options.hanldeInput && $options.hanldeInput(...args)),
              "onUpdate:modelValue": _cache[3] || (_cache[3] = ($event) => $data.title = $event),
              placeholder: "请输入介绍标题(例如:周边详情,房源特色等)"
            },
            null,
            544
            /* HYDRATE_EVENTS, NEED_PATCH */
          ), [
            [vue.vModelText, $data.title]
          ])
        ]),
        vue.createElementVNode("view", { class: "housename tbmargin60" }, [
          vue.createElementVNode("view", { class: "title" }, "内容"),
          vue.withDirectives(vue.createElementVNode(
            "textarea",
            {
              class: "tarea",
              maxlength: "50",
              onInput: _cache[4] || (_cache[4] = (...args) => $options.hanldeInput && $options.hanldeInput(...args)),
              "onUpdate:modelValue": _cache[5] || (_cache[5] = ($event) => $data.content = $event),
              placeholder: "请输入内容..."
            },
            null,
            544
            /* HYDRATE_EVENTS, NEED_PATCH */
          ), [
            [vue.vModelText, $data.content]
          ]),
          vue.createElementVNode(
            "view",
            { class: "count" },
            vue.toDisplayString($data.currentCursor) + "/50",
            1
            /* TEXT */
          )
        ])
      ])) : vue.createCommentVNode("v-if", true),
      !$data.isLandlord ? (vue.openBlock(), vue.createElementBlock("view", {
        key: 1,
        class: "text"
      }, " 请先完成房东认证 ")) : vue.createCommentVNode("v-if", true),
      $data.showLoading ? (vue.openBlock(), vue.createElementBlock("view", {
        key: 2,
        class: "text"
      }, [
        vue.createElementVNode("image", {
          class: "ico",
          src: "/static/image/icon/loading.gif",
          mode: ""
        })
      ])) : vue.createCommentVNode("v-if", true),
      vue.createVNode(
        _component_uni_popup,
        {
          ref: "alertDialog",
          type: "dialog"
        },
        {
          default: vue.withCtx(() => [
            vue.createVNode(_component_uni_popup_dialog, {
              type: "error",
              cancelText: "关闭",
              onClose: $options.dialogConfirm,
              confirmText: "确定",
              title: "通知",
              content: "编辑成功",
              onConfirm: $options.dialogConfirm
            }, null, 8, ["onClose", "onConfirm"])
          ]),
          _: 1
          /* STABLE */
        },
        512
        /* NEED_PATCH */
      )
    ]);
  }
  const PagesLandlordIntroLandlordIntro = /* @__PURE__ */ _export_sfc(_sfc_main$t, [["render", _sfc_render$s], ["__file", "D:/HLTrip/hl/pages/landlordIntro/landlordIntro.vue"]]);
  const _sfc_main$s = {
    data() {
      return {
        pics: {
          idpic1: "",
          idpic2: "",
          idpic3: ""
        },
        isLandlord: false,
        showLoading: false
      };
    },
    methods: {
      dialogConfirm() {
        uni.navigateBack();
      },
      next() {
        if (this.canNext) {
          const arr = [];
          arr.push(this.pics.idpic1);
          arr.push(this.pics.idpic2);
          arr.push(this.pics.idpic3);
          this.showLoading = true;
          uni.request({
            url: `${API.BASE_URL}/verifyLandlord`,
            data: {
              userid: uni.getStorageSync("userId"),
              urls: arr
            },
            success: (res) => {
              if (res.data.dataDesc == "success") {
                uni.setStorageSync("landlordid", res.data.data.landlordid);
                this.showLoading = false;
                this.$refs.alertDialog.open("info");
              } else {
                this.showLoading = false;
              }
            }
          });
        }
      },
      chooseImage(key) {
        formatAppLog("log", "at pages/verifyLandlord/verifyLandlord.vue:111", this.pics[key]);
        uni.chooseImage({
          count: 1,
          //默认9
          sizeType: ["original", "compressed"],
          //可以指定是原图还是压缩图，默认二者都有
          sourceType: ["album", "camera"],
          //从相册选择
          success: function(res) {
            res.tempFilePaths.forEach((filePath) => {
              uni.uploadFile({
                url: `${API.BASE_URL}/uploadImage`,
                filePath,
                name: "file",
                formData: {
                  // 其他参数
                  uid: uni.getStorageSync("userId"),
                  role: "tenant"
                },
                success: (uploadFileRes) => {
                  if (uploadFileRes.data != "error") {
                    this.pics[key] = uploadFileRes.data;
                  }
                },
                fail: (uploadFileRes) => {
                  formatAppLog("log", "at pages/verifyLandlord/verifyLandlord.vue:133", uploadFileRes);
                }
              });
            });
          }.bind(this)
        });
      },
      deleteImage(key) {
        uni.request({
          url: `${API.BASE_URL}/deletePic`,
          //仅为示例，并非真实接口地址。
          data: {
            url: this.pics[key]
          },
          success: (res) => {
            this.pics[key] = "";
          }
        });
      },
      back() {
        uni.navigateBack({
          delta: 1
        });
      }
    },
    computed: {
      canNext() {
        if (this.pics.idpic1 != "" && this.pics.idpic2 != "" && this.pics.idpic3 != "") {
          return true;
        } else {
          return false;
        }
      }
    },
    onLoad() {
      this.isLandlord = uni.getStorageSync("isLandlord");
    },
    onBackPress() {
    }
  };
  function _sfc_render$r(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_uni_popup_dialog = resolveEasycom(vue.resolveDynamicComponent("uni-popup-dialog"), __easycom_0$5);
    const _component_uni_popup = resolveEasycom(vue.resolveDynamicComponent("uni-popup"), __easycom_1$2);
    return vue.openBlock(), vue.createElementBlock("view", null, [
      vue.createElementVNode("view", { class: "statusbar" }),
      vue.createElementVNode("view", { class: "topbar" }, [
        vue.createElementVNode("view", {
          class: "left",
          onClick: _cache[0] || (_cache[0] = (...args) => $options.back && $options.back(...args))
        }, " 返回 "),
        vue.createTextVNode(" 房东认证 "),
        vue.createElementVNode("view", { class: "right" }, [
          !$data.isLandlord ? (vue.openBlock(), vue.createElementBlock(
            "view",
            {
              key: 0,
              class: vue.normalizeClass(["nextBtn", { "btnAct": $options.canNext }]),
              onClick: _cache[1] || (_cache[1] = (...args) => $options.next && $options.next(...args))
            },
            "去认证",
            2
            /* CLASS */
          )) : vue.createCommentVNode("v-if", true)
        ])
      ]),
      !$data.isLandlord ? (vue.openBlock(), vue.createElementBlock("scroll-view", {
        key: 0,
        "scroll-y": "true",
        class: "content",
        "scroll-with-animation": "true"
      }, [
        !$data.pics.idpic1 ? (vue.openBlock(), vue.createElementBlock("view", {
          key: 0,
          class: "idcard1 verify_item addPic",
          onClick: _cache[2] || (_cache[2] = ($event) => $options.chooseImage("idpic1"))
        }, [
          vue.createElementVNode("image", {
            class: "image",
            src: "/static/image/icon/add.png",
            mode: "aspectFill"
          })
        ])) : vue.createCommentVNode("v-if", true),
        $data.pics.idpic1 ? (vue.openBlock(), vue.createElementBlock("view", {
          key: 1,
          class: "image-container"
        }, [
          vue.createElementVNode("image", {
            class: "image",
            src: $data.pics.idpic1,
            mode: "aspectFill"
          }, null, 8, ["src"]),
          vue.createElementVNode("view", {
            class: "delete-icon",
            onClick: _cache[3] || (_cache[3] = ($event) => $options.deleteImage("idpic1"))
          }, [
            vue.createElementVNode("image", {
              class: "deleteIco",
              src: "/static/image/icon/clear.png",
              mode: "aspectFill"
            })
          ])
        ])) : vue.createCommentVNode("v-if", true),
        vue.createElementVNode("view", { class: "title" }, "请上传身份证正面照片"),
        !$data.pics.idpic2 ? (vue.openBlock(), vue.createElementBlock("view", {
          key: 2,
          class: "idcard2 verify_item addPic",
          onClick: _cache[4] || (_cache[4] = ($event) => $options.chooseImage("idpic2"))
        }, [
          vue.createElementVNode("image", {
            class: "image",
            src: "/static/image/icon/add.png",
            mode: "aspectFill"
          })
        ])) : vue.createCommentVNode("v-if", true),
        $data.pics.idpic2 ? (vue.openBlock(), vue.createElementBlock("view", {
          key: 3,
          class: "image-container"
        }, [
          vue.createElementVNode("image", {
            class: "image",
            src: $data.pics.idpic2,
            mode: "aspectFill"
          }, null, 8, ["src"]),
          vue.createElementVNode("view", {
            class: "delete-icon",
            onClick: _cache[5] || (_cache[5] = ($event) => $options.deleteImage("idpic2"))
          }, [
            vue.createElementVNode("image", {
              class: "deleteIco",
              src: "/static/image/icon/clear.png",
              mode: "aspectFill"
            })
          ])
        ])) : vue.createCommentVNode("v-if", true),
        vue.createElementVNode("view", { class: "title" }, "请上传身份证反面照片"),
        !$data.pics.idpic3 ? (vue.openBlock(), vue.createElementBlock("view", {
          key: 4,
          class: "idcard3 verify_item addPic",
          onClick: _cache[6] || (_cache[6] = ($event) => $options.chooseImage("idpic3"))
        }, [
          vue.createElementVNode("image", {
            class: "image",
            src: "/static/image/icon/add.png",
            mode: "aspectFill"
          })
        ])) : vue.createCommentVNode("v-if", true),
        $data.pics.idpic3 ? (vue.openBlock(), vue.createElementBlock("view", {
          key: 5,
          class: "image-container"
        }, [
          vue.createElementVNode("image", {
            class: "image",
            src: $data.pics.idpic3,
            mode: "aspectFill"
          }, null, 8, ["src"]),
          vue.createElementVNode("view", {
            class: "delete-icon",
            onClick: _cache[7] || (_cache[7] = ($event) => $options.deleteImage("idpic3"))
          }, [
            vue.createElementVNode("image", {
              class: "deleteIco",
              src: "/static/image/icon/clear.png",
              mode: "aspectFill"
            })
          ])
        ])) : vue.createCommentVNode("v-if", true),
        vue.createElementVNode("view", { class: "title" }, "请上传手持身份证照片")
      ])) : vue.createCommentVNode("v-if", true),
      $data.isLandlord ? (vue.openBlock(), vue.createElementBlock("view", {
        key: 1,
        class: "text"
      }, " 您已经认证过了，无需重复认证 ")) : vue.createCommentVNode("v-if", true),
      $data.showLoading ? (vue.openBlock(), vue.createElementBlock("view", {
        key: 2,
        class: "text"
      }, [
        vue.createElementVNode("image", {
          class: "ico",
          src: "/static/image/icon/loading.gif",
          mode: ""
        })
      ])) : vue.createCommentVNode("v-if", true),
      vue.createVNode(
        _component_uni_popup,
        {
          ref: "alertDialog",
          type: "dialog"
        },
        {
          default: vue.withCtx(() => [
            vue.createVNode(_component_uni_popup_dialog, {
              type: "error",
              cancelText: "关闭",
              onClose: $options.dialogConfirm,
              confirmText: "确定",
              title: "通知",
              content: "验证成功",
              onConfirm: $options.dialogConfirm
            }, null, 8, ["onClose", "onConfirm"])
          ]),
          _: 1
          /* STABLE */
        },
        512
        /* NEED_PATCH */
      )
    ]);
  }
  const PagesVerifyLandlordVerifyLandlord = /* @__PURE__ */ _export_sfc(_sfc_main$s, [["render", _sfc_render$r], ["__file", "D:/HLTrip/hl/pages/verifyLandlord/verifyLandlord.vue"]]);
  const _sfc_main$r = {
    data() {
      return {
        houseInfo: {
          houseOverview: {
            housename: "",
            address: "",
            landlordid: 0,
            bedcount: 1,
            //
            roomcount: 1,
            //
            bathroomcount: 1,
            //
            kitchencount: 0,
            //
            coverurl: "",
            discountprice: "",
            originalprice: "",
            rentaltype: "单间出租",
            //
            maxguests: 2,
            housetype: "普通公寓",
            //
            landlordnickname: "",
            bed218: 1,
            //
            bed215: 0,
            //
            bed212: 0,
            //
            tatami: ""
            //
          },
          houseImg: [
            {
              ImgGroup: "卧室",
              urls: []
            },
            {
              ImgGroup: "卫生间",
              urls: []
            },
            {
              ImgGroup: "客厅",
              urls: []
            },
            {
              ImgGroup: "厨房",
              urls: []
            },
            {
              ImgGroup: "其他",
              urls: []
            }
          ],
          houseLocation: "",
          facilities: {
            service: "",
            basic: "",
            bathroom: "",
            kitchen: "",
            surrounding: "",
            safety: "",
            entertainment: "",
            leisure: "",
            children: ""
          },
          policies: {
            cancelPolicy: "30",
            allowAddGuests: "0.0",
            deposit: "0.0",
            needToKnow: "000000000"
          },
          features: []
        },
        array: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
        array1: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
        housetypearr: ["普通公寓", "别墅/loft", "庄园", "酒店式公寓", "客栈", "复式loft"],
        rentTypearr: ["整套出租", "单间出租"],
        bathroom_index: 0,
        room_index: 0,
        kitchen_index: 0,
        bedindex: 0,
        bed218_index: 0,
        //
        bed215_index: 0,
        //
        bed212_index: 0,
        //
        maxguests_index: 0,
        renttype_index: 0,
        housetype_index: 0,
        locationText: "点击获取位置",
        isLandlord: false,
        nickname: ""
      };
    },
    methods: {
      croom(e) {
        this.houseInfo.houseOverview.roomcount = this.array[e.detail.value];
      },
      cbathroom(e) {
        this.houseInfo.houseOverview.bathroomcount = e.detail.value;
      },
      ckitchen(e) {
        this.houseInfo.houseOverview.kitchencount = e.detail.value;
      },
      cbedcount(e) {
        this.houseInfo.houseOverview.bedcount = this.array[e.detail.value];
      },
      cb218(e) {
        this.houseInfo.houseOverview.bed218 = e.detail.value;
      },
      cb215(e) {
        this.houseInfo.houseOverview.bed215 = e.detail.value;
      },
      cb212(e) {
        this.houseInfo.houseOverview.bed212 = e.detail.value;
      },
      chousetype(e) {
        this.houseInfo.houseOverview.housetype = this.housetypearr[e.detail.value];
      },
      crenttype(e) {
        this.houseInfo.houseOverview.rentaltype = this.rentTypearr[e.detail.value];
      },
      cmaxguest(e) {
        this.houseInfo.houseOverview.maxguests = this.array[e.detail.value];
      },
      getLocation() {
        const self2 = this;
        uni.getLocation({
          type: "gcj02",
          geocode: true,
          success(res) {
            formatAppLog("log", "at pages/upload/upload_overview/upload_overview.vue:303", res);
            self2.locationText = res.address.street;
            self2.houseInfo.houseLocation = `${res.longitude},${res.latitude}`;
          },
          fail() {
            self2.locationText = "获取位置失败";
          }
        });
      },
      back() {
        uni.removeStorageSync("houseInfo");
        uni.navigateBack({
          delta: 1
        });
      },
      next() {
        if (this.canNext) {
          this.houseInfo.houseOverview.landlordnickname = this.nickname;
          this.houseInfo.houseOverview.landlordid = uni.getStorageSync("landlordid");
          const hinfo = uni.getStorageSync("houseInfo");
          if (hinfo == "") {
            uni.setStorageSync("houseInfo", this.houseInfo);
          }
          formatAppLog("log", "at pages/upload/upload_overview/upload_overview.vue:326", this.houseInfo);
          uni.navigateTo({
            url: "/pages/upload/upload_image/upload_image"
          });
        }
      }
    },
    computed: {
      isAddressEmpty() {
        if (this.houseInfo.houseOverview.address == "") {
          return true;
        } else {
          return false;
        }
      },
      isHousenameEmpty() {
        if (this.houseInfo.houseOverview.housename == "") {
          return true;
        } else {
          return false;
        }
      },
      isDpEmpty() {
        if (this.houseInfo.houseOverview.discountprice == "") {
          return true;
        } else {
          return false;
        }
      },
      isOpEmpty() {
        if (this.houseInfo.houseOverview.originalprice == "") {
          return true;
        } else {
          return false;
        }
      },
      isBedcVaild() {
        const overview = this.houseInfo.houseOverview;
        if (overview.bedcount == overview.bed212 + overview.bed215 + overview.bed218) {
          return true;
        } else {
          return false;
        }
      },
      isLocEmpty() {
        if (this.houseInfo.houseLocation == "") {
          return true;
        } else {
          return false;
        }
      },
      canNext() {
        if (!this.isAddressEmpty && !this.isDpEmpty && !this.isOpEmpty && !this.isHousenameEmpty && this.isBedcVaild && !this.isLocEmpty) {
          return true;
        } else {
          return false;
        }
      }
    },
    onLoad(option) {
      formatAppLog("log", "at pages/upload/upload_overview/upload_overview.vue:388", "hov onload");
      uni.removeStorageSync("houseInfo");
      this.isLandlord = uni.getStorageSync("isLandlord");
      this.nickname = option.nickname;
    },
    onBackPress() {
      uni.removeStorageSync("houseInfo");
      return false;
    }
  };
  function _sfc_render$q(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("view", null, [
      vue.createElementVNode("view", { class: "statusbar" }),
      vue.createElementVNode("view", { class: "topbar" }, [
        vue.createElementVNode("view", {
          class: "left",
          onClick: _cache[0] || (_cache[0] = (...args) => $options.back && $options.back(...args))
        }, " 返回 "),
        vue.createTextVNode(" 基本信息 "),
        vue.createElementVNode("view", { class: "right" }, [
          vue.createElementVNode(
            "view",
            {
              class: vue.normalizeClass(["nextBtn", { "btnAct": $options.canNext }]),
              onClick: _cache[1] || (_cache[1] = (...args) => $options.next && $options.next(...args))
            },
            "下一步",
            2
            /* CLASS */
          )
        ])
      ]),
      $data.isLandlord ? (vue.openBlock(), vue.createElementBlock("scroll-view", {
        key: 0,
        "scroll-y": "true",
        class: "content",
        "scroll-with-animation": "true"
      }, [
        vue.createElementVNode("view", { class: "housename tbmargin60" }, [
          vue.createElementVNode("view", { class: "title" }, "民宿名称"),
          vue.withDirectives(vue.createElementVNode(
            "input",
            {
              type: "text",
              class: "textinput",
              placeholder: "请输入民宿名",
              "onUpdate:modelValue": _cache[2] || (_cache[2] = ($event) => $data.houseInfo.houseOverview.housename = $event)
            },
            null,
            512
            /* NEED_PATCH */
          ), [
            [vue.vModelText, $data.houseInfo.houseOverview.housename]
          ])
        ]),
        vue.createElementVNode("view", { class: "address tbmargin60" }, [
          vue.createElementVNode("view", { class: "title" }, "民宿地址"),
          vue.withDirectives(vue.createElementVNode(
            "input",
            {
              type: "text",
              class: "textinput",
              placeholder: "请输入民宿地址",
              "onUpdate:modelValue": _cache[3] || (_cache[3] = ($event) => $data.houseInfo.houseOverview.address = $event)
            },
            null,
            512
            /* NEED_PATCH */
          ), [
            [vue.vModelText, $data.houseInfo.houseOverview.address]
          ])
        ]),
        vue.createElementVNode("view", { class: "fac tbmargin60" }, [
          vue.createElementVNode("view", { class: "title" }, "房间信息"),
          vue.createElementVNode("view", { class: "pickers" }, [
            vue.createElementVNode("view", { class: "data_picker tbmargin30 widthp30" }, [
              vue.createElementVNode("view", { class: "picker_title" }, " 卧室: "),
              vue.createElementVNode("view", { class: "pickerwrapper" }, [
                vue.createElementVNode("picker", {
                  onChange: _cache[4] || (_cache[4] = (...args) => $options.croom && $options.croom(...args)),
                  value: $data.room_index,
                  range: $data.array
                }, [
                  vue.createElementVNode(
                    "view",
                    { class: "pickertext" },
                    vue.toDisplayString($data.houseInfo.houseOverview.roomcount) + " 间",
                    1
                    /* TEXT */
                  )
                ], 40, ["value", "range"])
              ])
            ]),
            vue.createElementVNode("view", { class: "data_picker tbmargin30 widthp30" }, [
              vue.createElementVNode("view", { class: "picker_title" }, " 浴室: "),
              vue.createElementVNode("view", { class: "pickerwrapper" }, [
                vue.createElementVNode("picker", {
                  onChange: _cache[5] || (_cache[5] = (...args) => $options.cbathroom && $options.cbathroom(...args)),
                  value: $data.bathroom_index,
                  range: $data.array1
                }, [
                  vue.createElementVNode(
                    "view",
                    { class: "pickertext" },
                    vue.toDisplayString($data.houseInfo.houseOverview.bathroomcount) + " 间",
                    1
                    /* TEXT */
                  )
                ], 40, ["value", "range"])
              ])
            ]),
            vue.createElementVNode("view", { class: "data_picker tbmargin30 widthp30" }, [
              vue.createElementVNode("view", { class: "picker_title" }, " 厨房: "),
              vue.createElementVNode("view", { class: "pickerwrapper" }, [
                vue.createElementVNode("picker", {
                  onChange: _cache[6] || (_cache[6] = (...args) => $options.ckitchen && $options.ckitchen(...args)),
                  value: $data.kitchen_index,
                  range: $data.array1
                }, [
                  vue.createElementVNode(
                    "view",
                    { class: "pickertext" },
                    vue.toDisplayString($data.houseInfo.houseOverview.kitchencount) + " 间",
                    1
                    /* TEXT */
                  )
                ], 40, ["value", "range"])
              ])
            ])
          ])
        ]),
        vue.createElementVNode("view", { class: "fac tbmargin60" }, [
          vue.createElementVNode("view", { class: "title" }, "床位信息"),
          vue.createElementVNode("view", { class: "pickers" }, [
            vue.createElementVNode("view", { class: "data_picker tbmargin30 widthp30" }, [
              vue.createElementVNode("view", { class: "picker_title" }, " 床共: "),
              vue.createElementVNode("view", { class: "pickerwrapper" }, [
                vue.createElementVNode("picker", {
                  onChange: _cache[7] || (_cache[7] = (...args) => $options.cbedcount && $options.cbedcount(...args)),
                  value: $data.bedindex,
                  range: $data.array
                }, [
                  vue.createElementVNode(
                    "view",
                    { class: "pickertext" },
                    vue.toDisplayString($data.houseInfo.houseOverview.bedcount) + " 张",
                    1
                    /* TEXT */
                  )
                ], 40, ["value", "range"])
              ])
            ])
          ]),
          vue.createElementVNode("view", { class: "pickers" }, [
            vue.createElementVNode("view", { class: "data_picker tbmargin30 widthp30" }, [
              vue.createElementVNode("view", { class: "picker_title" }, " 双人床: "),
              vue.createElementVNode("view", { class: "pickerwrapper" }, [
                vue.createElementVNode("picker", {
                  onChange: _cache[8] || (_cache[8] = (...args) => $options.cb218 && $options.cb218(...args)),
                  value: $data.bed218_index,
                  range: $data.array1
                }, [
                  vue.createElementVNode(
                    "view",
                    { class: "pickertext" },
                    vue.toDisplayString($data.houseInfo.houseOverview.bed218) + " 张",
                    1
                    /* TEXT */
                  )
                ], 40, ["value", "range"])
              ])
            ]),
            vue.createElementVNode("view", { class: "data_picker tbmargin30 widthp30" }, [
              vue.createElementVNode("view", { class: "picker_title" }, " 大床: "),
              vue.createElementVNode("view", { class: "pickerwrapper" }, [
                vue.createElementVNode("picker", {
                  onChange: _cache[9] || (_cache[9] = (...args) => $options.cb215 && $options.cb215(...args)),
                  value: $data.bed215_index,
                  range: $data.array1
                }, [
                  vue.createElementVNode(
                    "view",
                    { class: "pickertext" },
                    vue.toDisplayString($data.houseInfo.houseOverview.bed215) + " 张",
                    1
                    /* TEXT */
                  )
                ], 40, ["value", "range"])
              ])
            ]),
            vue.createElementVNode("view", { class: "data_picker tbmargin30 widthp30" }, [
              vue.createElementVNode("view", { class: "picker_title" }, " 单人床: "),
              vue.createElementVNode("view", { class: "pickerwrapper" }, [
                vue.createElementVNode("picker", {
                  onChange: _cache[10] || (_cache[10] = (...args) => $options.cb212 && $options.cb212(...args)),
                  value: $data.bed212_index,
                  range: $data.array1
                }, [
                  vue.createElementVNode(
                    "view",
                    { class: "pickertext" },
                    vue.toDisplayString($data.houseInfo.houseOverview.bed212) + " 张",
                    1
                    /* TEXT */
                  )
                ], 40, ["value", "range"])
              ])
            ])
          ])
        ]),
        vue.createElementVNode("view", { class: "fac tbmargin60" }, [
          vue.createElementVNode("view", { class: "title" }, "房型信息"),
          vue.createElementVNode("view", { class: "pickers" }, [
            vue.createElementVNode("view", { class: "data_picker tbmargin30 widthp30" }, [
              vue.createElementVNode("view", { class: "picker_title" }, " 房屋类型: "),
              vue.createElementVNode("view", { class: "pickerwrapper" }, [
                vue.createElementVNode("picker", {
                  onChange: _cache[11] || (_cache[11] = (...args) => $options.chousetype && $options.chousetype(...args)),
                  value: $data.housetype_index,
                  range: $data.housetypearr
                }, [
                  vue.createElementVNode(
                    "view",
                    { class: "pickertext" },
                    vue.toDisplayString($data.houseInfo.houseOverview.housetype),
                    1
                    /* TEXT */
                  )
                ], 40, ["value", "range"])
              ])
            ]),
            vue.createElementVNode("view", { class: "data_picker tbmargin30 widthp30" }, [
              vue.createElementVNode("view", { class: "picker_title" }, " 出租类型: "),
              vue.createElementVNode("view", { class: "pickerwrapper" }, [
                vue.createElementVNode("picker", {
                  onChange: _cache[12] || (_cache[12] = (...args) => $options.crenttype && $options.crenttype(...args)),
                  value: $data.renttype_index,
                  range: $data.rentTypearr
                }, [
                  vue.createElementVNode(
                    "view",
                    { class: "pickertext" },
                    vue.toDisplayString($data.houseInfo.houseOverview.rentaltype),
                    1
                    /* TEXT */
                  )
                ], 40, ["value", "range"])
              ])
            ]),
            vue.createElementVNode("i")
          ]),
          vue.createElementVNode("view", { class: "data_picker tbmargin30 limitWidth" }, [
            vue.createElementVNode("view", { class: "picker_title" }, " 标准入住 "),
            vue.createElementVNode("view", { class: "pickerwrapper" }, [
              vue.createElementVNode("picker", {
                onChange: _cache[13] || (_cache[13] = (...args) => $options.cmaxguest && $options.cmaxguest(...args)),
                value: $data.maxguests_index,
                range: $data.array
              }, [
                vue.createElementVNode(
                  "view",
                  { class: "pickertext limitWidth" },
                  vue.toDisplayString($data.houseInfo.houseOverview.maxguests) + " 人",
                  1
                  /* TEXT */
                )
              ], 40, ["value", "range"])
            ])
          ])
        ]),
        vue.createElementVNode("view", { class: "price tbmargin60" }, [
          vue.createElementVNode("view", { class: "title" }, "价格"),
          vue.createElementVNode("view", { class: "pricewrapper" }, [
            vue.createElementVNode("text", { class: "title" }, "￥"),
            vue.withDirectives(vue.createElementVNode(
              "input",
              {
                type: "number",
                inputmode: "decimal",
                class: "textinput",
                placeholder: "请输入折扣价(实际价格)",
                "onUpdate:modelValue": _cache[14] || (_cache[14] = ($event) => $data.houseInfo.houseOverview.discountprice = $event)
              },
              null,
              512
              /* NEED_PATCH */
            ), [
              [vue.vModelText, $data.houseInfo.houseOverview.discountprice]
            ])
          ]),
          vue.createElementVNode("view", { class: "pricewrapper" }, [
            vue.createElementVNode("text", { class: "title" }, "￥"),
            vue.withDirectives(vue.createElementVNode(
              "input",
              {
                type: "number",
                inputmode: "decimal",
                class: "textinput",
                placeholder: "请输入原价",
                "onUpdate:modelValue": _cache[15] || (_cache[15] = ($event) => $data.houseInfo.houseOverview.originalprice = $event)
              },
              null,
              512
              /* NEED_PATCH */
            ), [
              [vue.vModelText, $data.houseInfo.houseOverview.originalprice]
            ])
          ])
        ]),
        vue.createElementVNode("view", { class: "location tbmargin60" }, [
          vue.createElementVNode("view", { class: "title" }, "获取定位"),
          vue.createElementVNode("view", {
            onClick: _cache[16] || (_cache[16] = (...args) => $options.getLocation && $options.getLocation(...args)),
            class: "location-view"
          }, [
            vue.createElementVNode("image", {
              src: "/static/image/icon/location2.png",
              class: "icon"
            }),
            vue.createElementVNode(
              "text",
              { class: "location-text" },
              vue.toDisplayString($data.locationText),
              1
              /* TEXT */
            )
          ])
        ]),
        vue.createElementVNode("view", { class: "tips" }, "tips:上传位置需与民宿在同一位置，否则审核会不通过")
      ])) : vue.createCommentVNode("v-if", true),
      !$data.isLandlord ? (vue.openBlock(), vue.createElementBlock("view", {
        key: 1,
        class: "text"
      }, " 请先完成房东认证 ")) : vue.createCommentVNode("v-if", true)
    ]);
  }
  const PagesUploadUpload_overviewUpload_overview = /* @__PURE__ */ _export_sfc(_sfc_main$r, [["render", _sfc_render$q], ["__file", "D:/HLTrip/hl/pages/upload/upload_overview/upload_overview.vue"]]);
  const _sfc_main$q = {
    data() {
      return {
        tabs: ["卧室", "卫生间", "客厅", "厨房", "其他"],
        currentTab: 0,
        houseInfo: {
          houseImg: [
            {
              ImgGroup: "卧室",
              urls: []
            },
            {
              ImgGroup: "卫生间",
              urls: []
            },
            {
              ImgGroup: "客厅",
              urls: []
            },
            {
              ImgGroup: "厨房",
              urls: []
            },
            {
              ImgGroup: "其他",
              urls: []
            }
          ]
        }
        // 存储卧室图片
        // 其他标签页对应的图片数组
      };
    },
    computed: {
      canNext() {
        let count = 0;
        this.houseInfo.houseImg.forEach((ImgGroup) => {
          ImgGroup.urls.forEach((url2) => {
            count++;
          });
        });
        if (count < 10) {
          return false;
        } else {
          return true;
        }
      }
    },
    methods: {
      switchTab(index2) {
        this.currentTab = index2;
      },
      chooseImage(index2) {
        uni.chooseImage({
          count: 9,
          //默认9
          sizeType: ["original", "compressed"],
          //可以指定是原图还是压缩图，默认二者都有
          sourceType: ["album", "camera"],
          //从相册选择
          success: function(res) {
            res.tempFilePaths.forEach((filePath) => {
              uni.uploadFile({
                url: `${API.BASE_URL}/uploadImage`,
                filePath,
                name: "file",
                formData: {
                  // 其他参数
                  uid: uni.getStorageSync("userId"),
                  role: "landlord"
                },
                success: (uploadFileRes) => {
                  if (uploadFileRes.data != "error") {
                    this.houseInfo.houseImg[index2].urls.push(uploadFileRes.data);
                  }
                },
                fail: (uploadFileRes) => {
                  formatAppLog("log", "at pages/upload/upload_image/upload_image.vue:168", uploadFileRes);
                }
              });
            });
          }.bind(this)
        });
      },
      deleteImage(index2, groupindex) {
        uni.request({
          url: `${API.BASE_URL}/deletePic`,
          //仅为示例，并非真实接口地址。
          data: {
            url: this.houseInfo.houseImg[groupindex].urls[index2]
          },
          success: (res) => {
            this.houseInfo.houseImg[groupindex].urls.splice(index2, 1);
          }
        });
      },
      back() {
        uni.navigateBack({
          delta: 1
        });
      },
      next() {
        if (this.canNext) {
          const info = uni.getStorageSync("houseInfo");
          info.houseImg = this.houseInfo.houseImg;
          formatAppLog("log", "at pages/upload/upload_image/upload_image.vue:197", info);
          uni.setStorageSync("houseInfo", info);
          uni.navigateTo({
            url: "/pages/upload/upload_facility/upload_facility"
          });
        }
      }
    },
    onLoad() {
      const hov = uni.getStorageSync("houseInfo");
      formatAppLog("log", "at pages/upload/upload_image/upload_image.vue:208", "加载时的houseinfo", hov);
      this.houseInfo = JSON.parse(JSON.stringify(hov));
    },
    onBackPress() {
      const info = uni.getStorageSync("houseInfo");
      info.houseImg = this.houseInfo.houseImg;
      uni.setStorageSync("houseInfo", info);
    }
  };
  function _sfc_render$p(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("view", { class: "container" }, [
      vue.createElementVNode("view", { class: "statusbar" }),
      vue.createElementVNode("view", { class: "topbar" }, [
        vue.createElementVNode("view", {
          class: "left",
          onClick: _cache[0] || (_cache[0] = (...args) => $options.back && $options.back(...args))
        }, " 上一步 "),
        vue.createTextVNode(" 图片上传 "),
        vue.createElementVNode("view", { class: "right" }, [
          vue.createElementVNode(
            "view",
            {
              class: vue.normalizeClass(["nextBtn", { "btnAct": $options.canNext }]),
              onClick: _cache[1] || (_cache[1] = (...args) => $options.next && $options.next(...args))
            },
            "下一步",
            2
            /* CLASS */
          )
        ])
      ]),
      vue.createCommentVNode(" 头部标签页 "),
      vue.createElementVNode("view", { class: "tabs" }, [
        (vue.openBlock(true), vue.createElementBlock(
          vue.Fragment,
          null,
          vue.renderList($data.tabs, (item, index2) => {
            return vue.openBlock(), vue.createElementBlock("view", {
              class: vue.normalizeClass(["tab", { active: $data.currentTab === index2 }]),
              key: index2,
              onClick: ($event) => $options.switchTab(index2)
            }, vue.toDisplayString(item), 11, ["onClick"]);
          }),
          128
          /* KEYED_FRAGMENT */
        ))
      ]),
      vue.createCommentVNode(" 内容页 "),
      vue.createElementVNode("scroll-view", {
        class: "content",
        "scroll-y": "true"
      }, [
        $data.currentTab === 0 ? (vue.openBlock(), vue.createElementBlock("view", {
          key: 0,
          class: "item"
        }, [
          (vue.openBlock(true), vue.createElementBlock(
            vue.Fragment,
            null,
            vue.renderList($data.houseInfo.houseImg[0].urls, (url2, index2) => {
              return vue.openBlock(), vue.createElementBlock("view", {
                class: "image-container",
                key: index2
              }, [
                vue.createElementVNode("image", {
                  class: "image",
                  src: url2,
                  mode: "aspectFill"
                }, null, 8, ["src"]),
                vue.createElementVNode("view", {
                  class: "delete-icon",
                  onClick: ($event) => $options.deleteImage(index2, 0)
                }, [
                  vue.createElementVNode("image", {
                    class: "deleteIco",
                    src: "/static/image/icon/clear.png",
                    mode: "aspectFill"
                  })
                ], 8, ["onClick"])
              ]);
            }),
            128
            /* KEYED_FRAGMENT */
          )),
          vue.createElementVNode("view", {
            class: "addPic",
            onClick: _cache[2] || (_cache[2] = ($event) => $options.chooseImage(0))
          }, [
            vue.createElementVNode("image", {
              class: "image",
              src: "/static/image/icon/add.png",
              mode: "aspectFill"
            })
          ]),
          vue.createElementVNode("i"),
          vue.createElementVNode("i")
        ])) : vue.createCommentVNode("v-if", true),
        $data.currentTab === 1 ? (vue.openBlock(), vue.createElementBlock("view", {
          key: 1,
          class: "item"
        }, [
          (vue.openBlock(true), vue.createElementBlock(
            vue.Fragment,
            null,
            vue.renderList($data.houseInfo.houseImg[1].urls, (url2, index2) => {
              return vue.openBlock(), vue.createElementBlock("view", {
                class: "image-container",
                key: index2
              }, [
                vue.createElementVNode("image", {
                  class: "image",
                  src: url2,
                  mode: "aspectFill"
                }, null, 8, ["src"]),
                vue.createElementVNode("view", {
                  class: "delete-icon",
                  onClick: ($event) => $options.deleteImage(index2, 1)
                }, [
                  vue.createElementVNode("image", {
                    class: "deleteIco",
                    src: "/static/image/icon/clear.png",
                    mode: "aspectFill"
                  })
                ], 8, ["onClick"])
              ]);
            }),
            128
            /* KEYED_FRAGMENT */
          )),
          vue.createElementVNode("view", {
            class: "addPic",
            onClick: _cache[3] || (_cache[3] = ($event) => $options.chooseImage(1))
          }, [
            vue.createElementVNode("image", {
              class: "image",
              src: "/static/image/icon/add.png",
              mode: "aspectFill"
            })
          ]),
          vue.createElementVNode("i"),
          vue.createElementVNode("i")
        ])) : vue.createCommentVNode("v-if", true),
        $data.currentTab === 2 ? (vue.openBlock(), vue.createElementBlock("view", {
          key: 2,
          class: "item"
        }, [
          (vue.openBlock(true), vue.createElementBlock(
            vue.Fragment,
            null,
            vue.renderList($data.houseInfo.houseImg[2].urls, (url2, index2) => {
              return vue.openBlock(), vue.createElementBlock("view", {
                class: "image-container",
                key: index2
              }, [
                vue.createElementVNode("image", {
                  class: "image",
                  src: url2,
                  mode: "aspectFill"
                }, null, 8, ["src"]),
                vue.createElementVNode("view", {
                  class: "delete-icon",
                  onClick: ($event) => $options.deleteImage(index2, 2)
                }, [
                  vue.createElementVNode("image", {
                    class: "deleteIco",
                    src: "/static/image/icon/clear.png",
                    mode: "aspectFill"
                  })
                ], 8, ["onClick"])
              ]);
            }),
            128
            /* KEYED_FRAGMENT */
          )),
          vue.createElementVNode("view", {
            class: "addPic",
            onClick: _cache[4] || (_cache[4] = ($event) => $options.chooseImage(2))
          }, [
            vue.createElementVNode("image", {
              class: "image",
              src: "/static/image/icon/add.png",
              mode: "aspectFill"
            })
          ]),
          vue.createElementVNode("i"),
          vue.createElementVNode("i")
        ])) : vue.createCommentVNode("v-if", true),
        $data.currentTab === 3 ? (vue.openBlock(), vue.createElementBlock("view", {
          key: 3,
          class: "item"
        }, [
          (vue.openBlock(true), vue.createElementBlock(
            vue.Fragment,
            null,
            vue.renderList($data.houseInfo.houseImg[3].urls, (url2, index2) => {
              return vue.openBlock(), vue.createElementBlock("view", {
                class: "image-container",
                key: index2
              }, [
                vue.createElementVNode("image", {
                  class: "image",
                  src: url2,
                  mode: "aspectFill"
                }, null, 8, ["src"]),
                vue.createElementVNode("view", {
                  class: "delete-icon",
                  onClick: ($event) => $options.deleteImage(index2, 3)
                }, [
                  vue.createElementVNode("image", {
                    class: "deleteIco",
                    src: "/static/image/icon/clear.png",
                    mode: "aspectFill"
                  })
                ], 8, ["onClick"])
              ]);
            }),
            128
            /* KEYED_FRAGMENT */
          )),
          vue.createElementVNode("view", {
            class: "addPic",
            onClick: _cache[5] || (_cache[5] = ($event) => $options.chooseImage(3))
          }, [
            vue.createElementVNode("image", {
              class: "image",
              src: "/static/image/icon/add.png",
              mode: "aspectFill"
            })
          ]),
          vue.createElementVNode("i"),
          vue.createElementVNode("i")
        ])) : vue.createCommentVNode("v-if", true),
        $data.currentTab === 4 ? (vue.openBlock(), vue.createElementBlock("view", {
          key: 4,
          class: "item"
        }, [
          (vue.openBlock(true), vue.createElementBlock(
            vue.Fragment,
            null,
            vue.renderList($data.houseInfo.houseImg[4].urls, (url2, index2) => {
              return vue.openBlock(), vue.createElementBlock("view", {
                class: "image-container",
                key: index2
              }, [
                vue.createElementVNode("image", {
                  class: "image",
                  src: url2,
                  mode: "aspectFill"
                }, null, 8, ["src"]),
                vue.createElementVNode("view", {
                  class: "delete-icon",
                  onClick: ($event) => $options.deleteImage(index2, 4)
                }, [
                  vue.createElementVNode("image", {
                    class: "deleteIco",
                    src: "/static/image/icon/clear.png",
                    mode: "aspectFill"
                  })
                ], 8, ["onClick"])
              ]);
            }),
            128
            /* KEYED_FRAGMENT */
          )),
          vue.createElementVNode("view", {
            class: "addPic",
            onClick: _cache[6] || (_cache[6] = ($event) => $options.chooseImage(4))
          }, [
            vue.createElementVNode("image", {
              class: "image",
              src: "/static/image/icon/add.png",
              mode: "aspectFill"
            })
          ]),
          vue.createElementVNode("i"),
          vue.createElementVNode("i")
        ])) : vue.createCommentVNode("v-if", true),
        vue.createElementVNode("view", { class: "magrinblock" })
      ])
    ]);
  }
  const PagesUploadUpload_imageUpload_image = /* @__PURE__ */ _export_sfc(_sfc_main$q, [["render", _sfc_render$p], ["__file", "D:/HLTrip/hl/pages/upload/upload_image/upload_image.vue"]]);
  const _sfc_main$p = {
    data() {
      return {
        houseInfo: {
          policies: {
            cancelPolicy: "30",
            allowAddGuests: "0.0",
            deposit: "0.0",
            needToKnow: "000000000"
          }
        },
        cancleArr: ["30分钟内", "1天内", "2天内", "3天内"],
        array: [0, 1, 2, 3],
        canAddGuest: false,
        needdeposit: false,
        index: 0,
        ntkArr: [
          { index: 0, text: "接待婴儿" },
          { index: 1, text: "接待儿童" },
          { index: 2, text: "接待老人" },
          { index: 3, text: "接待外宾" },
          { index: 4, text: "带宠物" },
          { index: 5, text: "吸烟" },
          { index: 6, text: "做饭" },
          { index: 7, text: "聚会" },
          { index: 8, text: "商业拍摄" }
        ],
        selectArr: [],
        showLoading: false
      };
    },
    methods: {
      dialogConfirm() {
        uni.navigateBack({
          delta: 5
        });
      },
      complete() {
        if (this.canNext) {
          const zeroArray2 = Array(9).fill(0);
          this.selectArr.forEach((element) => {
            zeroArray2[element.index] = 1;
          });
          this.houseInfo.policies.needToKnow = zeroArray2.join("");
          const info = uni.getStorageSync("houseInfo");
          info.policies = JSON.parse(JSON.stringify(this.houseInfo.policies));
          info.houseOverview.coverurl = info.houseImg[0].urls[0];
          this.showLoading = true;
          uni.request({
            url: `${API.BASE_URL}/uploadHouse`,
            //仅为示例，并非真实接口地址。
            data: info,
            method: "POST",
            success: (res) => {
              formatAppLog("log", "at pages/upload/upload_policy/upload_policy.vue:132", res.data);
              if (res.data.requestStatus == "200") {
                uni.removeStorageSync("houseInfo");
                this.showLoading = false;
                this.$refs.alertDialog.open("info");
                formatAppLog("log", "at pages/upload/upload_policy/upload_policy.vue:137", "success");
                uni.$emit("uploadHouseSuccess", null);
              } else {
                this.showLoading = false;
                uni.removeStorageSync("houseInfo");
                uni.navigateBack({
                  delta: 5
                });
                formatAppLog("log", "at pages/upload/upload_policy/upload_policy.vue:145", "err");
              }
            },
            fail: (err2) => {
              this.showLoading = false;
              uni.removeStorageSync("houseInfo");
              uni.navigateBack({
                delta: 4
              });
              formatAppLog("log", "at pages/upload/upload_policy/upload_policy.vue:154", "err");
            }
          });
          formatAppLog("log", "at pages/upload/upload_policy/upload_policy.vue:157", info);
        }
      },
      handleRadioChange(e) {
        this.canAddGuest = e.detail.value;
        if (e.detail.value == false) {
          this.houseInfo.policies.allowAddGuests = "0.0";
        }
      },
      handleRadioChange1(e) {
        this.needdeposit = e.detail.value;
        if (e.detail.value == false) {
          this.houseInfo.policies.deposit = "0.0";
        }
      },
      selectCancle(e) {
        this.index = e.detail.value;
        if (e.detail.value != 0) {
          this.houseInfo.policies.cancelPolicy = e.detail.value.toString();
        } else {
          this.houseInfo.policies.cancelPolicy = "30";
        }
      },
      back() {
        uni.navigateBack({
          delta: 1
        });
      }
    },
    computed: {
      canNext() {
        return true;
      }
    },
    onLoad() {
    }
  };
  function _sfc_render$o(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_uni_popup_dialog = resolveEasycom(vue.resolveDynamicComponent("uni-popup-dialog"), __easycom_0$5);
    const _component_uni_popup = resolveEasycom(vue.resolveDynamicComponent("uni-popup"), __easycom_1$2);
    return vue.openBlock(), vue.createElementBlock("view", null, [
      vue.createElementVNode("view", { class: "statusbar" }),
      vue.createElementVNode("view", { class: "topbar" }, [
        vue.createElementVNode("view", {
          class: "left",
          onClick: _cache[0] || (_cache[0] = (...args) => $options.back && $options.back(...args))
        }, " 上一步 "),
        vue.createTextVNode(" 入住政策 "),
        vue.createElementVNode("view", { class: "right" }, [
          vue.createElementVNode(
            "view",
            {
              class: vue.normalizeClass(["nextBtn", { "btnAct": $options.canNext }]),
              onClick: _cache[1] || (_cache[1] = (...args) => $options.complete && $options.complete(...args))
            },
            "上传",
            2
            /* CLASS */
          )
        ])
      ]),
      vue.createElementVNode("scroll-view", {
        "scroll-y": "true",
        class: "content",
        "scroll-with-animation": "true"
      }, [
        vue.createElementVNode("view", { class: "housename tbmargin60" }, [
          vue.createElementVNode("view", { class: "title" }, "是否允许加客"),
          vue.createElementVNode(
            "radio-group",
            {
              onChange: _cache[2] || (_cache[2] = (...args) => $options.handleRadioChange && $options.handleRadioChange(...args)),
              class: "radiogroup tbmargin30"
            },
            [
              vue.createElementVNode("label", { class: "radio" }, [
                vue.createElementVNode("radio", {
                  value: false,
                  color: "#fd6f10",
                  checked: "true",
                  style: { "transform": "scale(0.7)" }
                }),
                vue.createTextVNode("不允许 ")
              ]),
              vue.createElementVNode("label", { class: "radio" }, [
                vue.createElementVNode("radio", {
                  value: true,
                  color: "#fd6f10",
                  style: { "transform": "scale(0.7)" }
                }),
                vue.createTextVNode("允许 ")
              ])
            ],
            32
            /* HYDRATE_EVENTS */
          ),
          $data.canAddGuest ? vue.withDirectives((vue.openBlock(), vue.createElementBlock(
            "input",
            {
              key: 0,
              type: "text",
              class: "textinput",
              "onUpdate:modelValue": _cache[3] || (_cache[3] = ($event) => $data.houseInfo.policies.allowAddGuests = $event),
              placeholder: "请输入价格(加一人加多少钱)"
            },
            null,
            512
            /* NEED_PATCH */
          )), [
            [vue.vModelText, $data.houseInfo.policies.allowAddGuests]
          ]) : vue.createCommentVNode("v-if", true)
        ]),
        vue.createElementVNode("view", { class: "housename tbmargin60" }, [
          vue.createElementVNode("view", { class: "title" }, "是否需要押金"),
          vue.createElementVNode(
            "radio-group",
            {
              onChange: _cache[4] || (_cache[4] = (...args) => $options.handleRadioChange1 && $options.handleRadioChange1(...args)),
              class: "radiogroup tbmargin30"
            },
            [
              vue.createElementVNode("label", { class: "radio" }, [
                vue.createElementVNode("radio", {
                  value: false,
                  color: "#fd6f10",
                  checked: "true",
                  style: { "transform": "scale(0.7)" }
                }),
                vue.createTextVNode("不需要 ")
              ]),
              vue.createElementVNode("label", { class: "radio" }, [
                vue.createElementVNode("radio", {
                  value: true,
                  color: "#fd6f10",
                  style: { "transform": "scale(0.7)" }
                }),
                vue.createTextVNode("需要 ")
              ])
            ],
            32
            /* HYDRATE_EVENTS */
          ),
          $data.needdeposit ? vue.withDirectives((vue.openBlock(), vue.createElementBlock(
            "input",
            {
              key: 0,
              type: "text",
              class: "textinput",
              "onUpdate:modelValue": _cache[5] || (_cache[5] = ($event) => $data.houseInfo.policies.deposit = $event),
              placeholder: "请输入押金价格"
            },
            null,
            512
            /* NEED_PATCH */
          )), [
            [vue.vModelText, $data.houseInfo.policies.deposit]
          ]) : vue.createCommentVNode("v-if", true)
        ]),
        vue.createElementVNode("view", { class: "housename tbmargin60" }, [
          vue.createElementVNode("view", { class: "title" }, "免费取消"),
          vue.createElementVNode("view", { class: "data_picker tbmargin30 widthp30" }, [
            vue.createElementVNode("view", { class: "picker_title" }, " 下单后 "),
            vue.createElementVNode("view", { class: "pickerwrapper" }, [
              vue.createElementVNode("picker", {
                onChange: _cache[6] || (_cache[6] = (...args) => $options.selectCancle && $options.selectCancle(...args)),
                value: $data.index,
                range: $data.cancleArr
              }, [
                vue.createElementVNode(
                  "view",
                  { class: "pickertext" },
                  vue.toDisplayString($data.cancleArr[$data.index]),
                  1
                  /* TEXT */
                )
              ], 40, ["value", "range"])
            ]),
            vue.createElementVNode("view", { class: "desc" }, "可以免费取消")
          ])
        ]),
        vue.createElementVNode("view", { class: "housename tbmargin60" }, [
          vue.createElementVNode("view", { class: "title" }, "入住须知"),
          vue.createElementVNode(
            "checkbox-group",
            {
              onChange: _cache[7] || (_cache[7] = (...args) => _ctx.handlentk && _ctx.handlentk(...args)),
              class: "checkgroup tbmargin30"
            },
            [
              (vue.openBlock(true), vue.createElementBlock(
                vue.Fragment,
                null,
                vue.renderList($data.ntkArr, (item) => {
                  return vue.openBlock(), vue.createElementBlock("label", { class: "checkitem" }, [
                    vue.createElementVNode("checkbox", {
                      value: item,
                      checked: false,
                      color: "#fd6f10",
                      style: { "transform": "scale(0.7)" }
                    }, null, 8, ["value"]),
                    vue.createElementVNode(
                      "text",
                      null,
                      vue.toDisplayString(item.text),
                      1
                      /* TEXT */
                    )
                  ]);
                }),
                256
                /* UNKEYED_FRAGMENT */
              ))
            ],
            32
            /* HYDRATE_EVENTS */
          )
        ])
      ]),
      $data.showLoading ? (vue.openBlock(), vue.createElementBlock("view", {
        key: 0,
        class: "text"
      }, [
        vue.createElementVNode("image", {
          class: "ico",
          src: "/static/image/icon/loading.gif",
          mode: ""
        })
      ])) : vue.createCommentVNode("v-if", true),
      vue.createVNode(
        _component_uni_popup,
        {
          ref: "alertDialog",
          type: "dialog"
        },
        {
          default: vue.withCtx(() => [
            vue.createVNode(_component_uni_popup_dialog, {
              type: "error",
              cancelText: "关闭",
              onClose: $options.dialogConfirm,
              confirmText: "确定",
              title: "通知",
              content: "上传成功",
              onConfirm: $options.dialogConfirm
            }, null, 8, ["onClose", "onConfirm"])
          ]),
          _: 1
          /* STABLE */
        },
        512
        /* NEED_PATCH */
      )
    ]);
  }
  const PagesUploadUpload_policyUpload_policy = /* @__PURE__ */ _export_sfc(_sfc_main$p, [["render", _sfc_render$o], ["__file", "D:/HLTrip/hl/pages/upload/upload_policy/upload_policy.vue"]]);
  const _sfc_main$o = {
    data() {
      return {
        houseInfo: {
          features: []
        },
        currentIndex: 0
      };
    },
    methods: {
      next() {
        if (this.canNext) {
          uni.setStorageSync("houseInfo", this.houseInfo);
          uni.navigateTo({
            url: "/pages/upload/upload_policy/upload_policy"
          });
        }
      },
      deletePop(index2) {
        this.currentIndex = index2;
        this.$refs.alertDialog.open("info");
      },
      addFeature() {
        uni.navigateTo({
          url: "/pages/upload/upload_textarea/upload_textarea"
        });
      },
      dialogConfirm() {
        this.houseInfo.features.splice(this.currentIndex, 1);
        uni.setStorageSync("houseInfo", this.houseInfo);
      },
      back() {
        uni.navigateBack({
          delta: 1
        });
      }
    },
    computed: {
      canNext() {
        if (this.houseInfo.features.length <= 3 && this.houseInfo.features.length > 0) {
          return true;
        } else {
          return false;
        }
      }
    },
    onLoad() {
    },
    onShow() {
      const info = uni.getStorageInfoSync();
      const infoExist = info.keys.includes("houseInfo");
      if (infoExist) {
        this.houseInfo = uni.getStorageSync("houseInfo");
      }
    }
  };
  function _sfc_render$n(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_uni_popup_dialog = resolveEasycom(vue.resolveDynamicComponent("uni-popup-dialog"), __easycom_0$5);
    const _component_uni_popup = resolveEasycom(vue.resolveDynamicComponent("uni-popup"), __easycom_1$2);
    return vue.openBlock(), vue.createElementBlock("view", null, [
      vue.createElementVNode("view", { class: "statusbar" }),
      vue.createElementVNode("view", { class: "topbar" }, [
        vue.createElementVNode("view", {
          class: "left",
          onClick: _cache[0] || (_cache[0] = (...args) => $options.back && $options.back(...args))
        }, " 上一步 "),
        vue.createTextVNode(" 房源介绍 "),
        vue.createElementVNode("view", { class: "right" }, [
          vue.createElementVNode(
            "view",
            {
              class: vue.normalizeClass(["nextBtn", { "btnAct": $options.canNext }]),
              onClick: _cache[1] || (_cache[1] = (...args) => $options.next && $options.next(...args))
            },
            "下一步",
            2
            /* CLASS */
          )
        ])
      ]),
      vue.createElementVNode("scroll-view", {
        "scroll-y": "true",
        class: "content",
        "scroll-with-animation": "true"
      }, [
        $data.houseInfo.features.length < 3 ? (vue.openBlock(), vue.createElementBlock("view", {
          key: 0,
          class: "addBtn",
          onClick: _cache[2] || (_cache[2] = (...args) => $options.addFeature && $options.addFeature(...args))
        }, [
          vue.createElementVNode("image", {
            class: "icon",
            src: "/static/image/icon/add.png",
            mode: "aspectFit"
          }),
          vue.createElementVNode("text", { class: "addtext" }, "添加房源介绍")
        ])) : vue.createCommentVNode("v-if", true),
        (vue.openBlock(true), vue.createElementBlock(
          vue.Fragment,
          null,
          vue.renderList($data.houseInfo.features, (item, index2) => {
            return vue.openBlock(), vue.createElementBlock("view", {
              class: "featureitem",
              key: index2
            }, [
              vue.createElementVNode("view", { class: "left" }, [
                vue.createElementVNode(
                  "view",
                  { class: "ftitle" },
                  vue.toDisplayString(item.featureType),
                  1
                  /* TEXT */
                ),
                vue.createElementVNode(
                  "view",
                  { class: "fcontent" },
                  vue.toDisplayString(item.featureContent),
                  1
                  /* TEXT */
                )
              ]),
              vue.createElementVNode("view", {
                class: "right",
                onClick: ($event) => $options.deletePop(index2)
              }, [
                vue.createElementVNode("image", {
                  class: "ico",
                  src: "/static/image/icon/clear.png",
                  mode: "aspectFit"
                })
              ], 8, ["onClick"])
            ]);
          }),
          128
          /* KEYED_FRAGMENT */
        ))
      ]),
      vue.createVNode(
        _component_uni_popup,
        {
          ref: "alertDialog",
          type: "dialog"
        },
        {
          default: vue.withCtx(() => [
            vue.createVNode(_component_uni_popup_dialog, {
              type: "error",
              cancelText: "关闭",
              confirmText: "确定",
              title: "通知",
              content: "确定删除吗",
              onConfirm: $options.dialogConfirm
            }, null, 8, ["onConfirm"])
          ]),
          _: 1
          /* STABLE */
        },
        512
        /* NEED_PATCH */
      )
    ]);
  }
  const PagesUploadUpload_featureUpload_feature = /* @__PURE__ */ _export_sfc(_sfc_main$o, [["render", _sfc_render$n], ["__file", "D:/HLTrip/hl/pages/upload/upload_feature/upload_feature.vue"]]);
  const _sfc_main$n = {
    data() {
      return {
        title: "",
        content: "",
        currentCursor: 0,
        houseInfo: {
          features: []
        }
      };
    },
    methods: {
      hanldeInput(e) {
        this.currentCursor = e.detail.cursor;
      },
      confirm() {
        if (this.canNext) {
          const obj = {
            featureType: this.title,
            featureContent: this.content
          };
          this.houseInfo.features.push(obj);
          uni.setStorageSync("houseInfo", this.houseInfo);
          uni.navigateBack({
            delta: 1
          });
        }
      },
      cancle() {
        uni.navigateBack();
      }
    },
    computed: {
      canNext() {
        if (this.title != "" && this.content != "") {
          return true;
        } else {
          return false;
        }
      }
    },
    onLoad() {
      const info = uni.getStorageInfoSync();
      const infoExist = info.keys.includes("houseInfo");
      if (infoExist) {
        this.houseInfo = uni.getStorageSync("houseInfo");
      }
    }
  };
  function _sfc_render$m(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("view", null, [
      vue.createElementVNode("view", { class: "statusbar" }),
      vue.createElementVNode("view", { class: "topbar" }, [
        vue.createElementVNode("view", {
          class: "left",
          onClick: _cache[0] || (_cache[0] = (...args) => $options.cancle && $options.cancle(...args))
        }, " 返回 "),
        vue.createTextVNode(" 添加介绍 "),
        vue.createElementVNode("view", { class: "right" }, [
          vue.createElementVNode(
            "view",
            {
              class: vue.normalizeClass(["nextBtn", { "btnAct": $options.canNext }]),
              onClick: _cache[1] || (_cache[1] = (...args) => $options.confirm && $options.confirm(...args))
            },
            "确定",
            2
            /* CLASS */
          )
        ])
      ]),
      vue.createElementVNode("view", { class: "content" }, [
        vue.createElementVNode("view", { class: "housename tbmargin60" }, [
          vue.createElementVNode("view", { class: "title" }, "标题"),
          vue.withDirectives(vue.createElementVNode(
            "textarea",
            {
              "auto-height": "true",
              class: "tarea1",
              onInput: _cache[2] || (_cache[2] = (...args) => $options.hanldeInput && $options.hanldeInput(...args)),
              "onUpdate:modelValue": _cache[3] || (_cache[3] = ($event) => $data.title = $event),
              placeholder: "请输入介绍标题(例如:周边详情,房源特色等)"
            },
            null,
            544
            /* HYDRATE_EVENTS, NEED_PATCH */
          ), [
            [vue.vModelText, $data.title]
          ])
        ]),
        vue.createElementVNode("view", { class: "housename tbmargin60" }, [
          vue.createElementVNode("view", { class: "title" }, "内容"),
          vue.withDirectives(vue.createElementVNode(
            "textarea",
            {
              class: "tarea",
              maxlength: "120",
              onInput: _cache[4] || (_cache[4] = (...args) => $options.hanldeInput && $options.hanldeInput(...args)),
              "onUpdate:modelValue": _cache[5] || (_cache[5] = ($event) => $data.content = $event),
              placeholder: "请输入内容..."
            },
            null,
            544
            /* HYDRATE_EVENTS, NEED_PATCH */
          ), [
            [vue.vModelText, $data.content]
          ]),
          vue.createElementVNode(
            "view",
            { class: "count" },
            vue.toDisplayString($data.currentCursor) + "/120",
            1
            /* TEXT */
          )
        ])
      ])
    ]);
  }
  const PagesUploadUpload_textareaUpload_textarea = /* @__PURE__ */ _export_sfc(_sfc_main$n, [["render", _sfc_render$m], ["__file", "D:/HLTrip/hl/pages/upload/upload_textarea/upload_textarea.vue"]]);
  const _sfc_main$m = {
    data() {
      return {
        houseInfo: {
          facilities: {}
        },
        serviceArr: [
          { index: 0, text: "免费停车位" },
          { index: 1, text: "付费停车位" },
          { index: 2, text: "行李寄存" },
          { index: 3, text: "前台接待" },
          { index: 4, text: "管家式服务" },
          { index: 5, text: "团建会议" }
        ],
        basicArr: [
          { index: 0, text: "无线网络" },
          { index: 1, text: "电梯" },
          { index: 2, text: "落地窗" },
          { index: 3, text: "空调" },
          { index: 4, text: "暖气" },
          { index: 5, text: "晾衣架" },
          { index: 6, text: "电热水壶" },
          { index: 7, text: "沙发" },
          { index: 8, text: "电视" },
          { index: 9, text: "冰箱" },
          { index: 10, text: "洗衣机" },
          { index: 11, text: "空气净化器" },
          { index: 12, text: "加湿器" },
          { index: 13, text: "烘干机" },
          { index: 14, text: "净水器" },
          { index: 15, text: "免费瓶装水" }
        ],
        bathroomArr: [
          { index: 0, text: "热水" },
          { index: 1, text: "独立卫浴" },
          { index: 2, text: "电吹风" },
          { index: 3, text: "洗浴用品" },
          { index: 4, text: "牙具" },
          { index: 5, text: "浴巾" },
          { index: 6, text: "毛巾" },
          { index: 7, text: "干湿分离" }
        ],
        kitchenArr: [
          { index: 0, text: "微波炉" },
          { index: 1, text: "餐具" },
          { index: 2, text: "刀具菜板" },
          { index: 3, text: "烹饪锅具" },
          { index: 4, text: "电磁炉" },
          { index: 5, text: "燃气灶" },
          { index: 6, text: "洗涤用品" },
          { index: 7, text: "饮水机" },
          { index: 8, text: "餐桌" }
        ],
        surroundArr: [
          { index: 0, text: "超市" },
          { index: 1, text: "便利店" },
          { index: 2, text: "餐厅" },
          { index: 3, text: "药店" },
          { index: 4, text: "公园" },
          { index: 5, text: "儿童乐园" },
          { index: 6, text: "充电桩" }
        ],
        safetyArr: [
          { index: 0, text: "急救包" },
          { index: 1, text: "智能门锁" },
          { index: 2, text: "门禁卡" },
          { index: 3, text: "可视对讲" },
          { index: 4, text: "保安" },
          { index: 5, text: "火灾警报器" },
          { index: 6, text: "灭火器" }
        ],
        entertainmentArr: [
          { index: 0, text: "投影设备" },
          { index: 1, text: "读书品茶" }
        ],
        leisureArr: [
          { index: 0, text: "落地窗" },
          { index: 1, text: "玻璃房" }
        ],
        childrenArr: [
          { index: 0, text: "儿童餐椅" },
          { index: 1, text: "防护设备" },
          { index: 2, text: "桌角防护" }
        ],
        srv: [],
        bsc: [],
        br: [],
        ktc: [],
        srd: [],
        sfty: [],
        ettm: [],
        ls: [],
        chld: []
      };
    },
    methods: {
      next() {
        if (this.canNext) {
          this.houseInfo.facilities.service = this.handleArr(6, this.srv);
          this.houseInfo.facilities.basic = this.handleArr(16, this.bsc);
          this.houseInfo.facilities.bathroom = this.handleArr(8, this.br);
          this.houseInfo.facilities.kitchen = this.handleArr(9, this.ktc);
          this.houseInfo.facilities.surrounding = this.handleArr(7, this.srd);
          this.houseInfo.facilities.safety = this.handleArr(7, this.sfty);
          this.houseInfo.facilities.entertainment = this.handleArr(2, this.ettm);
          this.houseInfo.facilities.leisure = this.handleArr(2, this.ls);
          this.houseInfo.facilities.children = this.handleArr(3, this.chld);
          const info = uni.getStorageSync("houseInfo");
          info.facilities = this.houseInfo.facilities;
          uni.setStorageSync("houseInfo", info);
          uni.navigateTo({
            url: "/pages/upload/upload_feature/upload_feature"
          });
        }
      },
      handleArr(length, arr) {
        const zeroArray2 = Array(length).fill(0);
        arr.forEach((element) => {
          zeroArray2[element.index] = 1;
        });
        return zeroArray2.join("");
      },
      srv1(e) {
        this.srv = e.detail.value;
      },
      bsc1(e) {
        this.bsc = e.detail.value;
      },
      br1(e) {
        this.br = e.detail.value;
      },
      ktc1(e) {
        this.ktc = e.detail.value;
      },
      srd1(e) {
        this.srd = e.detail.value;
      },
      sfty1(e) {
        this.sfty = e.detail.value;
      },
      ettm1(e) {
        this.ettm = e.detail.value;
      },
      ls1(e) {
        this.ls = e.detail.value;
      },
      chld1(e) {
        this.chld = e.detail.value;
      },
      back() {
        uni.navigateBack({
          delta: 1
        });
      }
    },
    computed: {
      canNext() {
        return true;
      }
    }
  };
  function _sfc_render$l(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("view", null, [
      vue.createElementVNode("view", { class: "statusbar" }),
      vue.createElementVNode("view", { class: "topbar" }, [
        vue.createElementVNode("view", {
          class: "left",
          onClick: _cache[0] || (_cache[0] = (...args) => $options.back && $options.back(...args))
        }, " 上一步 "),
        vue.createTextVNode(" 设施信息 "),
        vue.createElementVNode("view", { class: "right" }, [
          vue.createElementVNode(
            "view",
            {
              class: vue.normalizeClass(["nextBtn", { "btnAct": $options.canNext }]),
              onClick: _cache[1] || (_cache[1] = (...args) => $options.next && $options.next(...args))
            },
            "下一步",
            2
            /* CLASS */
          )
        ])
      ]),
      vue.createElementVNode("scroll-view", {
        "scroll-y": "true",
        class: "content",
        "scroll-with-animation": "true"
      }, [
        vue.createElementVNode("view", { class: "fac_item tbmargin60" }, [
          vue.createElementVNode("view", { class: "title" }, "服务"),
          vue.createElementVNode(
            "checkbox-group",
            {
              onChange: _cache[2] || (_cache[2] = (...args) => $options.srv1 && $options.srv1(...args)),
              class: "checkgroup"
            },
            [
              (vue.openBlock(true), vue.createElementBlock(
                vue.Fragment,
                null,
                vue.renderList($data.serviceArr, (item) => {
                  return vue.openBlock(), vue.createElementBlock("label", { class: "checkitem" }, [
                    vue.createElementVNode("checkbox", {
                      value: item,
                      checked: false,
                      color: "#fd6f10",
                      style: { "transform": "scale(0.7)" }
                    }, null, 8, ["value"]),
                    vue.createElementVNode(
                      "text",
                      null,
                      vue.toDisplayString(item.text),
                      1
                      /* TEXT */
                    )
                  ]);
                }),
                256
                /* UNKEYED_FRAGMENT */
              ))
            ],
            32
            /* HYDRATE_EVENTS */
          )
        ]),
        vue.createElementVNode("view", { class: "fac_item tbmargin30" }, [
          vue.createElementVNode("view", { class: "title" }, "基础"),
          vue.createElementVNode(
            "checkbox-group",
            {
              onChange: _cache[3] || (_cache[3] = (...args) => $options.bsc1 && $options.bsc1(...args)),
              class: "checkgroup"
            },
            [
              (vue.openBlock(true), vue.createElementBlock(
                vue.Fragment,
                null,
                vue.renderList($data.basicArr, (item) => {
                  return vue.openBlock(), vue.createElementBlock("label", { class: "checkitem" }, [
                    vue.createElementVNode("checkbox", {
                      value: item,
                      checked: false,
                      color: "#fd6f10",
                      style: { "transform": "scale(0.7)" }
                    }, null, 8, ["value"]),
                    vue.createElementVNode(
                      "text",
                      null,
                      vue.toDisplayString(item.text),
                      1
                      /* TEXT */
                    )
                  ]);
                }),
                256
                /* UNKEYED_FRAGMENT */
              ))
            ],
            32
            /* HYDRATE_EVENTS */
          )
        ]),
        vue.createElementVNode("view", { class: "fac_item tbmargin30" }, [
          vue.createElementVNode("view", { class: "title" }, "卫浴"),
          vue.createElementVNode(
            "checkbox-group",
            {
              onChange: _cache[4] || (_cache[4] = (...args) => $options.br1 && $options.br1(...args)),
              class: "checkgroup"
            },
            [
              (vue.openBlock(true), vue.createElementBlock(
                vue.Fragment,
                null,
                vue.renderList($data.bathroomArr, (item) => {
                  return vue.openBlock(), vue.createElementBlock("label", { class: "checkitem" }, [
                    vue.createElementVNode("checkbox", {
                      value: item,
                      checked: false,
                      color: "#fd6f10",
                      style: { "transform": "scale(0.7)" }
                    }, null, 8, ["value"]),
                    vue.createElementVNode(
                      "text",
                      null,
                      vue.toDisplayString(item.text),
                      1
                      /* TEXT */
                    )
                  ]);
                }),
                256
                /* UNKEYED_FRAGMENT */
              )),
              vue.createElementVNode("i")
            ],
            32
            /* HYDRATE_EVENTS */
          )
        ]),
        vue.createElementVNode("view", { class: "fac_item tbmargin30" }, [
          vue.createElementVNode("view", { class: "title" }, "厨房"),
          vue.createElementVNode(
            "checkbox-group",
            {
              onChange: _cache[5] || (_cache[5] = (...args) => $options.ktc1 && $options.ktc1(...args)),
              class: "checkgroup"
            },
            [
              (vue.openBlock(true), vue.createElementBlock(
                vue.Fragment,
                null,
                vue.renderList($data.kitchenArr, (item) => {
                  return vue.openBlock(), vue.createElementBlock("label", { class: "checkitem" }, [
                    vue.createElementVNode("checkbox", {
                      value: item,
                      checked: false,
                      color: "#fd6f10",
                      style: { "transform": "scale(0.7)" }
                    }, null, 8, ["value"]),
                    vue.createElementVNode(
                      "text",
                      null,
                      vue.toDisplayString(item.text),
                      1
                      /* TEXT */
                    )
                  ]);
                }),
                256
                /* UNKEYED_FRAGMENT */
              )),
              vue.createElementVNode("i")
            ],
            32
            /* HYDRATE_EVENTS */
          )
        ]),
        vue.createElementVNode("view", { class: "fac_item tbmargin30" }, [
          vue.createElementVNode("view", { class: "title" }, "周边"),
          vue.createElementVNode(
            "checkbox-group",
            {
              onChange: _cache[6] || (_cache[6] = (...args) => $options.srd1 && $options.srd1(...args)),
              class: "checkgroup"
            },
            [
              (vue.openBlock(true), vue.createElementBlock(
                vue.Fragment,
                null,
                vue.renderList($data.surroundArr, (item) => {
                  return vue.openBlock(), vue.createElementBlock("label", { class: "checkitem" }, [
                    vue.createElementVNode("checkbox", {
                      value: item,
                      checked: false,
                      color: "#fd6f10",
                      style: { "transform": "scale(0.7)" }
                    }, null, 8, ["value"]),
                    vue.createElementVNode(
                      "text",
                      null,
                      vue.toDisplayString(item.text),
                      1
                      /* TEXT */
                    )
                  ]);
                }),
                256
                /* UNKEYED_FRAGMENT */
              )),
              vue.createElementVNode("i")
            ],
            32
            /* HYDRATE_EVENTS */
          )
        ]),
        vue.createElementVNode("view", { class: "fac_item tbmargin30" }, [
          vue.createElementVNode("view", { class: "title" }, "安全"),
          vue.createElementVNode(
            "checkbox-group",
            {
              onChange: _cache[7] || (_cache[7] = (...args) => $options.sfty1 && $options.sfty1(...args)),
              class: "checkgroup"
            },
            [
              (vue.openBlock(true), vue.createElementBlock(
                vue.Fragment,
                null,
                vue.renderList($data.safetyArr, (item) => {
                  return vue.openBlock(), vue.createElementBlock("label", { class: "checkitem" }, [
                    vue.createElementVNode("checkbox", {
                      value: item,
                      checked: false,
                      color: "#fd6f10",
                      style: { "transform": "scale(0.7)" }
                    }, null, 8, ["value"]),
                    vue.createElementVNode(
                      "text",
                      null,
                      vue.toDisplayString(item.text),
                      1
                      /* TEXT */
                    )
                  ]);
                }),
                256
                /* UNKEYED_FRAGMENT */
              )),
              vue.createElementVNode("i")
            ],
            32
            /* HYDRATE_EVENTS */
          )
        ]),
        vue.createElementVNode("view", { class: "fac_item tbmargin30" }, [
          vue.createElementVNode("view", { class: "title" }, "娱乐"),
          vue.createElementVNode(
            "checkbox-group",
            {
              onChange: _cache[8] || (_cache[8] = (...args) => $options.ettm1 && $options.ettm1(...args)),
              class: "checkgroup"
            },
            [
              (vue.openBlock(true), vue.createElementBlock(
                vue.Fragment,
                null,
                vue.renderList($data.entertainmentArr, (item) => {
                  return vue.openBlock(), vue.createElementBlock("label", { class: "checkitem" }, [
                    vue.createElementVNode("checkbox", {
                      value: item,
                      checked: false,
                      color: "#fd6f10",
                      style: { "transform": "scale(0.7)" }
                    }, null, 8, ["value"]),
                    vue.createElementVNode(
                      "text",
                      null,
                      vue.toDisplayString(item.text),
                      1
                      /* TEXT */
                    )
                  ]);
                }),
                256
                /* UNKEYED_FRAGMENT */
              )),
              vue.createElementVNode("i")
            ],
            32
            /* HYDRATE_EVENTS */
          )
        ]),
        vue.createElementVNode("view", { class: "fac_item tbmargin30" }, [
          vue.createElementVNode("view", { class: "title" }, "休闲"),
          vue.createElementVNode(
            "checkbox-group",
            {
              onChange: _cache[9] || (_cache[9] = (...args) => $options.ls1 && $options.ls1(...args)),
              class: "checkgroup"
            },
            [
              (vue.openBlock(true), vue.createElementBlock(
                vue.Fragment,
                null,
                vue.renderList($data.leisureArr, (item) => {
                  return vue.openBlock(), vue.createElementBlock("label", { class: "checkitem" }, [
                    vue.createElementVNode("checkbox", {
                      value: item,
                      checked: false,
                      color: "#fd6f10",
                      style: { "transform": "scale(0.7)" }
                    }, null, 8, ["value"]),
                    vue.createElementVNode(
                      "text",
                      null,
                      vue.toDisplayString(item.text),
                      1
                      /* TEXT */
                    )
                  ]);
                }),
                256
                /* UNKEYED_FRAGMENT */
              )),
              vue.createElementVNode("i")
            ],
            32
            /* HYDRATE_EVENTS */
          )
        ]),
        vue.createElementVNode("view", { class: "fac_item tbmargin30" }, [
          vue.createElementVNode("view", { class: "title" }, "儿童"),
          vue.createElementVNode(
            "checkbox-group",
            {
              onChange: _cache[10] || (_cache[10] = (...args) => $options.chld1 && $options.chld1(...args)),
              class: "checkgroup"
            },
            [
              (vue.openBlock(true), vue.createElementBlock(
                vue.Fragment,
                null,
                vue.renderList($data.childrenArr, (item) => {
                  return vue.openBlock(), vue.createElementBlock("label", { class: "checkitem" }, [
                    vue.createElementVNode("checkbox", {
                      value: item,
                      checked: false,
                      color: "#fd6f10",
                      style: { "transform": "scale(0.7)" }
                    }, null, 8, ["value"]),
                    vue.createElementVNode(
                      "text",
                      null,
                      vue.toDisplayString(item.text),
                      1
                      /* TEXT */
                    )
                  ]);
                }),
                256
                /* UNKEYED_FRAGMENT */
              )),
              vue.createElementVNode("i")
            ],
            32
            /* HYDRATE_EVENTS */
          )
        ])
      ])
    ]);
  }
  const PagesUploadUpload_facilityUpload_facility = /* @__PURE__ */ _export_sfc(_sfc_main$m, [["render", _sfc_render$l], ["__file", "D:/HLTrip/hl/pages/upload/upload_facility/upload_facility.vue"]]);
  const _sfc_main$l = {
    data() {
      return {
        houseInfo: [],
        overview: void 0,
        avatars: void 0,
        pagecount: 1,
        landlordbrief: void 0,
        landlordInfo: void 0,
        landlordid: null
      };
    },
    onBackPress() {
      try {
        this.$nextTick(() => {
          plus.navigator.setStatusBarStyle("light");
        });
      } catch (error2) {
        formatAppLog("log", "at pages/landLordDetail/landLordDetail.vue:97", err);
      }
    },
    methods: {
      nvback() {
        try {
          this.$nextTick(() => {
            plus.navigator.setStatusBarStyle("light");
          });
        } catch (error2) {
          formatAppLog("log", "at pages/landLordDetail/landLordDetail.vue:107", err);
        }
        uni.navigateBack({
          delta: 1
        });
      },
      getMoreHouse() {
        this.pagecount++;
        uni.request({
          url: `${API.BASE_URL}/getHouseInfoBylandlord`,
          //仅为示例，并非真实接口地址。
          data: {
            landlordid: this.landlordid,
            userid: uni.getStorageSync("userId"),
            page: this.pagecount
          },
          success: (res) => {
            let resouseData = res.data.data.houseInfo;
            resouseData.forEach((element) => {
              let isExist = this.houseInfo.findIndex((item) => item.overview.houseid == element.overview.houseid);
              formatAppLog("log", "at pages/landLordDetail/landLordDetail.vue:127", isExist);
              if (isExist == -1) {
                this.houseInfo.push(element);
              }
            });
          }
        });
      },
      nvtodt(houseid) {
        formatAppLog("log", "at pages/landLordDetail/landLordDetail.vue:136", houseid);
        uni.navigateTo({
          url: `/pages/hotelDetail/hotelDetail?houseid=${houseid}`
        });
      },
      likeHotel(item) {
        item.islike = !item.islike;
        uni.request({
          url: `${API.BASE_URL}/favorHouse`,
          data: {
            houseid: item.overview.houseid,
            userid: uni.getStorageSync("userId")
          }
        });
      }
    },
    onLoad(option) {
      this.landlordid = option.landlordid;
      uni.request({
        url: `${API.BASE_URL}/getHouseInfoBylandlord`,
        //仅为示例，并非真实接口地址。
        data: {
          landlordid: option.landlordid,
          userid: uni.getStorageSync("userId"),
          page: this.pagecount
        },
        success: (res) => {
          formatAppLog("log", "at pages/landLordDetail/landLordDetail.vue:162", res.data);
          const resouseData = res.data.data.houseInfo;
          this.houseInfo = resouseData;
          this.landlordInfo = res.data.data.landlordInfo;
          this.landlordbrief = res.data.data.landlordbrief;
        }
      });
    }
  };
  function _sfc_render$k(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("view", null, [
      vue.createElementVNode("view", { class: "statusbar" }),
      vue.createElementVNode(
        "scroll-view",
        {
          "scroll-y": "true",
          class: "container",
          onScrolltolower: _cache[1] || (_cache[1] = (...args) => $options.getMoreHouse && $options.getMoreHouse(...args))
        },
        [
          vue.createElementVNode("view", { class: "topbar" }, [
            vue.createElementVNode("view", {
              class: "left",
              onClick: _cache[0] || (_cache[0] = (...args) => $options.nvback && $options.nvback(...args))
            }, [
              vue.createElementVNode("image", {
                class: "topbar-icon leftIco",
                src: "/static/image/icon/back_balck.png",
                mode: "aspectFit"
              })
            ]),
            vue.createTextVNode(" 房东主页 "),
            vue.createElementVNode("view", { class: "right" }, [
              vue.createElementVNode("image", {
                class: "topbar-icon rightIco",
                src: "/static/image/icon/message_white.png",
                mode: "aspectFit"
              }),
              vue.createCommentVNode(' <image class="topbar-icon rightIco" src="../../static/image/icon/message_black.png" mode="aspectFit" /> ')
            ])
          ]),
          vue.createCommentVNode(" 房东信息框 "),
          $data.landlordbrief != void 0 ? (vue.openBlock(), vue.createElementBlock("view", {
            key: 0,
            class: "landLord"
          }, [
            $data.landlordbrief != void 0 ? (vue.openBlock(), vue.createElementBlock("view", {
              key: 0,
              class: "content"
            }, [
              vue.createElementVNode("view", { class: "contentWrapper" }, [
                vue.createElementVNode("view", { class: "left" }, [
                  vue.createElementVNode("image", {
                    class: "lavatar",
                    src: $data.landlordbrief.avatar,
                    mode: "aspectFill"
                  }, null, 8, ["src"])
                ]),
                vue.createElementVNode("view", { class: "right" }, [
                  vue.createElementVNode(
                    "view",
                    { class: "nickname" },
                    vue.toDisplayString($data.landlordbrief.nickname),
                    1
                    /* TEXT */
                  ),
                  vue.createElementVNode("view", { class: "text" }, "实名认证")
                ])
              ])
            ])) : vue.createCommentVNode("v-if", true)
          ])) : vue.createCommentVNode("v-if", true),
          vue.createCommentVNode(" 房东简介 "),
          $data.landlordInfo != void 0 ? (vue.openBlock(), vue.createElementBlock("view", {
            key: 1,
            class: "intro"
          }, [
            vue.createElementVNode("view", { class: "introCtnt" }, [
              vue.createElementVNode(
                "view",
                { class: "introTitle" },
                vue.toDisplayString($data.landlordInfo.introtitle),
                1
                /* TEXT */
              ),
              vue.createElementVNode(
                "view",
                { class: "introContent" },
                vue.toDisplayString($data.landlordInfo.introcont),
                1
                /* TEXT */
              )
            ])
          ])) : vue.createCommentVNode("v-if", true),
          vue.createElementVNode("view", { class: "houseList" }, [
            vue.createElementVNode("view", { class: "listTitle" }, "在线房源"),
            $data.houseInfo.length != 0 ? (vue.openBlock(), vue.createElementBlock("view", {
              key: 0,
              class: "Listcontent"
            }, [
              vue.createElementVNode("view", { class: "contentWrapper" }, [
                (vue.openBlock(true), vue.createElementBlock(
                  vue.Fragment,
                  null,
                  vue.renderList($data.houseInfo, (item, index2) => {
                    return vue.openBlock(), vue.createElementBlock("view", {
                      class: "hotelItem",
                      key: index2
                    }, [
                      vue.createElementVNode("view", { class: "picWrapper" }, [
                        vue.createElementVNode("image", {
                          class: "pic",
                          src: item.overview.coverurl,
                          mode: "aspectFill",
                          onClick: ($event) => $options.nvtodt(item.overview.houseid)
                        }, null, 8, ["src", "onClick"]),
                        vue.createElementVNode("view", {
                          class: "likewrap",
                          onClick: ($event) => $options.likeHotel(item)
                        }, [
                          !item.islike ? (vue.openBlock(), vue.createElementBlock("image", {
                            key: 0,
                            class: "like",
                            src: "/static/image/icon/like.png"
                          })) : vue.createCommentVNode("v-if", true),
                          item.islike ? (vue.openBlock(), vue.createElementBlock("image", {
                            key: 1,
                            class: "like",
                            src: "/static/image/icon/like-active.png"
                          })) : vue.createCommentVNode("v-if", true)
                        ], 8, ["onClick"]),
                        vue.createElementVNode("div", { class: "hotelDesc" }, [
                          vue.createElementVNode("image", {
                            class: "icon",
                            src: "/static/image/icon/location.png",
                            mode: ""
                          }),
                          vue.createElementVNode(
                            "view",
                            { class: "desc" },
                            vue.toDisplayString(item.overview.roomcount) + "居 | " + vue.toDisplayString(item.locationInfo.city) + "·" + vue.toDisplayString(item.locationInfo.county),
                            1
                            /* TEXT */
                          )
                        ])
                      ]),
                      vue.createElementVNode("view", {
                        class: "textWrapp",
                        onClick: ($event) => $options.nvtodt(item.overview.houseid)
                      }, [
                        vue.createElementVNode(
                          "view",
                          { class: "hotelName" },
                          vue.toDisplayString(item.overview.housename),
                          1
                          /* TEXT */
                        ),
                        vue.createElementVNode("text", { class: "rmb" }, "￥"),
                        vue.createElementVNode(
                          "text",
                          { class: "currentPrice" },
                          vue.toDisplayString(item.overview.discountprice),
                          1
                          /* TEXT */
                        ),
                        vue.createElementVNode(
                          "del",
                          { class: "orgPrice" },
                          "￥" + vue.toDisplayString(item.overview.originalprice),
                          1
                          /* TEXT */
                        )
                      ], 8, ["onClick"])
                    ]);
                  }),
                  128
                  /* KEYED_FRAGMENT */
                )),
                vue.createElementVNode("view", {
                  class: "hotelItem1",
                  style: { "width": "20px", "height": "200rpx", "background": "transparent" }
                })
              ])
            ])) : vue.createCommentVNode("v-if", true)
          ])
        ],
        32
        /* HYDRATE_EVENTS */
      )
    ]);
  }
  const PagesLandLordDetailLandLordDetail = /* @__PURE__ */ _export_sfc(_sfc_main$l, [["render", _sfc_render$k], ["__file", "D:/HLTrip/hl/pages/landLordDetail/landLordDetail.vue"]]);
  const _sfc_main$k = {
    data() {
      return {
        searchText: "",
        startTime: {},
        endTime: {},
        stayRange: 1,
        locationText: "我的附近",
        room_condition: null,
        people_condition: null,
        bed_condition: null,
        distance_condition: null,
        maxPrice: null,
        minPrice: null,
        rec_index: 0,
        price_index: null,
        room_index: null,
        people_index: null,
        bed_index: null,
        distance_index: null,
        distance: null,
        rec_textArr: ["推荐排序", "距离优先", "价格升序", "价格降序", "评论优先"],
        distance_text: "位置区域",
        maxPrice_cache: null,
        minPrice_cache: null,
        facDataCache: {
          room_count: null,
          bed_count: null,
          maxPeople: null
        },
        page: 1,
        maxPage: null,
        houseInfo: [],
        total: 0,
        shownomore: false,
        showEmpty: false
      };
    },
    methods: {
      likeHotel(item) {
        formatAppLog("log", "at pages/searchDetail/searchDetail.vue:233", "likehouse");
        item.islike = !item.islike;
        uni.request({
          url: `${API.BASE_URL}/favorHouse`,
          data: {
            houseid: item.overview.houseid,
            userid: uni.getStorageSync("userId")
          }
        });
      },
      selectCity() {
        uni.navigateTo({
          url: "/pages/selectCity/selectCity"
        });
      },
      getTime(dateObj) {
        const year = dateObj.getFullYear();
        const month = dateObj.getMonth() + 1;
        const date2 = dateObj.getDate();
        const day = dateObj.getDay();
        return {
          year,
          month: month.toString().padStart(2, "0"),
          date: date2.toString().padStart(2, "0"),
          day,
          arr: ["日", "一", "二", "三", "四", "五", "六"],
          timestamp: dateObj
        };
      },
      openSortpop() {
        this.$refs.facpopup.close();
        this.$refs.pricepopup.close();
        this.$refs.distancepopup.close();
        this.$refs.sortpopup.open("top");
      },
      openDistpop() {
        this.$refs.facpopup.close();
        this.$refs.pricepopup.close();
        this.$refs.sortpopup.close();
        this.$refs.distancepopup.open("top");
      },
      openPricpop() {
        this.$refs.facpopup.close();
        this.$refs.distancepopup.close();
        this.$refs.sortpopup.close();
        this.$refs.pricepopup.open("top");
      },
      openFacpop() {
        this.$refs.pricepopup.close();
        this.$refs.distancepopup.close();
        this.$refs.sortpopup.close();
        this.$refs.facpopup.open("top");
      },
      selectSort(index2) {
        this.rec_index = index2;
        this.$refs.sortpopup.close();
      },
      selectDistance(item) {
        if (item == this.distance_index) {
          this.distance_index = null;
          this.distance_text = "位置区域";
          this.distance_condition = null;
        } else {
          this.distance_index = item;
          this.distance_text = `距您${item}公里`;
          this.distance_condition = item;
        }
        this.$refs.distancepopup.close();
      },
      selectPrice(minPrice, maxPrice, index2) {
        formatAppLog("log", "at pages/searchDetail/searchDetail.vue:305", 222);
        if (this.minPrice_cache == minPrice && this.maxPrice_cache == maxPrice) {
          this.maxPrice_cache = null;
          this.minPrice_cache = null;
          this.price_index = null;
        } else {
          this.maxPrice_cache = maxPrice;
          this.minPrice_cache = minPrice;
          this.price_index = index2;
        }
      },
      closePricePop(e) {
        if (!e.show) {
          if (this.maxPrice == null && this.minPrice == null) {
            this.price_index = null;
            this.maxPrice_cache = null;
            this.minPrice_cache = null;
          }
        }
      },
      confirmPrice() {
        this.minPrice = this.minPrice_cache;
        this.maxPrice = this.maxPrice_cache;
        this.houseInfo = [];
        this.page = 1;
        this.getRecommendData();
        this.$refs.pricepopup.close();
      },
      clearPrice() {
        this.maxPrice = null;
        this.minPrice = null;
        this.price_index = null;
        this.maxPrice_cache = null;
        this.minPrice_cache = null;
      },
      selectRoom(index2) {
        if (index2 == this.facDataCache.room_count) {
          this.facDataCache.room_count = null;
          this.room_index = null;
        } else {
          this.facDataCache.room_count = index2;
          this.room_index = index2;
        }
      },
      selectPeople(index2) {
        if (index2 == this.facDataCache.maxPeople) {
          this.facDataCache.maxPeople = null;
          this.people_index = null;
        } else {
          this.facDataCache.maxPeople = index2;
          this.people_index = index2;
        }
      },
      selectBed(item) {
        if (item == this.facDataCache.bed_count) {
          this.facDataCache.bed_count = null;
          this.bed_index = null;
        } else {
          this.facDataCache.bed_count = item;
          this.bed_index = item;
        }
      },
      closeFacpop(e) {
        if (!e.show) {
          formatAppLog("log", "at pages/searchDetail/searchDetail.vue:370", this.hasFacCondition);
          formatAppLog("log", "at pages/searchDetail/searchDetail.vue:371", this.room_condition);
          formatAppLog("log", "at pages/searchDetail/searchDetail.vue:372", this.bed_condition);
          formatAppLog("log", "at pages/searchDetail/searchDetail.vue:373", this.people_condition);
          if (this.room_condition == null && this.bed_condition == null && this.people_condition == null) {
            this.room_index = null;
            this.bed_index = null;
            this.people_index = null;
            this.facDataCache = {
              room_count: null,
              bed_count: null,
              maxPeople: null
            };
          }
        }
      },
      confirmFac() {
        formatAppLog("log", "at pages/searchDetail/searchDetail.vue:387", 3);
        this.room_condition = this.facDataCache.room_count;
        this.people_condition = this.facDataCache.maxPeople;
        this.bed_condition = this.facDataCache.bed_count;
        formatAppLog("log", "at pages/searchDetail/searchDetail.vue:391", this.room_condition);
        formatAppLog("log", "at pages/searchDetail/searchDetail.vue:392", this.people_condition);
        formatAppLog("log", "at pages/searchDetail/searchDetail.vue:393", this.bed);
        this.houseInfo = [];
        this.page = 1;
        this.getRecommendData();
        this.$refs.facpopup.close();
      },
      clearFac() {
        this.room_condition = null;
        this.bed_condition = null;
        this.people_condition = null;
        this.people_index = null;
        this.bed_index = null;
        this.room_index = null;
        this.facDataCache = {
          room_count: null,
          bed_count: null,
          maxPeople: null
        };
      },
      getRecommendData() {
        this.shownomore = false;
        this.showEmpty = false;
        const locationArr = uni.getStorageSync("location").split(",");
        uni.request({
          url: `${API.BASE_URL}/getRecommendHouses`,
          //仅为示例，并非真实接口地址。
          data: {
            longitude: locationArr[0],
            latitude: locationArr[1],
            userid: uni.getStorageSync("userId"),
            page: this.page,
            maxPrice_c: this.maxPrice,
            minPrice_c: this.minPrice,
            bedcount_c: this.bed_condition,
            roomcount_c: this.room_condition,
            maxpeople_c: this.people_condition,
            distance_c: this.distance_condition
          },
          success: (res) => {
            const rdata = res.data.data;
            if (res.data.requestStatus == "300") {
              if (this.houseInfo.length == 0) {
                this.showEmpty = true;
              }
            } else {
              if (this.houseInfo.length != 0) {
                this.houseInfo = [
                  ...this.houseInfo,
                  ...rdata.houseInfo.sort((element1, element2) => {
                    return element2.recommendValue - element1.recommendValue;
                  })
                ];
              } else {
                this.houseInfo = rdata.houseInfo.sort((element1, element2) => {
                  return element2.recommendValue - element1.recommendValue;
                });
                this.total = rdata.total;
              }
            }
            this.page = this.page + 1;
          }
        });
      },
      toHouseDetail(houseid) {
        uni.navigateTo({
          url: `/pages/hotelDetail/hotelDetail?houseid=${houseid}`
        });
      },
      getMoreHouse() {
        formatAppLog("log", "at pages/searchDetail/searchDetail.vue:464", this.maxpage);
        if (this.maxpage >= this.page) {
          this.getRecommendData();
        } else {
          formatAppLog("log", "at pages/searchDetail/searchDetail.vue:469", "no more");
          this.shownomore = true;
        }
      },
      handleSort() {
        if (this.rec_index == 0) {
          this.houseInfo = this.houseInfo.sort((element1, element2) => {
            return element2.recommendValue - element1.recommendValue;
          });
        } else if (this.rec_index == 1) {
          this.houseInfo = this.houseInfo.sort((element1, element2) => {
            return element1.distance - element2.distance;
          });
        } else if (this.rec_index == 2) {
          this.houseInfo = this.houseInfo.sort((element1, element2) => {
            return element1.overview.discountprice - element2.overview.discountprice;
          });
        } else if (this.rec_index == 3) {
          this.houseInfo = this.houseInfo.sort((element1, element2) => {
            return element2.overview.discountprice - element1.overview.discountprice;
          });
        } else if (this.rec_index == 4) {
          this.houseInfo = this.houseInfo.sort((element1, element2) => {
            return element2.overview.commentcount - element1.overview.commentcount;
          });
        }
      },
      handleDistance() {
        if (this.distance_index != null) {
          this.distance_condition == null;
          this.distance_condition = this.distance_index * 1e3;
          this.houseInfo = [];
          this.rec_index = 0;
          this.page = 1;
          this.getRecommendData();
        } else {
          formatAppLog("log", "at pages/searchDetail/searchDetail.vue:505", this.distance_condition);
          this.houseInfo = [];
          this.rec_index = 0;
          this.page = 1;
          this.getRecommendData();
        }
      },
      toSearch() {
        uni.removeStorageSync("searchText");
        uni.navigateTo({
          url: "/pages/search/search"
        });
      }
    },
    computed: {
      hasFacCondition() {
        if (this.room_condition == null && this.bed_condition == null && this.people_condition == null) {
          return false;
        } else {
          return true;
        }
      },
      maxpage() {
        return Math.ceil(this.total / 10);
      }
    },
    onLoad() {
      const storageInfo = uni.getStorageInfoSync();
      const hasST = storageInfo.keys.includes("searchText");
      if (hasST) {
        this.searchText = uni.getStorageSync("searchText");
      }
      const startExists = storageInfo.keys.includes("startTime");
      const endExists = storageInfo.keys.includes("startTime");
      const stayRangeExist = storageInfo.keys.includes("stayRange");
      if (startExists && endExists) {
        this.startTime = uni.getStorageSync("startTime");
        this.endTime = uni.getStorageSync("endTime");
        if (this.startTime <= /* @__PURE__ */ new Date()) {
          const today = /* @__PURE__ */ new Date();
          this.startTime = this.getTime(today);
          const nextDay = /* @__PURE__ */ new Date();
          nextDay.setDate(nextDay.getDate() + 1);
          this.endTime = this.getTime(nextDay);
          uni.setStorageSync("startTime", this.startTime);
          uni.setStorageSync("endTime", this.endTime);
        }
      } else {
        const today = /* @__PURE__ */ new Date();
        this.startTime = this.getTime(today);
        const nextDay = /* @__PURE__ */ new Date();
        nextDay.setDate(nextDay.getDate() + 1);
        this.endTime = this.getTime(nextDay);
        uni.setStorageSync("startTime", this.startTime);
        uni.setStorageSync("endTime", this.endTime);
      }
      if (!stayRangeExist) {
        uni.setStorageSync("stayRange", 1);
      }
      if (storageInfo.keys.includes("locationText")) {
        this.locationText = uni.getStorageSync("locationText");
      }
      this.getRecommendData();
      this.$watch("rec_index", this.handleSort);
      this.$watch("distance_index", this.handleDistance);
    }
  };
  function _sfc_render$j(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_uni_popup = resolveEasycom(vue.resolveDynamicComponent("uni-popup"), __easycom_1$2);
    return vue.openBlock(), vue.createElementBlock("view", { class: "root_ctn" }, [
      vue.createElementVNode("view", { class: "searchBar fixed" }, [
        vue.createElementVNode("view", { class: "topbar" }),
        vue.createElementVNode("view", { class: "fix-searchbar" }, [
          vue.createElementVNode("view", { class: "wrapper" }, [
            vue.createElementVNode("view", { class: "left" }, [
              vue.createElementVNode(
                "view",
                {
                  class: "location",
                  onClick: _cache[0] || (_cache[0] = (...args) => $options.selectCity && $options.selectCity(...args))
                },
                vue.toDisplayString($data.locationText),
                1
                /* TEXT */
              ),
              vue.createElementVNode("view", { class: "checkTime" }, [
                vue.createElementVNode("view", { class: "top" }, [
                  vue.createElementVNode("text", { class: "desc" }, "住"),
                  vue.createElementVNode(
                    "text",
                    { class: "date" },
                    vue.toDisplayString($data.startTime.month) + "-" + vue.toDisplayString($data.startTime.date),
                    1
                    /* TEXT */
                  )
                ]),
                vue.createElementVNode("div", { class: "bottom" }, [
                  vue.createElementVNode("text", { class: "desc" }, "离"),
                  vue.createElementVNode(
                    "text",
                    { class: "date" },
                    vue.toDisplayString($data.endTime.month) + "-" + vue.toDisplayString($data.endTime.date),
                    1
                    /* TEXT */
                  )
                ])
              ]),
              vue.createElementVNode("view", {
                class: "input",
                onClick: _cache[1] || (_cache[1] = (...args) => $options.toSearch && $options.toSearch(...args))
              }, [
                !$data.searchText ? (vue.openBlock(), vue.createElementBlock("text", { key: 0 }, "位置/民宿/关键字")) : vue.createCommentVNode("v-if", true),
                $data.searchText ? (vue.openBlock(), vue.createElementBlock(
                  "text",
                  {
                    key: 1,
                    style: { "color": "#333", "font-weight": "900" }
                  },
                  vue.toDisplayString($data.searchText),
                  1
                  /* TEXT */
                )) : vue.createCommentVNode("v-if", true)
              ]),
              vue.createElementVNode("view", { class: "searchBtn" }, "搜索")
            ])
          ])
        ]),
        vue.createElementVNode("view", { class: "conditions" }, [
          vue.createElementVNode(
            "view",
            {
              class: vue.normalizeClass(["sortCondition c_item", { "conditionSelected": $data.rec_index != 0 }]),
              onClick: _cache[2] || (_cache[2] = (...args) => $options.openSortpop && $options.openSortpop(...args))
            },
            vue.toDisplayString($data.rec_textArr[$data.rec_index]),
            3
            /* TEXT, CLASS */
          ),
          vue.createElementVNode(
            "view",
            {
              class: vue.normalizeClass(["priceCondition c_item", { "conditionSelected": $data.maxPrice != null || $data.minPrice != null }]),
              onClick: _cache[3] || (_cache[3] = (...args) => $options.openPricpop && $options.openPricpop(...args))
            },
            "价格范围",
            2
            /* CLASS */
          ),
          vue.createElementVNode(
            "view",
            {
              class: vue.normalizeClass(["distanceCondition c_item", { "conditionSelected": $data.distance_index != null }]),
              onClick: _cache[4] || (_cache[4] = (...args) => $options.openDistpop && $options.openDistpop(...args))
            },
            vue.toDisplayString($data.distance_text),
            3
            /* TEXT, CLASS */
          ),
          vue.createElementVNode(
            "view",
            {
              class: vue.normalizeClass(["facCondition c_item", { "conditionSelected": $options.hasFacCondition }]),
              onClick: _cache[5] || (_cache[5] = (...args) => $options.openFacpop && $options.openFacpop(...args))
            },
            "筛选条件",
            2
            /* CLASS */
          )
        ])
      ]),
      vue.createCommentVNode(" 房屋展示 "),
      $data.houseInfo.length != 0 ? (vue.openBlock(), vue.createElementBlock("view", {
        key: 0,
        class: "house-content"
      }, [
        vue.createElementVNode("view", { class: "contentMargin" }),
        vue.createElementVNode(
          "scroll-view",
          {
            "scroll-y": "true",
            class: "houseList",
            onScrolltolower: _cache[6] || (_cache[6] = (...args) => $options.getMoreHouse && $options.getMoreHouse(...args))
          },
          [
            (vue.openBlock(true), vue.createElementBlock(
              vue.Fragment,
              null,
              vue.renderList($data.houseInfo, (house, index2) => {
                return vue.openBlock(), vue.createElementBlock("view", {
                  class: "houseItem",
                  key: index2
                }, [
                  vue.createElementVNode("view", { class: "cover" }, [
                    vue.createElementVNode("swiper", {
                      class: "swiper",
                      circular: "",
                      autoplay: false
                    }, [
                      (vue.openBlock(true), vue.createElementBlock(
                        vue.Fragment,
                        null,
                        vue.renderList(house.coverurls, (cover, index3) => {
                          return vue.openBlock(), vue.createElementBlock("swiper-item", null, [
                            vue.createElementVNode("view", { class: "swiper-item" }, [
                              vue.createElementVNode("image", {
                                src: cover,
                                class: "coverPic",
                                mode: "aspectFill",
                                onClick: ($event) => $options.toHouseDetail(house.overview.houseid)
                              }, null, 8, ["src", "onClick"])
                            ])
                          ]);
                        }),
                        256
                        /* UNKEYED_FRAGMENT */
                      ))
                    ]),
                    vue.createElementVNode("view", { class: "iconGroup" }, [
                      !house.islike ? (vue.openBlock(), vue.createElementBlock("image", {
                        key: 0,
                        class: "like bright",
                        onClick: ($event) => $options.likeHotel(house),
                        src: "/static/image/icon/like.png"
                      }, null, 8, ["onClick"])) : vue.createCommentVNode("v-if", true),
                      house.islike ? (vue.openBlock(), vue.createElementBlock("image", {
                        key: 1,
                        class: "like",
                        onClick: ($event) => $options.likeHotel(house),
                        src: "/static/image/icon/like-active.png"
                      }, null, 8, ["onClick"])) : vue.createCommentVNode("v-if", true)
                    ]),
                    vue.createElementVNode(
                      "view",
                      { class: "distance" },
                      "距离您约" + vue.toDisplayString(house.distance.toFixed(1)) + "米",
                      1
                      /* TEXT */
                    )
                  ]),
                  vue.createElementVNode("view", { class: "avatar" }, [
                    vue.createElementVNode("image", {
                      class: "avatarPic",
                      src: house.landlordAvatar,
                      mode: "aspectFill"
                    }, null, 8, ["src"])
                  ]),
                  vue.createElementVNode("view", { class: "desc left20" }, [
                    vue.createElementVNode(
                      "view",
                      { class: "favorDesc" },
                      vue.toDisplayString(house.overview.favoritecount) + "人收藏",
                      1
                      /* TEXT */
                    ),
                    vue.createElementVNode(
                      "view",
                      { class: "commentDesc" },
                      vue.toDisplayString(house.overview.commentcount) + "条评论",
                      1
                      /* TEXT */
                    )
                  ]),
                  vue.createElementVNode(
                    "view",
                    { class: "rating" },
                    vue.toDisplayString(house.overview.rating.toFixed(1)),
                    1
                    /* TEXT */
                  ),
                  vue.createElementVNode(
                    "view",
                    { class: "housename left20" },
                    vue.toDisplayString(house.overview.housename),
                    1
                    /* TEXT */
                  ),
                  vue.createElementVNode(
                    "view",
                    { class: "facs left20" },
                    vue.toDisplayString(house.overview.roomcount) + "室" + vue.toDisplayString(house.overview.bathroomcount) + "卫·" + vue.toDisplayString(house.overview.bedcount) + "床·宜居" + vue.toDisplayString(house.overview.maxguests) + "人",
                    1
                    /* TEXT */
                  ),
                  vue.createElementVNode("view", { class: "priceMoudle left20" }, [
                    vue.createElementVNode("text", { class: "rmb" }, "￥"),
                    vue.createElementVNode(
                      "text",
                      { class: "disprice" },
                      vue.toDisplayString(house.overview.discountprice),
                      1
                      /* TEXT */
                    ),
                    vue.createElementVNode("text", { class: "per9" }, "/晚"),
                    vue.createElementVNode(
                      "del",
                      { class: "orgprice" },
                      "￥" + vue.toDisplayString(house.overview.originalprice),
                      1
                      /* TEXT */
                    ),
                    vue.createElementVNode(
                      "text",
                      { class: "reduce" },
                      "已减" + vue.toDisplayString(house.overview.originalprice - house.overview.discountprice) + "元",
                      1
                      /* TEXT */
                    ),
                    vue.createElementVNode("text", { class: "tag" }, "早鸟特惠")
                  ])
                ]);
              }),
              128
              /* KEYED_FRAGMENT */
            )),
            $data.shownomore ? (vue.openBlock(), vue.createElementBlock("view", {
              key: 0,
              class: "nomore"
            }, "-没有更多了-")) : vue.createCommentVNode("v-if", true),
            vue.createElementVNode("view", { class: "bottomMarginBolck" })
          ],
          32
          /* HYDRATE_EVENTS */
        )
      ])) : vue.createCommentVNode("v-if", true),
      vue.createCommentVNode(" 无结果 "),
      $data.showEmpty ? (vue.openBlock(), vue.createElementBlock("view", {
        key: 1,
        class: "empty"
      }, [
        vue.createElementVNode("image", {
          src: "/static/image/empty_bg.png",
          mode: ""
        }),
        vue.createElementVNode("text", { class: "desc" }, "暂无数据")
      ])) : vue.createCommentVNode("v-if", true),
      vue.createCommentVNode(" 提示信息弹窗 "),
      vue.createVNode(
        _component_uni_popup,
        {
          ref: "sortpopup",
          "background-color": "#fff",
          "border-radius": "0 0 20rpx 20rpx"
        },
        {
          default: vue.withCtx(() => [
            vue.createElementVNode("view", { class: "sort_popup_content" }, [
              vue.createElementVNode("view", { class: "marginblock" }),
              vue.createElementVNode("view", { class: "text_content" }, [
                (vue.openBlock(true), vue.createElementBlock(
                  vue.Fragment,
                  null,
                  vue.renderList($data.rec_textArr, (item, index2) => {
                    return vue.openBlock(), vue.createElementBlock("view", {
                      class: vue.normalizeClass(["sort_item", { "selected": $data.rec_index == index2 }]),
                      onClick: ($event) => $options.selectSort(index2),
                      key: index2
                    }, [
                      vue.createElementVNode(
                        "view",
                        null,
                        vue.toDisplayString($data.rec_textArr[index2]),
                        1
                        /* TEXT */
                      ),
                      vue.createElementVNode("image", {
                        class: "selectIco",
                        src: "/static/image/icon/selected.png",
                        mode: "aspectFit"
                      })
                    ], 10, ["onClick"]);
                  }),
                  128
                  /* KEYED_FRAGMENT */
                ))
              ])
            ])
          ]),
          _: 1
          /* STABLE */
        },
        512
        /* NEED_PATCH */
      ),
      vue.createCommentVNode(" 距离筛选  和上面共用一套样式"),
      vue.createVNode(
        _component_uni_popup,
        {
          ref: "distancepopup",
          "background-color": "#fff",
          "border-radius": "0 0 20rpx 20rpx"
        },
        {
          default: vue.withCtx(() => [
            vue.createElementVNode("view", { class: "sort_popup_content" }, [
              vue.createElementVNode("view", { class: "marginblock" }),
              vue.createElementVNode("view", { class: "text_content" }, [
                (vue.openBlock(), vue.createElementBlock(
                  vue.Fragment,
                  null,
                  vue.renderList(5, (item) => {
                    return vue.createElementVNode("view", {
                      class: vue.normalizeClass(["sort_item", { "selected": $data.distance_index == item }]),
                      onClick: ($event) => $options.selectDistance(item)
                    }, [
                      vue.createElementVNode(
                        "view",
                        null,
                        "距您" + vue.toDisplayString(item) + "公里",
                        1
                        /* TEXT */
                      ),
                      vue.createElementVNode("image", {
                        class: "selectIco",
                        src: "/static/image/icon/selected.png",
                        mode: "aspectFit"
                      })
                    ], 10, ["onClick"]);
                  }),
                  64
                  /* STABLE_FRAGMENT */
                ))
              ])
            ])
          ]),
          _: 1
          /* STABLE */
        },
        512
        /* NEED_PATCH */
      ),
      vue.createCommentVNode(" 价格筛选  "),
      vue.createVNode(_component_uni_popup, {
        ref: "pricepopup",
        "background-color": "#fff",
        "border-radius": "0 0 20rpx 20rpx",
        onChange: $options.closePricePop
      }, {
        default: vue.withCtx(() => [
          vue.createElementVNode("view", { class: "price_popup_content" }, [
            vue.createElementVNode("view", { class: "marginblock" }),
            vue.createElementVNode("view", { class: "price_content" }, [
              vue.createElementVNode(
                "view",
                {
                  class: vue.normalizeClass(["price_item", { "selected2": $data.price_index == 0 }]),
                  onClick: _cache[7] || (_cache[7] = ($event) => $options.selectPrice(null, 150, 0))
                },
                "￥150以下",
                2
                /* CLASS */
              ),
              vue.createElementVNode(
                "view",
                {
                  class: vue.normalizeClass(["price_item", { "selected2": $data.price_index == 1 }]),
                  onClick: _cache[8] || (_cache[8] = ($event) => $options.selectPrice(150, 200, 1))
                },
                "￥150-￥200",
                2
                /* CLASS */
              ),
              vue.createElementVNode(
                "view",
                {
                  class: vue.normalizeClass(["price_item", { "selected2": $data.price_index == 2 }]),
                  onClick: _cache[9] || (_cache[9] = ($event) => $options.selectPrice(200, 300, 2))
                },
                "￥200-￥300",
                2
                /* CLASS */
              ),
              vue.createElementVNode(
                "view",
                {
                  class: vue.normalizeClass(["price_item", { "selected2": $data.price_index == 3 }]),
                  onClick: _cache[10] || (_cache[10] = ($event) => $options.selectPrice(300, 400, 3))
                },
                "￥300-￥400",
                2
                /* CLASS */
              ),
              vue.createElementVNode(
                "view",
                {
                  class: vue.normalizeClass(["price_item", { "selected2": $data.price_index == 4 }]),
                  onClick: _cache[11] || (_cache[11] = ($event) => $options.selectPrice(400, 600, 4))
                },
                "￥400-￥600",
                2
                /* CLASS */
              ),
              vue.createElementVNode(
                "view",
                {
                  class: vue.normalizeClass(["price_item", { "selected2": $data.price_index == 5 }]),
                  onClick: _cache[12] || (_cache[12] = ($event) => $options.selectPrice(600, null, 5))
                },
                "￥600以上",
                2
                /* CLASS */
              )
            ]),
            vue.createElementVNode("view", { class: "priceOption" }, [
              vue.createElementVNode("text", {
                class: "priceCancle",
                onClick: _cache[13] || (_cache[13] = (...args) => $options.clearPrice && $options.clearPrice(...args))
              }, "清空"),
              vue.createElementVNode("view", {
                class: "priceConfirm",
                onClick: _cache[14] || (_cache[14] = (...args) => $options.confirmPrice && $options.confirmPrice(...args))
              }, "确定")
            ])
          ])
        ]),
        _: 1
        /* STABLE */
      }, 8, ["onChange"]),
      vue.createCommentVNode(" 设施筛选  "),
      vue.createVNode(_component_uni_popup, {
        ref: "facpopup",
        "background-color": "#fff",
        "border-radius": "0 0 20rpx 20rpx",
        onChange: $options.closeFacpop
      }, {
        default: vue.withCtx(() => [
          vue.createElementVNode("view", { class: "fac_popup_content" }, [
            vue.createElementVNode("view", { class: "marginblock" }),
            vue.createElementVNode("scroll-view", { class: "fac_content" }, [
              vue.createElementVNode("view", { class: "peopleCount-wrapper" }, [
                vue.createElementVNode("view", { class: "title" }, "房源户型"),
                vue.createElementVNode("view", { class: "peopleCount" }, [
                  vue.createElementVNode("view", { class: "pCount" }, [
                    vue.createElementVNode(
                      "view",
                      {
                        class: vue.normalizeClass(["pCountItem", { "selected2": $data.room_index == 1 }]),
                        onClick: _cache[15] || (_cache[15] = ($event) => $options.selectRoom(1))
                      },
                      " 一室 ",
                      2
                      /* CLASS */
                    ),
                    vue.createElementVNode(
                      "view",
                      {
                        class: vue.normalizeClass(["pCountItem", { "selected2": $data.room_index == 2 }]),
                        onClick: _cache[16] || (_cache[16] = ($event) => $options.selectRoom(2))
                      },
                      " 二室 ",
                      2
                      /* CLASS */
                    ),
                    vue.createElementVNode(
                      "view",
                      {
                        class: vue.normalizeClass(["pCountItem", { "selected2": $data.room_index == 3 }]),
                        onClick: _cache[17] || (_cache[17] = ($event) => $options.selectRoom(3))
                      },
                      " 三室 ",
                      2
                      /* CLASS */
                    ),
                    vue.createElementVNode(
                      "view",
                      {
                        class: vue.normalizeClass(["pCountItem", { "selected2": $data.room_index == 4 }]),
                        onClick: _cache[18] || (_cache[18] = ($event) => $options.selectRoom(4))
                      },
                      " 四室及以上 ",
                      2
                      /* CLASS */
                    )
                  ])
                ])
              ]),
              vue.createElementVNode("view", { class: "peopleCount-wrapper bedCount" }, [
                vue.createElementVNode("view", { class: "title" }, "宜居人数"),
                vue.createElementVNode("view", { class: "peopleCount" }, [
                  vue.createElementVNode("view", { class: "pCount" }, [
                    (vue.openBlock(), vue.createElementBlock(
                      vue.Fragment,
                      null,
                      vue.renderList(10, (item) => {
                        return vue.createElementVNode("view", {
                          class: vue.normalizeClass(["pCountItem", { "selected2": $data.people_index == item }]),
                          onClick: ($event) => $options.selectPeople(item)
                        }, vue.toDisplayString(item) + "人", 11, ["onClick"]);
                      }),
                      64
                      /* STABLE_FRAGMENT */
                    )),
                    vue.createElementVNode(
                      "view",
                      {
                        class: vue.normalizeClass(["pCountItem", { "selected2": $data.people_index == 11 }]),
                        onClick: _cache[19] || (_cache[19] = ($event) => $options.selectPeople(11))
                      },
                      "10人+",
                      2
                      /* CLASS */
                    ),
                    vue.createElementVNode("i")
                  ])
                ])
              ]),
              vue.createElementVNode("view", { class: "peopleCount-wrapper bedCount" }, [
                vue.createElementVNode("view", { class: "title" }, "床铺数量"),
                vue.createElementVNode("view", { class: "peopleCount" }, [
                  vue.createElementVNode("view", { class: "pCount" }, [
                    (vue.openBlock(), vue.createElementBlock(
                      vue.Fragment,
                      null,
                      vue.renderList(10, (item) => {
                        return vue.createElementVNode("view", {
                          class: vue.normalizeClass(["pCountItem", { "selected2": $data.bed_index == item }]),
                          onClick: ($event) => $options.selectBed(item)
                        }, vue.toDisplayString(item) + "张", 11, ["onClick"]);
                      }),
                      64
                      /* STABLE_FRAGMENT */
                    )),
                    vue.createElementVNode(
                      "view",
                      {
                        class: vue.normalizeClass(["pCountItem", { "selected2": $data.bed_index == 11 }]),
                        onClick: _cache[20] || (_cache[20] = ($event) => $options.selectBed(11))
                      },
                      "10张+",
                      2
                      /* CLASS */
                    ),
                    vue.createElementVNode("i")
                  ])
                ])
              ])
            ]),
            vue.createElementVNode("view", { class: "facOption" }, [
              vue.createElementVNode("text", {
                class: "facCancle",
                onClick: _cache[21] || (_cache[21] = (...args) => $options.clearFac && $options.clearFac(...args))
              }, "清空"),
              vue.createElementVNode("view", {
                class: "facConfirm",
                onClick: _cache[22] || (_cache[22] = (...args) => $options.confirmFac && $options.confirmFac(...args))
              }, "确定")
            ])
          ])
        ]),
        _: 1
        /* STABLE */
      }, 8, ["onChange"])
    ]);
  }
  const PagesSearchDetailSearchDetail = /* @__PURE__ */ _export_sfc(_sfc_main$k, [["render", _sfc_render$j], ["__file", "D:/HLTrip/hl/pages/searchDetail/searchDetail.vue"]]);
  const _id = "62dcb140481ca95ea02a8901";
  const trace = null;
  const referTraceId = "1658630387378w90E5HCN_TniyZRFbJKdZJkCdb8fYhNfDz79E";
  const ver = "1.0";
  const ret = true;
  const errmsg = null;
  const errTip = null;
  const errcode = 0;
  const data = {
    cityGroup: {
      title: "国内·港澳台",
      hotCities: [
        {
          id: 48,
          cityName: "北京",
          pinYin: "beijing",
          gangAoTai: false,
          hot: false,
          longitude: "116.414",
          latitude: "39.9108"
        },
        {
          id: 10,
          cityName: "成都",
          pinYin: "chengdu",
          gangAoTai: false,
          hot: false,
          longitude: "104.082",
          latitude: "30.6571"
        },
        {
          id: 23,
          cityName: "上海",
          pinYin: "shanghai",
          gangAoTai: false,
          hot: false,
          longitude: "121.48",
          latitude: "31.2364"
        },
        {
          id: 22,
          cityName: "重庆",
          pinYin: "chongqing",
          gangAoTai: false,
          hot: false,
          longitude: "106.557",
          latitude: "29.5713"
        },
        {
          id: 45,
          cityName: "广州",
          pinYin: "guangzhou",
          gangAoTai: false,
          hot: false,
          longitude: "113.271",
          latitude: "23.1354"
        },
        {
          id: 1,
          cityName: "三亚",
          pinYin: "sanya",
          gangAoTai: false,
          hot: false,
          longitude: "109.518",
          latitude: "18.2584"
        },
        {
          id: 17,
          cityName: "西安",
          pinYin: "xian",
          gangAoTai: false,
          hot: false,
          longitude: "108.946",
          latitude: "34.3473"
        },
        {
          id: 33,
          cityName: "厦门",
          pinYin: "xiamen",
          gangAoTai: false,
          hot: false,
          longitude: "118.096",
          latitude: "24.4859"
        },
        {
          id: 12,
          cityName: "丽江",
          pinYin: "lijiang",
          gangAoTai: false,
          hot: false,
          longitude: "100.233",
          latitude: "26.8608"
        },
        {
          id: 7,
          cityName: "杭州",
          pinYin: "hangzhou",
          gangAoTai: false,
          hot: false,
          longitude: "120.162",
          latitude: "30.279"
        },
        {
          id: 8,
          cityName: "青岛",
          pinYin: "qingdao",
          gangAoTai: false,
          hot: false,
          longitude: "120.389",
          latitude: "36.0737"
        },
        {
          id: 36,
          cityName: "大理州",
          pinYin: "dali",
          gangAoTai: false,
          hot: false,
          longitude: "100.237",
          latitude: "25.5977"
        },
        {
          id: 55,
          cityName: "武汉",
          pinYin: "wuhan",
          gangAoTai: false,
          hot: false,
          longitude: "114.312",
          latitude: "30.5984"
        },
        {
          id: 9,
          cityName: "南京",
          pinYin: "nanjing",
          gangAoTai: false,
          hot: false,
          longitude: "118.803",
          latitude: "32.0648"
        },
        {
          id: 49,
          cityName: "深圳",
          pinYin: "shenzhen",
          gangAoTai: false,
          hot: false,
          longitude: "114.066",
          latitude: "22.5493"
        },
        {
          id: 63,
          cityName: "长沙",
          pinYin: "changsha",
          gangAoTai: false,
          hot: false,
          longitude: "112.945",
          latitude: "28.2339"
        },
        {
          id: 11,
          cityName: "苏州",
          pinYin: "suzhou",
          gangAoTai: false,
          hot: false,
          longitude: "120.592",
          latitude: "31.3057"
        },
        {
          id: 66,
          cityName: "天津",
          pinYin: "tianjin",
          gangAoTai: false,
          hot: false,
          longitude: "117.188",
          latitude: "39.1359"
        },
        {
          id: 31,
          cityName: "昆明",
          pinYin: "kunming",
          gangAoTai: false,
          hot: false,
          longitude: "102.84",
          latitude: "24.8859"
        },
        {
          id: 251,
          cityName: "北海",
          pinYin: "beihai",
          gangAoTai: false,
          hot: false,
          longitude: "109.133",
          latitude: "21.4753"
        }
      ],
      cities: [
        {
          group: "A",
          cities: [
            {
              id: 107,
              cityName: "阿坝",
              pinYin: "aba",
              gangAoTai: false,
              hot: false,
              longitude: "102.231",
              latitude: "31.9056"
            },
            {
              id: 374,
              cityName: "阿克苏",
              pinYin: "akesu",
              gangAoTai: false,
              hot: false,
              longitude: "80.2697",
              latitude: "41.1739"
            },
            {
              id: 267,
              cityName: "阿拉善",
              pinYin: "alashan",
              gangAoTai: false,
              hot: false,
              longitude: "105.731",
              latitude: "38.8129"
            },
            {
              id: 382,
              cityName: "阿勒泰",
              pinYin: "aletai",
              gangAoTai: false,
              hot: false,
              longitude: "88.1393",
              latitude: "47.8329"
            },
            {
              id: 397,
              cityName: "澳门",
              pinYin: "aomeny",
              gangAoTai: true,
              hot: false,
              longitude: "113.549",
              latitude: "22.1929"
            },
            {
              id: 307,
              cityName: "安康",
              pinYin: "ankang",
              gangAoTai: false,
              hot: false,
              longitude: "109.036",
              latitude: "32.6904"
            },
            {
              id: 227,
              cityName: "安庆",
              pinYin: "anqing",
              gangAoTai: false,
              hot: false,
              longitude: "117.071",
              latitude: "30.5509"
            },
            {
              id: 127,
              cityName: "鞍山",
              pinYin: "anshan",
              gangAoTai: false,
              hot: false,
              longitude: "123.001",
              latitude: "41.1149"
            },
            {
              id: 120,
              cityName: "安顺",
              pinYin: "anshun",
              gangAoTai: false,
              hot: false,
              longitude: "105.954",
              latitude: "26.2595"
            },
            {
              id: 173,
              cityName: "安阳",
              pinYin: "anyang",
              gangAoTai: false,
              hot: false,
              longitude: "114.4",
              latitude: "36.1035"
            }
          ]
        },
        {
          group: "B",
          cities: [
            {
              id: 196,
              cityName: "白城",
              pinYin: "baicheng",
              gangAoTai: false,
              hot: false,
              longitude: "122.845",
              latitude: "45.6255"
            },
            {
              id: 247,
              cityName: "百色",
              pinYin: "baise",
              gangAoTai: false,
              hot: false,
              longitude: "106.625",
              latitude: "23.908"
            },
            {
              id: 4052,
              cityName: "白沙",
              pinYin: "baisha",
              gangAoTai: false,
              hot: false,
              longitude: "109.458",
              latitude: "19.2315"
            },
            {
              id: 194,
              cityName: "白山",
              pinYin: "baishan",
              gangAoTai: false,
              hot: false,
              longitude: "126.43",
              latitude: "41.9391"
            },
            {
              id: 157,
              cityName: "保定",
              pinYin: "baoding",
              gangAoTai: false,
              hot: false,
              longitude: "115.471",
              latitude: "38.88"
            },
            {
              id: 302,
              cityName: "宝鸡",
              pinYin: "baoji",
              gangAoTai: false,
              hot: false,
              longitude: "107.245",
              latitude: "34.3687"
            },
            {
              id: 360,
              cityName: "保山",
              pinYin: "baoshan",
              gangAoTai: false,
              hot: false,
              longitude: "99.1495",
              latitude: "25.1124"
            },
            {
              id: 4054,
              cityName: "保亭",
              pinYin: "baoting",
              gangAoTai: false,
              hot: false,
              longitude: "109.709",
              latitude: "18.6452"
            },
            {
              id: 257,
              cityName: "包头",
              pinYin: "baotou",
              gangAoTai: false,
              hot: false,
              longitude: "109.847",
              latitude: "40.6636"
            },
            {
              id: 263,
              cityName: "巴彦淖尔",
              pinYin: "bayannaoer",
              gangAoTai: false,
              hot: false,
              longitude: "107.394",
              latitude: "40.7494"
            },
            {
              id: 377,
              cityName: "巴音郭楞",
              pinYin: "bayinguoleng",
              gangAoTai: false,
              hot: false,
              longitude: "86.1816",
              latitude: "41.7319"
            },
            {
              id: 105,
              cityName: "巴中",
              pinYin: "bazhong",
              gangAoTai: false,
              hot: false,
              longitude: "106.754",
              latitude: "31.8731"
            },
            {
              id: 251,
              cityName: "北海",
              pinYin: "beihai",
              gangAoTai: false,
              hot: false,
              longitude: "109.133",
              latitude: "21.4753"
            },
            {
              id: 48,
              cityName: "北京",
              pinYin: "beijing",
              gangAoTai: false,
              hot: false,
              longitude: "116.414",
              latitude: "39.9108"
            },
            {
              id: 225,
              cityName: "蚌埠",
              pinYin: "bengbu",
              gangAoTai: false,
              hot: false,
              longitude: "117.396",
              latitude: "32.9217"
            },
            {
              id: 134,
              cityName: "本溪",
              pinYin: "benxiln",
              gangAoTai: false,
              hot: false,
              longitude: "123.773",
              latitude: "41.3"
            },
            {
              id: 122,
              cityName: "毕节",
              pinYin: "bijie",
              gangAoTai: false,
              hot: false,
              longitude: "105.312",
              latitude: "27.3042"
            },
            {
              id: 214,
              cityName: "滨州",
              pinYin: "binzhou",
              gangAoTai: false,
              hot: false,
              longitude: "117.977",
              latitude: "37.3881"
            },
            {
              id: 379,
              cityName: "博尔塔拉",
              pinYin: "boertala",
              gangAoTai: false,
              hot: false,
              longitude: "82.0727",
              latitude: "44.9123"
            },
            {
              id: 236,
              cityName: "亳州",
              pinYin: "bozhou",
              gangAoTai: false,
              hot: false,
              longitude: "115.785",
              latitude: "33.8506"
            }
          ]
        },
        {
          group: "C",
          cities: [
            {
              id: 159,
              cityName: "沧州",
              pinYin: "cangzhou",
              gangAoTai: false,
              hot: false,
              longitude: "116.845",
              latitude: "38.3103"
            },
            {
              id: 189,
              cityName: "长春",
              pinYin: "changchun",
              gangAoTai: false,
              hot: false,
              longitude: "125.331",
              latitude: "43.8836"
            },
            {
              id: 338,
              cityName: "常德",
              pinYin: "changde",
              gangAoTai: false,
              hot: false,
              longitude: "111.705",
              latitude: "29.0377"
            },
            {
              id: 378,
              cityName: "昌吉",
              pinYin: "changji",
              gangAoTai: false,
              hot: false,
              longitude: "87.3149",
              latitude: "44.0168"
            },
            {
              id: 4051,
              cityName: "昌江",
              pinYin: "changjiang",
              gangAoTai: false,
              hot: false,
              longitude: "109.062",
              latitude: "19.3043"
            },
            {
              id: 63,
              cityName: "长沙",
              pinYin: "changsha",
              gangAoTai: false,
              hot: false,
              longitude: "112.945",
              latitude: "28.2339"
            },
            {
              id: 272,
              cityName: "长治",
              pinYin: "changzhi",
              gangAoTai: false,
              hot: false,
              longitude: "113.124",
              latitude: "36.201"
            },
            {
              id: 21,
              cityName: "常州",
              pinYin: "changzhou",
              gangAoTai: false,
              hot: false,
              longitude: "119.981",
              latitude: "31.816"
            },
            {
              id: 83,
              cityName: "潮州",
              pinYin: "chaozhou",
              gangAoTai: false,
              hot: false,
              longitude: "116.629",
              latitude: "23.6631"
            },
            {
              id: 158,
              cityName: "承德",
              pinYin: "chengde",
              gangAoTai: false,
              hot: false,
              longitude: "117.944",
              latitude: "40.9806"
            },
            {
              id: 10,
              cityName: "成都",
              pinYin: "chengdu",
              gangAoTai: false,
              hot: false,
              longitude: "104.082",
              latitude: "30.6571"
            },
            {
              id: 4047,
              cityName: "澄迈",
              pinYin: "chengmai",
              gangAoTai: false,
              hot: false,
              longitude: "110.014",
              latitude: "19.7446"
            },
            {
              id: 339,
              cityName: "郴州",
              pinYin: "chenzhou",
              gangAoTai: false,
              hot: false,
              longitude: "113.021",
              latitude: "25.7766"
            },
            {
              id: 259,
              cityName: "赤峰",
              pinYin: "chifeng",
              gangAoTai: false,
              hot: false,
              longitude: "118.894",
              latitude: "42.2639"
            },
            {
              id: 237,
              cityName: "池州",
              pinYin: "chizhou",
              gangAoTai: false,
              hot: false,
              longitude: "117.499",
              latitude: "30.6702"
            },
            {
              id: 22,
              cityName: "重庆",
              pinYin: "chongqing",
              gangAoTai: false,
              hot: false,
              longitude: "106.557",
              latitude: "29.5713"
            },
            {
              id: 254,
              cityName: "崇左",
              pinYin: "chongzuo",
              gangAoTai: false,
              hot: false,
              longitude: "107.372",
              latitude: "22.3831"
            },
            {
              id: 365,
              cityName: "楚雄",
              pinYin: "chuxiong",
              gangAoTai: false,
              hot: false,
              longitude: "101.552",
              latitude: "25.0389"
            },
            {
              id: 228,
              cityName: "滁州",
              pinYin: "chuzhou",
              gangAoTai: false,
              hot: false,
              longitude: "118.34",
              latitude: "32.2617"
            }
          ]
        },
        {
          group: "D",
          cities: [
            {
              id: 36,
              cityName: "大理州",
              pinYin: "dali",
              gangAoTai: false,
              hot: false,
              longitude: "100.237",
              latitude: "25.5977"
            },
            {
              id: 18,
              cityName: "大连",
              pinYin: "dalian",
              gangAoTai: false,
              hot: false,
              longitude: "121.621",
              latitude: "38.9193"
            },
            {
              id: 129,
              cityName: "丹东",
              pinYin: "dandong",
              gangAoTai: false,
              hot: false,
              longitude: "124.361",
              latitude: "40.0067"
            },
            {
              id: 3973,
              cityName: "儋州",
              pinYin: "danzhou",
              gangAoTai: false,
              hot: false,
              longitude: "109.583",
              latitude: "19.527"
            },
            {
              id: 202,
              cityName: "大庆",
              pinYin: "daqing",
              gangAoTai: false,
              hot: false,
              longitude: "125.118",
              latitude: "46.5941"
            },
            {
              id: 270,
              cityName: "大同",
              pinYin: "datong",
              gangAoTai: false,
              hot: false,
              longitude: "112.557",
              latitude: "37.8583"
            },
            {
              id: 209,
              cityName: "大兴安岭",
              pinYin: "daxinganling",
              gangAoTai: false,
              hot: false,
              longitude: "123.644",
              latitude: "52.5111"
            },
            {
              id: 96,
              cityName: "达州",
              pinYin: "dazhou",
              gangAoTai: false,
              hot: false,
              longitude: "107.475",
              latitude: "31.2144"
            },
            {
              id: 366,
              cityName: "德宏",
              pinYin: "dehong",
              gangAoTai: false,
              hot: false,
              longitude: "98.5915",
              latitude: "24.4375"
            },
            {
              id: 91,
              cityName: "德阳",
              pinYin: "deyang",
              gangAoTai: false,
              hot: false,
              longitude: "104.404",
              latitude: "31.1331"
            },
            {
              id: 219,
              cityName: "德州",
              pinYin: "dezhou",
              gangAoTai: false,
              hot: false,
              longitude: "116.365",
              latitude: "37.4415"
            },
            {
              id: 4049,
              cityName: "定安",
              pinYin: "dingan",
              gangAoTai: false,
              hot: false,
              longitude: "110.365",
              latitude: "19.6868"
            },
            {
              id: 296,
              cityName: "定西",
              pinYin: "dingxi",
              gangAoTai: false,
              hot: false,
              longitude: "104.633",
              latitude: "35.5865"
            },
            {
              id: 4062,
              cityName: "东方",
              pinYin: "dongfang",
              gangAoTai: false,
              hot: false,
              longitude: "108.658",
              latitude: "19.1011"
            },
            {
              id: 73,
              cityName: "东莞",
              pinYin: "dongguan",
              gangAoTai: false,
              hot: false,
              longitude: "113.758",
              latitude: "23.026"
            },
            {
              id: 211,
              cityName: "东营",
              pinYin: "dongying",
              gangAoTai: false,
              hot: false,
              longitude: "118.681",
              latitude: "37.44"
            },
            {
              id: 368,
              cityName: "迪庆",
              pinYin: "diqing",
              gangAoTai: false,
              hot: false,
              longitude: "99.66",
              latitude: "27.9217"
            }
          ]
        },
        {
          group: "E",
          cities: [
            {
              id: 261,
              cityName: "鄂尔多斯",
              pinYin: "eerduosi",
              gangAoTai: false,
              hot: false,
              longitude: "109.787",
              latitude: "39.6148"
            },
            {
              id: 330,
              cityName: "恩施",
              pinYin: "enshih",
              gangAoTai: false,
              hot: false,
              longitude: "109.495",
              latitude: "30.2779"
            },
            {
              id: 323,
              cityName: "鄂州",
              pinYin: "ezhou",
              gangAoTai: false,
              hot: false,
              longitude: "114.902",
              latitude: "30.3965"
            }
          ]
        },
        {
          group: "F",
          cities: [
            {
              id: 252,
              cityName: "防城港",
              pinYin: "fangchenggang",
              gangAoTai: false,
              hot: false,
              longitude: "108.361",
              latitude: "21.6936"
            },
            {
              id: 68,
              cityName: "佛山",
              pinYin: "foshan",
              gangAoTai: false,
              hot: false,
              longitude: "113.128",
              latitude: "23.0277"
            },
            {
              id: 128,
              cityName: "抚顺",
              pinYin: "fushunl",
              gangAoTai: false,
              hot: false,
              longitude: "123.964",
              latitude: "41.8869"
            },
            {
              id: 229,
              cityName: "阜阳",
              pinYin: "fuyanga",
              gangAoTai: false,
              hot: false,
              longitude: "115.821",
              latitude: "32.8962"
            },
            {
              id: 145,
              cityName: "福州",
              pinYin: "fuzhou",
              gangAoTai: false,
              hot: false,
              longitude: "119.303",
              latitude: "26.0718"
            },
            {
              id: 355,
              cityName: "抚州",
              pinYin: "fuzhou2",
              gangAoTai: false,
              hot: false,
              longitude: "116.39",
              latitude: "27.9477"
            }
          ]
        },
        {
          group: "G",
          cities: [
            {
              id: 299,
              cityName: "甘南",
              pinYin: "gannan",
              gangAoTai: false,
              hot: false,
              longitude: "102.918",
              latitude: "34.9892"
            },
            {
              id: 352,
              cityName: "赣州",
              pinYin: "ganzhou",
              gangAoTai: false,
              hot: false,
              longitude: "114.942",
              latitude: "25.8363"
            },
            {
              id: 108,
              cityName: "甘孜",
              pinYin: "ganzi",
              gangAoTai: false,
              hot: false,
              longitude: "101.969",
              latitude: "30.0541"
            },
            {
              id: 3996,
              cityName: "高雄",
              pinYin: "gaoxiong",
              gangAoTai: true,
              hot: false,
              longitude: "120.323",
              latitude: "22.6232"
            },
            {
              id: 102,
              cityName: "广安",
              pinYin: "guangan",
              gangAoTai: false,
              hot: false,
              longitude: "106.64",
              latitude: "30.462"
            },
            {
              id: 99,
              cityName: "广元",
              pinYin: "guangyuan",
              gangAoTai: false,
              hot: false,
              longitude: "105.849",
              latitude: "32.4418"
            },
            {
              id: 45,
              cityName: "广州",
              pinYin: "guangzhou",
              gangAoTai: false,
              hot: false,
              longitude: "113.271",
              latitude: "23.1354"
            },
            {
              id: 245,
              cityName: "贵港",
              pinYin: "guigang",
              gangAoTai: false,
              hot: false,
              longitude: "109.606",
              latitude: "23.1174"
            },
            {
              id: 32,
              cityName: "桂林",
              pinYin: "guilin",
              gangAoTai: false,
              hot: false,
              longitude: "110.296",
              latitude: "25.2799"
            },
            {
              id: 117,
              cityName: "贵阳",
              pinYin: "guiyang",
              gangAoTai: false,
              hot: false,
              longitude: "106.674",
              latitude: "26.6043"
            },
            {
              id: 285,
              cityName: "固原",
              pinYin: "guyuann",
              gangAoTai: false,
              hot: false,
              longitude: "106.249",
              latitude: "36.0216"
            }
          ]
        },
        {
          group: "H",
          cities: [
            {
              id: 64,
              cityName: "哈尔滨",
              pinYin: "haerbin",
              gangAoTai: false,
              hot: false,
              longitude: "126.542",
              latitude: "45.809"
            },
            {
              id: 311,
              cityName: "海北",
              pinYin: "haibeiqh",
              gangAoTai: false,
              hot: false,
              longitude: "100.909",
              latitude: "36.9609"
            },
            {
              id: 310,
              cityName: "海东",
              pinYin: "haidong",
              gangAoTai: false,
              hot: false,
              longitude: "102.111",
              latitude: "36.5085"
            },
            {
              id: 255,
              cityName: "海口",
              pinYin: "haikou",
              gangAoTai: false,
              hot: false,
              longitude: "110.336",
              latitude: "20.0217"
            },
            {
              id: 313,
              cityName: "海南州",
              pinYin: "hainanzhou",
              gangAoTai: false,
              hot: false,
              longitude: "100.627",
              latitude: "36.2922"
            },
            {
              id: 316,
              cityName: "海西",
              pinYin: "haixi",
              gangAoTai: false,
              hot: false,
              longitude: "97.3675",
              latitude: "37.3753"
            },
            {
              id: 372,
              cityName: "哈密",
              pinYin: "hami",
              gangAoTai: false,
              hot: false,
              longitude: "93.5221",
              latitude: "42.8244"
            },
            {
              id: 155,
              cityName: "邯郸",
              pinYin: "handan",
              gangAoTai: false,
              hot: false,
              longitude: "114.546",
              latitude: "36.6311"
            },
            {
              id: 7,
              cityName: "杭州",
              pinYin: "hangzhou",
              gangAoTai: false,
              hot: false,
              longitude: "120.162",
              latitude: "30.279"
            },
            {
              id: 305,
              cityName: "汉中",
              pinYin: "hanzhong",
              gangAoTai: false,
              hot: false,
              longitude: "107.041",
              latitude: "33.0745"
            },
            {
              id: 171,
              cityName: "鹤壁",
              pinYin: "hebi",
              gangAoTai: false,
              hot: false,
              longitude: "114.304",
              latitude: "35.7527"
            },
            {
              id: 248,
              cityName: "河池",
              pinYin: "hechi",
              gangAoTai: false,
              hot: false,
              longitude: "108.092",
              latitude: "24.6988"
            },
            {
              id: 50,
              cityName: "合肥",
              pinYin: "hefei",
              gangAoTai: false,
              hot: false,
              longitude: "117.234",
              latitude: "31.8267"
            },
            {
              id: 205,
              cityName: "黑河",
              pinYin: "heihe",
              gangAoTai: false,
              hot: false,
              longitude: "127.535",
              latitude: "50.2512"
            },
            {
              id: 161,
              cityName: "衡水",
              pinYin: "hengshui",
              gangAoTai: false,
              hot: false,
              longitude: "115.676",
              latitude: "37.7453"
            },
            {
              id: 335,
              cityName: "衡阳",
              pinYin: "hengyang",
              gangAoTai: false,
              hot: false,
              longitude: "112.58",
              latitude: "26.8979"
            },
            {
              id: 80,
              cityName: "河源",
              pinYin: "heyuan",
              gangAoTai: false,
              hot: false,
              longitude: "114.707",
              latitude: "23.7499"
            },
            {
              id: 221,
              cityName: "菏泽",
              pinYin: "heze",
              gangAoTai: false,
              hot: false,
              longitude: "115.487",
              latitude: "35.2394"
            },
            {
              id: 253,
              cityName: "贺州",
              pinYin: "hezhou",
              gangAoTai: false,
              hot: false,
              longitude: "111.574",
              latitude: "24.4101"
            },
            {
              id: 364,
              cityName: "红河州",
              pinYin: "honghezhou",
              gangAoTai: false,
              hot: false,
              longitude: "103.382",
              latitude: "23.3697"
            },
            {
              id: 140,
              cityName: "淮安",
              pinYin: "huaian",
              gangAoTai: false,
              hot: false,
              longitude: "119.022",
              latitude: "33.6164"
            },
            {
              id: 234,
              cityName: "淮北",
              pinYin: "huaibei",
              gangAoTai: false,
              hot: false,
              longitude: "116.805",
              latitude: "33.9618"
            },
            {
              id: 344,
              cityName: "怀化",
              pinYin: "huaihua",
              gangAoTai: false,
              hot: false,
              longitude: "110.008",
              latitude: "27.5756"
            },
            {
              id: 233,
              cityName: "淮南",
              pinYin: "huainan",
              gangAoTai: false,
              hot: false,
              longitude: "117.025",
              latitude: "32.5934"
            },
            {
              id: 3997,
              cityName: "花莲",
              pinYin: "hualian",
              gangAoTai: true,
              hot: false,
              longitude: "0",
              latitude: "0"
            },
            {
              id: 327,
              cityName: "黄冈",
              pinYin: "huanggang",
              gangAoTai: false,
              hot: false,
              longitude: "114.879",
              latitude: "30.4594"
            },
            {
              id: 312,
              cityName: "黄南",
              pinYin: "huangnan",
              gangAoTai: false,
              hot: false,
              longitude: "102.022",
              latitude: "35.5258"
            },
            {
              id: 6,
              cityName: "黄山",
              pinYin: "huangshan",
              gangAoTai: false,
              hot: false,
              longitude: "118.346",
              latitude: "29.7215"
            },
            {
              id: 317,
              cityName: "黄石",
              pinYin: "huangshi",
              gangAoTai: false,
              hot: false,
              longitude: "115.046",
              latitude: "30.2055"
            },
            {
              id: 256,
              cityName: "呼和浩特",
              pinYin: "huhehaote",
              gangAoTai: false,
              hot: false,
              longitude: "111.698",
              latitude: "40.8307"
            },
            {
              id: 72,
              cityName: "惠州",
              pinYin: "huizhou",
              gangAoTai: false,
              hot: false,
              longitude: "114.432",
              latitude: "23.0931"
            },
            {
              id: 133,
              cityName: "葫芦岛",
              pinYin: "huludao",
              gangAoTai: false,
              hot: false,
              longitude: "120.843",
              latitude: "40.7175"
            },
            {
              id: 262,
              cityName: "呼伦贝尔",
              pinYin: "hulunbeier",
              gangAoTai: false,
              hot: false,
              longitude: "119.772",
              latitude: "49.2179"
            },
            {
              id: 111,
              cityName: "湖州",
              pinYin: "huzhou",
              gangAoTai: false,
              hot: false,
              longitude: "120.088",
              latitude: "30.8914"
            }
          ]
        },
        {
          group: "J",
          cities: [
            {
              id: 204,
              cityName: "佳木斯",
              pinYin: "jiamusi",
              gangAoTai: false,
              hot: false,
              longitude: "130.327",
              latitude: "46.806"
            },
            {
              id: 353,
              cityName: "吉安",
              pinYin: "jian",
              gangAoTai: false,
              hot: false,
              longitude: "115",
              latitude: "27.118"
            },
            {
              id: 70,
              cityName: "江门",
              pinYin: "jiangmen",
              gangAoTai: false,
              hot: false,
              longitude: "113.088",
              latitude: "22.5845"
            },
            {
              id: 170,
              cityName: "焦作",
              pinYin: "jiaozuo",
              gangAoTai: false,
              hot: false,
              longitude: "113.249",
              latitude: "35.2215"
            },
            {
              id: 110,
              cityName: "嘉兴",
              pinYin: "jiaxing",
              gangAoTai: false,
              hot: false,
              longitude: "120.763",
              latitude: "30.7524"
            },
            {
              id: 4e3,
              cityName: "嘉义",
              pinYin: "jiayi",
              gangAoTai: true,
              hot: false,
              longitude: "120.304",
              latitude: "23.4623"
            },
            {
              id: 300,
              cityName: "嘉峪关",
              pinYin: "jiayuguan",
              gangAoTai: false,
              hot: false,
              longitude: "98.296",
              latitude: "39.7784"
            },
            {
              id: 84,
              cityName: "揭阳",
              pinYin: "jieyang",
              gangAoTai: false,
              hot: false,
              longitude: "116.379",
              latitude: "23.5558"
            },
            {
              id: 190,
              cityName: "吉林",
              pinYin: "jilinj",
              gangAoTai: false,
              hot: false,
              longitude: "126.556",
              latitude: "43.8435"
            },
            {
              id: 3998,
              cityName: "基隆",
              pinYin: "jilong",
              gangAoTai: true,
              hot: false,
              longitude: "121.755",
              latitude: "25.1345"
            },
            {
              id: 19,
              cityName: "济南",
              pinYin: "jinan",
              gangAoTai: false,
              hot: false,
              longitude: "117.127",
              latitude: "36.6573"
            },
            {
              id: 288,
              cityName: "金昌",
              pinYin: "jinchang",
              gangAoTai: false,
              hot: false,
              longitude: "102.195",
              latitude: "38.5259"
            },
            {
              id: 273,
              cityName: "晋城",
              pinYin: "jincheng",
              gangAoTai: false,
              hot: false,
              longitude: "112.858",
              latitude: "35.4965"
            },
            {
              id: 347,
              cityName: "景德镇",
              pinYin: "jingdezhen",
              gangAoTai: false,
              hot: false,
              longitude: "117.185",
              latitude: "29.2744"
            },
            {
              id: 322,
              cityName: "荆门",
              pinYin: "jingmen",
              gangAoTai: false,
              hot: false,
              longitude: "112.206",
              latitude: "31.0419"
            },
            {
              id: 320,
              cityName: "荆州",
              pinYin: "jingzhou",
              gangAoTai: false,
              hot: false,
              longitude: "112.246",
              latitude: "30.3407"
            },
            {
              id: 113,
              cityName: "金华",
              pinYin: "jinhua",
              gangAoTai: false,
              hot: false,
              longitude: "119.654",
              latitude: "29.0855"
            },
            {
              id: 215,
              cityName: "济宁",
              pinYin: "jining",
              gangAoTai: false,
              hot: false,
              longitude: "116.594",
              latitude: "35.421"
            },
            {
              id: 4027,
              cityName: "金门",
              pinYin: "jinmen",
              gangAoTai: true,
              hot: false,
              longitude: "118.239",
              latitude: "24.4175"
            },
            {
              id: 275,
              cityName: "晋中",
              pinYin: "jinzhong",
              gangAoTai: false,
              hot: false,
              longitude: "112.759",
              latitude: "37.6932"
            },
            {
              id: 130,
              cityName: "锦州",
              pinYin: "jinzhou",
              gangAoTai: false,
              hot: false,
              longitude: "121.133",
              latitude: "41.1015"
            },
            {
              id: 349,
              cityName: "九江",
              pinYin: "jiujiangjx",
              gangAoTai: false,
              hot: false,
              longitude: "116.008",
              latitude: "29.7115"
            },
            {
              id: 294,
              cityName: "酒泉",
              pinYin: "jiuquan",
              gangAoTai: false,
              hot: false,
              longitude: "98.5005",
              latitude: "39.7389"
            },
            {
              id: 199,
              cityName: "鸡西",
              pinYin: "jixi",
              gangAoTai: false,
              hot: false,
              longitude: "130.976",
              latitude: "45.3009"
            },
            {
              id: 176,
              cityName: "济源",
              pinYin: "jiyuan",
              gangAoTai: false,
              hot: false,
              longitude: "112.61",
              latitude: "35.0733"
            }
          ]
        },
        {
          group: "K",
          cities: [
            {
              id: 177,
              cityName: "开封",
              pinYin: "kaifeng",
              gangAoTai: false,
              hot: false,
              longitude: "114.351",
              latitude: "34.8019"
            },
            {
              id: 375,
              cityName: "喀什",
              pinYin: "kashi",
              gangAoTai: false,
              hot: false,
              longitude: "75.9961",
              latitude: "39.4762"
            },
            {
              id: 370,
              cityName: "克拉玛依",
              pinYin: "kelamayi",
              gangAoTai: false,
              hot: false,
              longitude: "84.8959",
              latitude: "45.5861"
            },
            {
              id: 31,
              cityName: "昆明",
              pinYin: "kunming",
              gangAoTai: false,
              hot: false,
              longitude: "102.84",
              latitude: "24.8859"
            }
          ]
        },
        {
          group: "L",
          cities: [
            {
              id: 249,
              cityName: "来宾",
              pinYin: "laibin",
              gangAoTai: false,
              hot: false,
              longitude: "109.228",
              latitude: "23.7567"
            },
            {
              id: 213,
              cityName: "莱芜",
              pinYin: "laiwu",
              gangAoTai: false,
              hot: false,
              longitude: "117.684",
              latitude: "36.2194"
            },
            {
              id: 160,
              cityName: "廊坊",
              pinYin: "langfang",
              gangAoTai: false,
              hot: false,
              longitude: "116.691",
              latitude: "39.5435"
            },
            {
              id: 287,
              cityName: "兰州",
              pinYin: "lanzhou",
              gangAoTai: false,
              hot: false,
              longitude: "104.075",
              latitude: "35.5832"
            },
            {
              id: 389,
              cityName: "拉萨",
              pinYin: "lasa",
              gangAoTai: false,
              hot: false,
              longitude: "91.1309",
              latitude: "29.6643"
            },
            {
              id: 3993,
              cityName: "乐东",
              pinYin: "ledongxian",
              gangAoTai: false,
              hot: false,
              longitude: "109.18",
              latitude: "18.7558"
            },
            {
              id: 93,
              cityName: "乐山",
              pinYin: "leshan",
              gangAoTai: false,
              hot: false,
              longitude: "103.772",
              latitude: "29.5583"
            },
            {
              id: 97,
              cityName: "凉山",
              pinYin: "liangshan",
              gangAoTai: false,
              hot: false,
              longitude: "102.274",
              latitude: "27.8878"
            },
            {
              id: 39,
              cityName: "连云港",
              pinYin: "lianyungang",
              gangAoTai: false,
              hot: false,
              longitude: "119.228",
              latitude: "34.6024"
            },
            {
              id: 220,
              cityName: "聊城",
              pinYin: "liaocheng",
              gangAoTai: false,
              hot: false,
              longitude: "115.992",
              latitude: "36.4625"
            },
            {
              id: 12,
              cityName: "丽江",
              pinYin: "lijiang",
              gangAoTai: false,
              hot: false,
              longitude: "100.233",
              latitude: "26.8608"
            },
            {
              id: 278,
              cityName: "临汾",
              pinYin: "linfen",
              gangAoTai: false,
              hot: false,
              longitude: "111.526",
              latitude: "36.0938"
            },
            {
              id: 4048,
              cityName: "临高",
              pinYin: "lingao",
              gangAoTai: false,
              hot: false,
              longitude: "109.697",
              latitude: "19.9186"
            },
            {
              id: 5,
              cityName: "陵水(三亚)",
              pinYin: "lingshui",
              gangAoTai: false,
              hot: false,
              longitude: "110.044",
              latitude: "18.5122"
            },
            {
              id: 298,
              cityName: "临夏",
              pinYin: "linxia",
              gangAoTai: false,
              hot: false,
              longitude: "103.217",
              latitude: "35.6076"
            },
            {
              id: 218,
              cityName: "临沂",
              pinYin: "linyi",
              gangAoTai: false,
              hot: false,
              longitude: "118.361",
              latitude: "35.1064"
            },
            {
              id: 395,
              cityName: "林芝",
              pinYin: "linzhi",
              gangAoTai: false,
              hot: false,
              longitude: "94.3915",
              latitude: "29.6538"
            },
            {
              id: 116,
              cityName: "丽水",
              pinYin: "lishuiz",
              gangAoTai: false,
              hot: false,
              longitude: "119.929",
              latitude: "28.4736"
            },
            {
              id: 232,
              cityName: "六安",
              pinYin: "liuan",
              gangAoTai: false,
              hot: false,
              longitude: "116.526",
              latitude: "31.7413"
            },
            {
              id: 118,
              cityName: "六盘水",
              pinYin: "liupanshui",
              gangAoTai: false,
              hot: false,
              longitude: "104.837",
              latitude: "26.5986"
            },
            {
              id: 242,
              cityName: "柳州",
              pinYin: "liuzhou",
              gangAoTai: false,
              hot: false,
              longitude: "109.435",
              latitude: "24.3325"
            },
            {
              id: 297,
              cityName: "陇南",
              pinYin: "longnan",
              gangAoTai: false,
              hot: false,
              longitude: "104.928",
              latitude: "33.4066"
            },
            {
              id: 151,
              cityName: "龙岩",
              pinYin: "longyan",
              gangAoTai: false,
              hot: false,
              longitude: "117.024",
              latitude: "25.0813"
            },
            {
              id: 341,
              cityName: "娄底",
              pinYin: "loudi",
              gangAoTai: false,
              hot: false,
              longitude: "112.001",
              latitude: "27.7032"
            },
            {
              id: 174,
              cityName: "漯河",
              pinYin: "luohe",
              gangAoTai: false,
              hot: false,
              longitude: "114.023",
              latitude: "33.5877"
            },
            {
              id: 168,
              cityName: "洛阳",
              pinYin: "luoyang",
              gangAoTai: false,
              hot: false,
              longitude: "112.458",
              latitude: "34.65"
            },
            {
              id: 90,
              cityName: "泸州",
              pinYin: "luzhou",
              gangAoTai: false,
              hot: false,
              longitude: "105.449",
              latitude: "28.8777"
            },
            {
              id: 279,
              cityName: "吕梁",
              pinYin: "lvliang",
              gangAoTai: false,
              hot: false,
              longitude: "111.142",
              latitude: "37.5246"
            }
          ]
        },
        {
          group: "M",
          cities: [
            {
              id: 226,
              cityName: "马鞍山",
              pinYin: "maanshan",
              gangAoTai: false,
              hot: false,
              longitude: "118.513",
              latitude: "31.6755"
            },
            {
              id: 71,
              cityName: "茂名",
              pinYin: "maoming",
              gangAoTai: false,
              hot: false,
              longitude: "110.932",
              latitude: "21.6691"
            },
            {
              id: 103,
              cityName: "眉山",
              pinYin: "meishan",
              gangAoTai: false,
              hot: false,
              longitude: "103.855",
              latitude: "30.0817"
            },
            {
              id: 78,
              cityName: "梅州",
              pinYin: "meizhou1",
              gangAoTai: false,
              hot: false,
              longitude: "116.13",
              latitude: "24.2943"
            },
            {
              id: 92,
              cityName: "绵阳",
              pinYin: "mianyang",
              gangAoTai: false,
              hot: false,
              longitude: "104.686",
              latitude: "31.4734"
            },
            {
              id: 4001,
              cityName: "苗栗",
              pinYin: "miaoli",
              gangAoTai: true,
              hot: false,
              longitude: "120.831",
              latitude: "24.5677"
            },
            {
              id: 208,
              cityName: "牡丹江",
              pinYin: "mudanjiang",
              gangAoTai: false,
              hot: false,
              longitude: "129.64",
              latitude: "44.5583"
            }
          ]
        },
        {
          group: "N",
          cities: [
            {
              id: 346,
              cityName: "南昌",
              pinYin: "nanchang",
              gangAoTai: false,
              hot: false,
              longitude: "116.218",
              latitude: "28.1828"
            },
            {
              id: 94,
              cityName: "南充",
              pinYin: "nanchong",
              gangAoTai: false,
              hot: false,
              longitude: "106.117",
              latitude: "30.8441"
            },
            {
              id: 9,
              cityName: "南京",
              pinYin: "nanjing",
              gangAoTai: false,
              hot: false,
              longitude: "118.803",
              latitude: "32.0648"
            },
            {
              id: 250,
              cityName: "南宁",
              pinYin: "nanning",
              gangAoTai: false,
              hot: false,
              longitude: "108.321",
              latitude: "22.7983"
            },
            {
              id: 52,
              cityName: "南通",
              pinYin: "nantong",
              gangAoTai: false,
              hot: false,
              longitude: "120.901",
              latitude: "31.9864"
            },
            {
              id: 150,
              cityName: "南平",
              pinYin: "nanping",
              gangAoTai: false,
              hot: false,
              longitude: "118.184",
              latitude: "26.6457"
            },
            {
              id: 4002,
              cityName: "南投",
              pinYin: "nantou1",
              gangAoTai: true,
              hot: false,
              longitude: "120.701",
              latitude: "23.9054"
            },
            {
              id: 175,
              cityName: "南阳",
              pinYin: "nanyang",
              gangAoTai: false,
              hot: false,
              longitude: "112.535",
              latitude: "32.9967"
            },
            {
              id: 101,
              cityName: "内江",
              pinYin: "neijiang",
              gangAoTai: false,
              hot: false,
              longitude: "105.065",
              latitude: "29.5858"
            },
            {
              id: 16,
              cityName: "宁波",
              pinYin: "ningbo",
              gangAoTai: false,
              hot: false,
              longitude: "121.557",
              latitude: "29.8802"
            },
            {
              id: 152,
              cityName: "宁德",
              pinYin: "ningde",
              gangAoTai: false,
              hot: false,
              longitude: "119.555",
              latitude: "26.672"
            },
            {
              id: 367,
              cityName: "怒江",
              pinYin: "nujiang",
              gangAoTai: false,
              hot: false,
              longitude: "98.8628",
              latitude: "25.8236"
            }
          ]
        },
        {
          group: "P",
          cities: [
            {
              id: 132,
              cityName: "盘锦",
              pinYin: "panjin",
              gangAoTai: false,
              hot: false,
              longitude: "122.077",
              latitude: "41.1257"
            },
            {
              id: 98,
              cityName: "攀枝花",
              pinYin: "panzhihua",
              gangAoTai: false,
              hot: false,
              longitude: "101.725",
              latitude: "26.5881"
            },
            {
              id: 4003,
              cityName: "澎湖",
              pinYin: "penghu",
              gangAoTai: true,
              hot: false,
              longitude: "119.577",
              latitude: "23.5727"
            },
            {
              id: 169,
              cityName: "平顶山",
              pinYin: "pingdingshan",
              gangAoTai: false,
              hot: false,
              longitude: "113.199",
              latitude: "33.7723"
            },
            {
              id: 4004,
              cityName: "屏东（垦丁）",
              pinYin: "pingdong",
              gangAoTai: true,
              hot: false,
              longitude: "120.498",
              latitude: "22.6869"
            },
            {
              id: 293,
              cityName: "平凉",
              pinYin: "pingliang",
              gangAoTai: false,
              hot: false,
              longitude: "106.672",
              latitude: "35.5487"
            },
            {
              id: 348,
              cityName: "萍乡",
              pinYin: "pingxiang",
              gangAoTai: false,
              hot: false,
              longitude: "113.861",
              latitude: "27.6285"
            },
            {
              id: 61,
              cityName: "普洱",
              pinYin: "puer",
              gangAoTai: false,
              hot: false,
              longitude: "100.973",
              latitude: "22.831"
            },
            {
              id: 146,
              cityName: "莆田",
              pinYin: "putian",
              gangAoTai: false,
              hot: false,
              longitude: "119.014",
              latitude: "25.4599"
            },
            {
              id: 178,
              cityName: "濮阳",
              pinYin: "puyang",
              gangAoTai: false,
              hot: false,
              longitude: "115.036",
              latitude: "35.7676"
            }
          ]
        },
        {
          group: "Q",
          cities: [
            {
              id: 124,
              cityName: "黔东南",
              pinYin: "qiandongnan",
              gangAoTai: false,
              hot: false,
              longitude: "107.986",
              latitude: "26.5812"
            },
            {
              id: 125,
              cityName: "黔南",
              pinYin: "qiannan",
              gangAoTai: false,
              hot: false,
              longitude: "107.529",
              latitude: "26.2596"
            },
            {
              id: 123,
              cityName: "黔西南",
              pinYin: "qianxinan",
              gangAoTai: false,
              hot: false,
              longitude: "104.911",
              latitude: "25.096"
            },
            {
              id: 8,
              cityName: "青岛",
              pinYin: "qingdao",
              gangAoTai: false,
              hot: false,
              longitude: "120.389",
              latitude: "36.0737"
            },
            {
              id: 82,
              cityName: "清远",
              pinYin: "qingyuan",
              gangAoTai: false,
              hot: false,
              longitude: "113.063",
              latitude: "23.6877"
            },
            {
              id: 65,
              cityName: "秦皇岛",
              pinYin: "qinhuangdao",
              gangAoTai: false,
              hot: false,
              longitude: "119.607",
              latitude: "39.9412"
            },
            {
              id: 244,
              cityName: "钦州",
              pinYin: "qinzhou",
              gangAoTai: false,
              hot: false,
              longitude: "108.661",
              latitude: "21.9866"
            },
            {
              id: 407,
              cityName: "琼海",
              pinYin: "qionghai",
              gangAoTai: false,
              hot: false,
              longitude: "110.481",
              latitude: "19.2644"
            },
            {
              id: 4053,
              cityName: "琼中",
              pinYin: "qiongzhong",
              gangAoTai: false,
              hot: false,
              longitude: "109.845",
              latitude: "19.0392"
            },
            {
              id: 198,
              cityName: "齐齐哈尔",
              pinYin: "qiqihaer",
              gangAoTai: false,
              hot: false,
              longitude: "123.925",
              latitude: "47.3601"
            },
            {
              id: 148,
              cityName: "泉州",
              pinYin: "quanzhou",
              gangAoTai: false,
              hot: false,
              longitude: "118.613",
              latitude: "24.8824"
            },
            {
              id: 358,
              cityName: "曲靖",
              pinYin: "qujing",
              gangAoTai: false,
              hot: false,
              longitude: "103.803",
              latitude: "25.4963"
            },
            {
              id: 114,
              cityName: "衢州",
              pinYin: "quzhouzj",
              gangAoTai: false,
              hot: false,
              longitude: "118.866",
              latitude: "28.9755"
            }
          ]
        },
        {
          group: "R",
          cities: [
            {
              id: 392,
              cityName: "日喀则",
              pinYin: "rikaze",
              gangAoTai: false,
              hot: false,
              longitude: "88.8876",
              latitude: "29.2728"
            },
            {
              id: 217,
              cityName: "日照",
              pinYin: "rizhao",
              gangAoTai: false,
              hot: false,
              longitude: "119.538",
              latitude: "35.4109"
            }
          ]
        },
        {
          group: "S",
          cities: [
            {
              id: 180,
              cityName: "三门峡",
              pinYin: "sanmenxia",
              gangAoTai: false,
              hot: false,
              longitude: "111.207",
              latitude: "34.7784"
            },
            {
              id: 147,
              cityName: "三明",
              pinYin: "sanming",
              gangAoTai: false,
              hot: false,
              longitude: "117.645",
              latitude: "26.2695"
            },
            {
              id: 1,
              cityName: "三亚",
              pinYin: "sanya",
              gangAoTai: false,
              hot: false,
              longitude: "109.518",
              latitude: "18.2584"
            },
            {
              id: 23,
              cityName: "上海",
              pinYin: "shanghai",
              gangAoTai: false,
              hot: false,
              longitude: "121.48",
              latitude: "31.2364"
            },
            {
              id: 308,
              cityName: "商洛",
              pinYin: "shangluo",
              gangAoTai: false,
              hot: false,
              longitude: "109.926",
              latitude: "33.8788"
            },
            {
              id: 181,
              cityName: "商丘",
              pinYin: "shangqiu",
              gangAoTai: false,
              hot: false,
              longitude: "115.663",
              latitude: "34.4203"
            },
            {
              id: 356,
              cityName: "上饶",
              pinYin: "shangrao",
              gangAoTai: false,
              hot: false,
              longitude: "117.95",
              latitude: "28.4609"
            },
            {
              id: 69,
              cityName: "汕头",
              pinYin: "shantou",
              gangAoTai: false,
              hot: false,
              longitude: "116.728",
              latitude: "23.3755"
            },
            {
              id: 79,
              cityName: "汕尾",
              pinYin: "shanwei",
              gangAoTai: false,
              hot: false,
              longitude: "115.382",
              latitude: "22.7915"
            },
            {
              id: 75,
              cityName: "韶关",
              pinYin: "shaoguan",
              gangAoTai: false,
              hot: false,
              longitude: "113.602",
              latitude: "24.8119"
            },
            {
              id: 112,
              cityName: "绍兴",
              pinYin: "shaoxing",
              gangAoTai: false,
              hot: false,
              longitude: "120.586",
              latitude: "30.037"
            },
            {
              id: 336,
              cityName: "邵阳",
              pinYin: "shaoyang",
              gangAoTai: false,
              hot: false,
              longitude: "111.474",
              latitude: "27.2451"
            },
            {
              id: 332,
              cityName: "神农架",
              pinYin: "shennongjia",
              gangAoTai: false,
              hot: false,
              longitude: "110.683",
              latitude: "31.7504"
            },
            {
              id: 126,
              cityName: "沈阳",
              pinYin: "shenyang",
              gangAoTai: false,
              hot: false,
              longitude: "123.282",
              latitude: "41.97"
            },
            {
              id: 49,
              cityName: "深圳",
              pinYin: "shenzhen",
              gangAoTai: false,
              hot: false,
              longitude: "114.066",
              latitude: "22.5493"
            },
            {
              id: 383,
              cityName: "石河子",
              pinYin: "shihezi",
              gangAoTai: false,
              hot: false,
              longitude: "86.0868",
              latitude: "44.311"
            },
            {
              id: 153,
              cityName: "石家庄",
              pinYin: "shijiazhuang",
              gangAoTai: false,
              hot: false,
              longitude: "114.522",
              latitude: "38.048"
            },
            {
              id: 319,
              cityName: "十堰",
              pinYin: "shiyan",
              gangAoTai: false,
              hot: false,
              longitude: "110.805",
              latitude: "32.6355"
            },
            {
              id: 283,
              cityName: "石嘴山",
              pinYin: "shizuishan",
              gangAoTai: false,
              hot: false,
              longitude: "106.391",
              latitude: "38.9899"
            },
            {
              id: 201,
              cityName: "双鸭山",
              pinYin: "shuangyashan",
              gangAoTai: false,
              hot: false,
              longitude: "131.166",
              latitude: "46.653"
            },
            {
              id: 191,
              cityName: "四平",
              pinYin: "siping",
              gangAoTai: false,
              hot: false,
              longitude: "124.357",
              latitude: "43.1724"
            },
            {
              id: 195,
              cityName: "松原",
              pinYin: "songyuan",
              gangAoTai: false,
              hot: false,
              longitude: "124.831",
              latitude: "45.1477"
            },
            {
              id: 100,
              cityName: "遂宁",
              pinYin: "suiningsc",
              gangAoTai: false,
              hot: false,
              longitude: "105.6",
              latitude: "30.5382"
            },
            {
              id: 329,
              cityName: "随州",
              pinYin: "suizhou",
              gangAoTai: false,
              hot: false,
              longitude: "113.389",
              latitude: "31.6966"
            },
            {
              id: 142,
              cityName: "宿迁",
              pinYin: "suqian",
              gangAoTai: false,
              hot: false,
              longitude: "118.282",
              latitude: "33.9677"
            },
            {
              id: 11,
              cityName: "苏州",
              pinYin: "suzhou",
              gangAoTai: false,
              hot: false,
              longitude: "120.592",
              latitude: "31.3057"
            },
            {
              id: 230,
              cityName: "宿州",
              pinYin: "suzhouanhui",
              gangAoTai: false,
              hot: false,
              longitude: "116.971",
              latitude: "33.652"
            }
          ]
        },
        {
          group: "T",
          cities: [
            {
              id: 216,
              cityName: "泰安",
              pinYin: "taian",
              gangAoTai: false,
              hot: false,
              longitude: "117.125",
              latitude: "36.1926"
            },
            {
              id: 4005,
              cityName: "台北",
              pinYin: "taibei",
              gangAoTai: true,
              hot: false,
              longitude: "0",
              latitude: "0"
            },
            {
              id: 4006,
              cityName: "台东",
              pinYin: "taidong",
              gangAoTai: true,
              hot: false,
              longitude: "121.157",
              latitude: "22.7579"
            },
            {
              id: 4007,
              cityName: "台南",
              pinYin: "tainan",
              gangAoTai: true,
              hot: false,
              longitude: "120.196",
              latitude: "22.9942"
            },
            {
              id: 269,
              cityName: "太原",
              pinYin: "taiyuan",
              gangAoTai: false,
              hot: false,
              longitude: "113.306",
              latitude: "40.0851"
            },
            {
              id: 4008,
              cityName: "台中",
              pinYin: "taizhong",
              gangAoTai: true,
              hot: false,
              longitude: "120.658",
              latitude: "24.1662"
            },
            {
              id: 141,
              cityName: "泰州",
              pinYin: "taizhou1",
              gangAoTai: false,
              hot: false,
              longitude: "119.93",
              latitude: "32.462"
            },
            {
              id: 115,
              cityName: "台州",
              pinYin: "taizhou",
              gangAoTai: false,
              hot: false,
              longitude: "121.427",
              latitude: "28.6624"
            },
            {
              id: 154,
              cityName: "唐山",
              pinYin: "tangshan",
              gangAoTai: false,
              hot: false,
              longitude: "118.176",
              latitude: "39.6552"
            },
            {
              id: 4009,
              cityName: "桃园",
              pinYin: "taoyuan1",
              gangAoTai: true,
              hot: false,
              longitude: "121.312",
              latitude: "24.9973"
            },
            {
              id: 66,
              cityName: "天津",
              pinYin: "tianjin",
              gangAoTai: false,
              hot: false,
              longitude: "117.188",
              latitude: "39.1359"
            },
            {
              id: 290,
              cityName: "天水",
              pinYin: "tianshui",
              gangAoTai: false,
              hot: false,
              longitude: "105.731",
              latitude: "34.5868"
            },
            {
              id: 136,
              cityName: "铁岭",
              pinYin: "tieling",
              gangAoTai: false,
              hot: false,
              longitude: "123.732",
              latitude: "42.2299"
            },
            {
              id: 193,
              cityName: "通化",
              pinYin: "tonghua",
              gangAoTai: false,
              hot: false,
              longitude: "125.946",
              latitude: "41.7337"
            },
            {
              id: 260,
              cityName: "通辽",
              pinYin: "tongliao",
              gangAoTai: false,
              hot: false,
              longitude: "122.25",
              latitude: "43.6603"
            },
            {
              id: 235,
              cityName: "铜陵",
              pinYin: "tongling",
              gangAoTai: false,
              hot: false,
              longitude: "117.819",
              latitude: "30.9512"
            },
            {
              id: 121,
              cityName: "铜仁",
              pinYin: "tongrenshi",
              gangAoTai: false,
              hot: false,
              longitude: "109.186",
              latitude: "27.6974"
            },
            {
              id: 371,
              cityName: "吐鲁番",
              pinYin: "tulufan",
              gangAoTai: false,
              hot: false,
              longitude: "89.1923",
              latitude: "42.9482"
            },
            {
              id: 386,
              cityName: "图木舒克",
              pinYin: "tumushuke",
              gangAoTai: false,
              hot: false,
              longitude: "79.0758",
              latitude: "39.8709"
            }
          ]
        },
        {
          group: "W",
          cities: [
            {
              id: 43,
              cityName: "万宁",
              pinYin: "wanning",
              gangAoTai: false,
              hot: false,
              longitude: "110.239",
              latitude: "18.7552"
            },
            {
              id: 212,
              cityName: "潍坊",
              pinYin: "weifang",
              gangAoTai: false,
              hot: false,
              longitude: "119.164",
              latitude: "36.7142"
            },
            {
              id: 30,
              cityName: "威海",
              pinYin: "weihai",
              gangAoTai: false,
              hot: false,
              longitude: "122.128",
              latitude: "37.5193"
            },
            {
              id: 304,
              cityName: "渭南",
              pinYin: "weinan",
              gangAoTai: false,
              hot: false,
              longitude: "109.499",
              latitude: "34.5039"
            },
            {
              id: 4,
              cityName: "文昌",
              pinYin: "wenchang",
              gangAoTai: false,
              hot: false,
              longitude: "110.804",
              latitude: "19.5491"
            },
            {
              id: 363,
              cityName: "文山",
              pinYin: "wenshan",
              gangAoTai: false,
              hot: false,
              longitude: "104.239",
              latitude: "23.3924"
            },
            {
              id: 109,
              cityName: "温州",
              pinYin: "wenzhou",
              gangAoTai: false,
              hot: false,
              longitude: "120.701",
              latitude: "27.9942"
            },
            {
              id: 258,
              cityName: "乌海",
              pinYin: "wuhai",
              gangAoTai: false,
              hot: false,
              longitude: "106.801",
              latitude: "39.6621"
            },
            {
              id: 55,
              cityName: "武汉",
              pinYin: "wuhan",
              gangAoTai: false,
              hot: false,
              longitude: "114.312",
              latitude: "30.5984"
            },
            {
              id: 53,
              cityName: "芜湖",
              pinYin: "wuhu",
              gangAoTai: false,
              hot: false,
              longitude: "118.44",
              latitude: "31.3587"
            },
            {
              id: 387,
              cityName: "五家渠",
              pinYin: "wujiaqu",
              gangAoTai: false,
              hot: false,
              longitude: "87.55",
              latitude: "44.1723"
            },
            {
              id: 264,
              cityName: "乌兰察布",
              pinYin: "wulanchabu",
              gangAoTai: false,
              hot: false,
              longitude: "113.139",
              latitude: "41.0009"
            },
            {
              id: 369,
              cityName: "乌鲁木齐",
              pinYin: "wulumuqi",
              gangAoTai: false,
              hot: false,
              longitude: "87.6141",
              latitude: "43.815"
            },
            {
              id: 291,
              cityName: "武威",
              pinYin: "wuwei",
              gangAoTai: false,
              hot: false,
              longitude: "102.645",
              latitude: "37.9341"
            },
            {
              id: 14,
              cityName: "无锡",
              pinYin: "wuxi",
              gangAoTai: false,
              hot: false,
              longitude: "120.319",
              latitude: "31.497"
            },
            {
              id: 3,
              cityName: "五指山",
              pinYin: "wuzhishan",
              gangAoTai: false,
              hot: false,
              longitude: "109.524",
              latitude: "18.7809"
            },
            {
              id: 284,
              cityName: "吴忠",
              pinYin: "wuzhong",
              gangAoTai: false,
              hot: false,
              longitude: "106.205",
              latitude: "38.004"
            },
            {
              id: 243,
              cityName: "梧州",
              pinYin: "wuzhou",
              gangAoTai: false,
              hot: false,
              longitude: "111.277",
              latitude: "23.4641"
            }
          ]
        },
        {
          group: "X",
          cities: [
            {
              id: 33,
              cityName: "厦门",
              pinYin: "xiamen",
              gangAoTai: false,
              hot: false,
              longitude: "118.096",
              latitude: "24.4859"
            },
            {
              id: 17,
              cityName: "西安",
              pinYin: "xian",
              gangAoTai: false,
              hot: false,
              longitude: "108.946",
              latitude: "34.3473"
            },
            {
              id: 396,
              cityName: "香港",
              pinYin: "xianggang",
              gangAoTai: true,
              hot: false,
              longitude: "114.174",
              latitude: "22.2838"
            },
            {
              id: 334,
              cityName: "湘潭",
              pinYin: "xiangtanhn",
              gangAoTai: false,
              hot: false,
              longitude: "112.95",
              latitude: "27.8353"
            },
            {
              id: 345,
              cityName: "湘西",
              pinYin: "xiangxi",
              gangAoTai: false,
              hot: false,
              longitude: "109.705",
              latitude: "28.2685"
            },
            {
              id: 4031,
              cityName: "襄阳",
              pinYin: "xiangyang",
              gangAoTai: false,
              hot: false,
              longitude: "112.128",
              latitude: "32.0148"
            },
            {
              id: 328,
              cityName: "咸宁",
              pinYin: "xianning",
              gangAoTai: false,
              hot: false,
              longitude: "114.329",
              latitude: "29.847"
            },
            {
              id: 324,
              cityName: "仙桃",
              pinYin: "xiantao",
              gangAoTai: false,
              hot: false,
              longitude: "113.462",
              latitude: "30.3672"
            },
            {
              id: 303,
              cityName: "咸阳",
              pinYin: "xianyang",
              gangAoTai: false,
              hot: false,
              longitude: "108.712",
              latitude: "34.335"
            },
            {
              id: 326,
              cityName: "孝感",
              pinYin: "xiaogan",
              gangAoTai: false,
              hot: false,
              longitude: "113.962",
              latitude: "30.9234"
            },
            {
              id: 266,
              cityName: "锡林郭勒",
              pinYin: "xilinguole",
              gangAoTai: false,
              hot: false,
              longitude: "116.054",
              latitude: "43.939"
            },
            {
              id: 265,
              cityName: "兴安盟",
              pinYin: "xinganmeng",
              gangAoTai: false,
              hot: false,
              longitude: "122.044",
              latitude: "46.0888"
            },
            {
              id: 156,
              cityName: "邢台",
              pinYin: "xingtai",
              gangAoTai: false,
              hot: false,
              longitude: "114.512",
              latitude: "37.0768"
            },
            {
              id: 309,
              cityName: "西宁",
              pinYin: "xining",
              gangAoTai: false,
              hot: false,
              longitude: "101.775",
              latitude: "36.6398"
            },
            {
              id: 4010,
              cityName: "新北",
              pinYin: "xintai1",
              gangAoTai: true,
              hot: false,
              longitude: "121.476",
              latitude: "25.0153"
            },
            {
              id: 172,
              cityName: "新乡",
              pinYin: "xinxiang",
              gangAoTai: false,
              hot: false,
              longitude: "113.934",
              latitude: "35.309"
            },
            {
              id: 182,
              cityName: "信阳",
              pinYin: "xinyang",
              gangAoTai: false,
              hot: false,
              longitude: "114.099",
              latitude: "32.1532"
            },
            {
              id: 350,
              cityName: "新余",
              pinYin: "xinyu",
              gangAoTai: false,
              hot: false,
              longitude: "114.924",
              latitude: "27.8236"
            },
            {
              id: 277,
              cityName: "忻州",
              pinYin: "xinzhousx",
              gangAoTai: false,
              hot: false,
              longitude: "112.74",
              latitude: "38.422"
            },
            {
              id: 4012,
              cityName: "新竹",
              pinYin: "xinzhu",
              gangAoTai: true,
              hot: false,
              longitude: "121.023",
              latitude: "24.8297"
            },
            {
              id: 58,
              cityName: "西双版纳",
              pinYin: "xishuangbanna",
              gangAoTai: false,
              hot: false,
              longitude: "100.803",
              latitude: "22.0155"
            },
            {
              id: 238,
              cityName: "宣城",
              pinYin: "xuancheng",
              gangAoTai: false,
              hot: false,
              longitude: "118.766",
              latitude: "30.9465"
            },
            {
              id: 179,
              cityName: "许昌",
              pinYin: "xuchangh",
              gangAoTai: false,
              hot: false,
              longitude: "113.859",
              latitude: "34.0417"
            },
            {
              id: 139,
              cityName: "徐州",
              pinYin: "xuzhou",
              gangAoTai: false,
              hot: false,
              longitude: "117.189",
              latitude: "34.2696"
            }
          ]
        },
        {
          group: "Y",
          cities: [
            {
              id: 104,
              cityName: "雅安",
              pinYin: "yaan",
              gangAoTai: false,
              hot: false,
              longitude: "103.049",
              latitude: "30.0164"
            },
            {
              id: 25,
              cityName: "延安",
              pinYin: "yanan",
              gangAoTai: false,
              hot: false,
              longitude: "109.496",
              latitude: "36.591"
            },
            {
              id: 197,
              cityName: "延边",
              pinYin: "yanbian",
              gangAoTai: false,
              hot: false,
              longitude: "129.481",
              latitude: "42.9166"
            },
            {
              id: 54,
              cityName: "盐城",
              pinYin: "yancheng",
              gangAoTai: false,
              hot: false,
              longitude: "120.168",
              latitude: "33.3553"
            },
            {
              id: 81,
              cityName: "阳江",
              pinYin: "yangjiang",
              gangAoTai: false,
              hot: false,
              longitude: "111.989",
              latitude: "21.8648"
            },
            {
              id: 271,
              cityName: "阳泉",
              pinYin: "yangquan",
              gangAoTai: false,
              hot: false,
              longitude: "113.587",
              latitude: "37.8624"
            },
            {
              id: 26,
              cityName: "扬州",
              pinYin: "yangzhou",
              gangAoTai: false,
              hot: false,
              longitude: "119.42",
              latitude: "32.4001"
            },
            {
              id: 44,
              cityName: "烟台",
              pinYin: "yantai",
              gangAoTai: false,
              hot: false,
              longitude: "121.454",
              latitude: "37.4698"
            },
            {
              id: 95,
              cityName: "宜宾",
              pinYin: "yibin",
              gangAoTai: false,
              hot: false,
              longitude: "104.649",
              latitude: "28.7589"
            },
            {
              id: 321,
              cityName: "宜昌",
              pinYin: "yichang",
              gangAoTai: false,
              hot: false,
              longitude: "111.293",
              latitude: "30.6976"
            },
            {
              id: 203,
              cityName: "伊春",
              pinYin: "yichun",
              gangAoTai: false,
              hot: false,
              longitude: "128.848",
              latitude: "47.7333"
            },
            {
              id: 354,
              cityName: "宜春",
              pinYin: "yichunj",
              gangAoTai: false,
              hot: false,
              longitude: "114.423",
              latitude: "27.821"
            },
            {
              id: 4013,
              cityName: "宜兰",
              pinYin: "yilan1",
              gangAoTai: true,
              hot: false,
              longitude: "121.774",
              latitude: "24.7346"
            },
            {
              id: 380,
              cityName: "伊犁",
              pinYin: "yili1",
              gangAoTai: false,
              hot: false,
              longitude: "81.3308",
              latitude: "43.9228"
            },
            {
              id: 282,
              cityName: "银川",
              pinYin: "yinchuan",
              gangAoTai: false,
              hot: false,
              longitude: "106.242",
              latitude: "38.4883"
            },
            {
              id: 35,
              cityName: "营口",
              pinYin: "yingkou",
              gangAoTai: false,
              hot: false,
              longitude: "122.241",
              latitude: "40.6726"
            },
            {
              id: 351,
              cityName: "鹰潭",
              pinYin: "yingtan",
              gangAoTai: false,
              hot: false,
              longitude: "117.076",
              latitude: "28.2659"
            },
            {
              id: 343,
              cityName: "益阳",
              pinYin: "yiyang",
              gangAoTai: false,
              hot: false,
              longitude: "112.362",
              latitude: "28.5601"
            },
            {
              id: 340,
              cityName: "永州",
              pinYin: "yongzhou",
              gangAoTai: false,
              hot: false,
              longitude: "111.62",
              latitude: "26.4258"
            },
            {
              id: 337,
              cityName: "岳阳",
              pinYin: "yueyang",
              gangAoTai: false,
              hot: false,
              longitude: "113.135",
              latitude: "29.3627"
            },
            {
              id: 246,
              cityName: "玉林",
              pinYin: "yulin",
              gangAoTai: false,
              hot: false,
              longitude: "110.171",
              latitude: "22.6422"
            },
            {
              id: 306,
              cityName: "榆林",
              pinYin: "yulinshi",
              gangAoTai: false,
              hot: false,
              longitude: "109.741",
              latitude: "38.2913"
            },
            {
              id: 276,
              cityName: "运城",
              pinYin: "yunchengsx",
              gangAoTai: false,
              hot: false,
              longitude: "111.013",
              latitude: "35.0324"
            },
            {
              id: 85,
              cityName: "云浮",
              pinYin: "yunfu",
              gangAoTai: false,
              hot: false,
              longitude: "112.051",
              latitude: "22.9208"
            },
            {
              id: 4014,
              cityName: "云林",
              pinYin: "yunlin",
              gangAoTai: true,
              hot: false,
              longitude: "120.536",
              latitude: "23.7023"
            },
            {
              id: 315,
              cityName: "玉树",
              pinYin: "yushu",
              gangAoTai: false,
              hot: false,
              longitude: "97.0159",
              latitude: "32.9986"
            },
            {
              id: 359,
              cityName: "玉溪",
              pinYin: "yuxi",
              gangAoTai: false,
              hot: false,
              longitude: "102.553",
              latitude: "24.3575"
            }
          ]
        },
        {
          group: "Z",
          cities: [
            {
              id: 38,
              cityName: "枣庄",
              pinYin: "zaozhuang",
              gangAoTai: false,
              hot: false,
              longitude: "117.33",
              latitude: "34.816"
            },
            {
              id: 342,
              cityName: "张家界",
              pinYin: "zhangjiajie",
              gangAoTai: false,
              hot: false,
              longitude: "110.483",
              latitude: "29.1259"
            },
            {
              id: 60,
              cityName: "张家口",
              pinYin: "zhangjiakou",
              gangAoTai: false,
              hot: false,
              longitude: "114.894",
              latitude: "40.8301"
            },
            {
              id: 292,
              cityName: "张掖",
              pinYin: "zhangye",
              gangAoTai: false,
              hot: false,
              longitude: "100.456",
              latitude: "38.9322"
            },
            {
              id: 149,
              cityName: "漳州",
              pinYin: "zhangzhou",
              gangAoTai: false,
              hot: false,
              longitude: "117.654",
              latitude: "24.5192"
            },
            {
              id: 76,
              cityName: "湛江",
              pinYin: "zhanjiang",
              gangAoTai: false,
              hot: false,
              longitude: "110.366",
              latitude: "21.2766"
            },
            {
              id: 77,
              cityName: "肇庆",
              pinYin: "zhaoqing",
              gangAoTai: false,
              hot: false,
              longitude: "112.472",
              latitude: "23.0529"
            },
            {
              id: 361,
              cityName: "昭通",
              pinYin: "zhaotong",
              gangAoTai: false,
              hot: false,
              longitude: "103.723",
              latitude: "27.344"
            },
            {
              id: 167,
              cityName: "郑州",
              pinYin: "zhengzhou",
              gangAoTai: false,
              hot: false,
              longitude: "113.643",
              latitude: "34.7519"
            },
            {
              id: 27,
              cityName: "镇江",
              pinYin: "zhenjiang",
              gangAoTai: false,
              hot: false,
              longitude: "119.432",
              latitude: "32.1949"
            },
            {
              id: 74,
              cityName: "中山",
              pinYin: "zhongshan",
              gangAoTai: false,
              hot: false,
              longitude: "113.399",
              latitude: "22.5191"
            },
            {
              id: 286,
              cityName: "中卫",
              pinYin: "zhongwei",
              gangAoTai: false,
              hot: false,
              longitude: "105.203",
              latitude: "37.5063"
            },
            {
              id: 183,
              cityName: "周口",
              pinYin: "zhoukou",
              gangAoTai: false,
              hot: false,
              longitude: "114.704",
              latitude: "33.632"
            },
            {
              id: 20,
              cityName: "舟山",
              pinYin: "zhoushan",
              gangAoTai: false,
              hot: false,
              longitude: "122.214",
              latitude: "29.9911"
            },
            {
              id: 51,
              cityName: "珠海",
              pinYin: "zhuhai",
              gangAoTai: false,
              hot: false,
              longitude: "113.583",
              latitude: "22.2764"
            },
            {
              id: 184,
              cityName: "驻马店",
              pinYin: "zhumadian",
              gangAoTai: false,
              hot: false,
              longitude: "114.029",
              latitude: "33.0191"
            },
            {
              id: 333,
              cityName: "株洲",
              pinYin: "zhuzhou",
              gangAoTai: false,
              hot: false,
              longitude: "113.141",
              latitude: "27.8337"
            },
            {
              id: 210,
              cityName: "淄博",
              pinYin: "zibo",
              gangAoTai: false,
              hot: false,
              longitude: "118.061",
              latitude: "36.8192"
            },
            {
              id: 89,
              cityName: "自贡",
              pinYin: "zigong",
              gangAoTai: false,
              hot: false,
              longitude: "104.785",
              latitude: "29.3454"
            },
            {
              id: 106,
              cityName: "资阳",
              pinYin: "ziyangsc",
              gangAoTai: false,
              hot: false,
              longitude: "104.634",
              latitude: "30.135"
            },
            {
              id: 119,
              cityName: "遵义",
              pinYin: "zunyi",
              gangAoTai: false,
              hot: false,
              longitude: "106.937",
              latitude: "27.729"
            }
          ]
        }
      ]
    },
    cityGroupOverSea: {
      title: "海外",
      hotCities: [
        {
          id: 4152,
          cityName: "巴厘岛",
          pinYin: "balidao",
          gangAoTai: false,
          hot: false,
          longitude: "114.51",
          latitude: "-8.4543"
        },
        {
          id: 4176,
          cityName: "芭提雅",
          pinYin: "batiya",
          gangAoTai: false,
          hot: false,
          longitude: "100.853",
          latitude: "12.8869"
        },
        {
          id: 4190,
          cityName: "东京",
          pinYin: "dongjing",
          gangAoTai: false,
          hot: true,
          longitude: "139.57",
          latitude: "35.6735"
        },
        {
          id: 4191,
          cityName: "大阪",
          pinYin: "daban",
          gangAoTai: false,
          hot: true,
          longitude: "135.46",
          latitude: "34.6785"
        },
        {
          id: 4158,
          cityName: "吉隆坡",
          pinYin: "jilongpo",
          gangAoTai: false,
          hot: false,
          longitude: "101.617",
          latitude: "3.1392"
        },
        {
          id: 4192,
          cityName: "京都",
          pinYin: "jingdu",
          gangAoTai: false,
          hot: true,
          longitude: "135.691",
          latitude: "35.0062"
        },
        {
          id: 4208,
          cityName: "济州岛",
          pinYin: "jizhoudao",
          gangAoTai: false,
          hot: false,
          longitude: "126.288",
          latitude: "33.3358"
        },
        {
          id: 4310,
          cityName: "洛杉矶",
          pinYin: "luoshanji",
          gangAoTai: false,
          hot: false,
          longitude: "-118.692",
          latitude: "34.0208"
        },
        {
          id: 4179,
          cityName: "曼谷",
          pinYin: "mangu",
          gangAoTai: false,
          hot: true,
          longitude: "100.352",
          latitude: "13.7251"
        },
        {
          id: 4244,
          cityName: "墨尔本",
          pinYin: "moerben1",
          gangAoTai: false,
          hot: false,
          longitude: "144.518",
          latitude: "-37.8579"
        },
        {
          id: 4177,
          cityName: "普吉岛",
          pinYin: "pujidao",
          gangAoTai: false,
          hot: false,
          longitude: "98.2195",
          latitude: "7.9668"
        },
        {
          id: 4175,
          cityName: "清迈",
          pinYin: "qingmai",
          gangAoTai: false,
          hot: false,
          longitude: "98.8863",
          latitude: "18.7719"
        },
        {
          id: 4178,
          cityName: "苏梅岛",
          pinYin: "sumeidao",
          gangAoTai: false,
          hot: false,
          longitude: "99.9312",
          latitude: "9.5013"
        },
        {
          id: 4206,
          cityName: "首尔",
          pinYin: "shouer",
          gangAoTai: false,
          hot: false,
          longitude: "126.849",
          latitude: "37.5653"
        },
        {
          id: 4217,
          cityName: "新加坡",
          pinYin: "xinjiapo",
          gangAoTai: false,
          hot: false,
          longitude: "103.566",
          latitude: "1.3154"
        },
        {
          id: 4413,
          cityName: "悉尼",
          pinYin: "xini",
          gangAoTai: false,
          hot: false,
          longitude: "151.209",
          latitude: "-33.865"
        }
      ],
      cities: [
        {
          group: "A",
          cities: [
            {
              id: 10291,
              cityName: "爱知",
              pinYin: "Aichi",
              gangAoTai: false,
              hot: false,
              longitude: "0",
              latitude: "0"
            },
            {
              id: 10311,
              cityName: "青森",
              pinYin: "Aomori",
              gangAoTai: false,
              hot: false,
              longitude: "0",
              latitude: "0"
            },
            {
              id: 202840,
              cityName: "阿德莱德",
              pinYin: "adelaide",
              gangAoTai: false,
              hot: false,
              longitude: "138.601",
              latitude: "-34.9284"
            },
            {
              id: 4307,
              cityName: "奥兰多",
              pinYin: "aolanduo",
              gangAoTai: false,
              hot: false,
              longitude: "-81.5088",
              latitude: "28.4814"
            },
            {
              id: 4401,
              cityName: "奥克兰",
              pinYin: "aokelan",
              gangAoTai: false,
              hot: false,
              longitude: "174.305",
              latitude: "-36.8606"
            },
            {
              id: 4420,
              cityName: "爱丁堡",
              pinYin: "aidingbao",
              gangAoTai: false,
              hot: false,
              longitude: "-3.1914",
              latitude: "55.9445"
            },
            {
              id: 4430,
              cityName: "阿维尼翁",
              pinYin: "aweiniweng",
              gangAoTai: false,
              hot: false,
              longitude: "4.7632",
              latitude: "43.9417"
            },
            {
              id: 4433,
              cityName: "阿尔勒",
              pinYin: "aerluo",
              gangAoTai: false,
              hot: false,
              longitude: "4.3711",
              latitude: "43.5447"
            },
            {
              id: 4462,
              cityName: "阿姆斯特丹",
              pinYin: "amusitedan",
              gangAoTai: false,
              hot: false,
              longitude: "4.54",
              latitude: "52.22"
            },
            {
              id: 200341,
              cityName: "安帕瓦",
              pinYin: "an pa wa ",
              gangAoTai: false,
              hot: false,
              longitude: "99.9581",
              latitude: "13.4248"
            },
            {
              id: 202393,
              cityName: "阿讷西",
              pinYin: "anexi",
              gangAoTai: false,
              hot: false,
              longitude: "6.1294",
              latitude: "45.8992"
            }
          ]
        },
        {
          group: "B",
          cities: [
            {
              id: 10275,
              cityName: "巴淡岛",
              pinYin: "badandao",
              gangAoTai: false,
              hot: false,
              longitude: "0",
              latitude: "0"
            },
            {
              id: 10277,
              cityName: "茂物",
              pinYin: "Bogor",
              gangAoTai: false,
              hot: false,
              longitude: "0",
              latitude: "0"
            },
            {
              id: 202805,
              cityName: "巴都丁宜",
              pinYin: "badudingyi",
              gangAoTai: false,
              hot: false,
              longitude: "0",
              latitude: "0"
            },
            {
              id: 4152,
              cityName: "巴厘岛",
              pinYin: "balidao",
              gangAoTai: false,
              hot: false,
              longitude: "114.51",
              latitude: "-8.4543"
            },
            {
              id: 4162,
              cityName: "槟城",
              pinYin: "bincheng",
              gangAoTai: false,
              hot: false,
              longitude: "100.222",
              latitude: "5.3543"
            },
            {
              id: 4166,
              cityName: "必打灵查亚",
              pinYin: "bidalingchaya",
              gangAoTai: false,
              hot: false,
              longitude: "101.538",
              latitude: "3.1381"
            },
            {
              id: 4173,
              cityName: "巴拉望岛",
              pinYin: "balawangdao",
              gangAoTai: false,
              hot: false,
              longitude: "117.322",
              latitude: "9.8786"
            },
            {
              id: 4174,
              cityName: "薄荷岛",
              pinYin: "bohedao",
              gangAoTai: false,
              hot: false,
              longitude: "123.91",
              latitude: "9.8813"
            },
            {
              id: 4176,
              cityName: "芭提雅",
              pinYin: "batiya",
              gangAoTai: false,
              hot: false,
              longitude: "100.853",
              latitude: "12.8869"
            },
            {
              id: 4186,
              cityName: "拜县",
              pinYin: "baixian",
              gangAoTai: false,
              hot: false,
              longitude: "98.1085",
              latitude: "19.3652"
            },
            {
              id: 4247,
              cityName: "布鲁塞尔",
              pinYin: "bulusaier",
              gangAoTai: false,
              hot: false,
              longitude: "4.3052",
              latitude: "50.8551"
            },
            {
              id: 4249,
              cityName: "巴黎",
              pinYin: "bali2",
              gangAoTai: false,
              hot: false,
              longitude: "2.2071",
              latitude: "48.859"
            },
            {
              id: 4257,
              cityName: "柏林",
              pinYin: "bolin",
              gangAoTai: false,
              hot: false,
              longitude: "13.1443",
              latitude: "52.5076"
            },
            {
              id: 4267,
              cityName: "巴塞罗那",
              pinYin: "basailuona",
              gangAoTai: false,
              hot: false,
              longitude: "2.0786",
              latitude: "41.3949"
            },
            {
              id: 4315,
              cityName: "波士顿",
              pinYin: "boshidun",
              gangAoTai: false,
              hot: false,
              longitude: "-71.1972",
              latitude: "42.3135"
            },
            {
              id: 4375,
              cityName: "波尔图",
              pinYin: "boertu",
              gangAoTai: false,
              hot: false,
              longitude: "-8.6919",
              latitude: "41.1623"
            },
            {
              id: 4417,
              cityName: "布里斯班",
              pinYin: "bulisiban",
              gangAoTai: false,
              hot: false,
              longitude: "152.442",
              latitude: "-27.4051"
            },
            {
              id: 4424,
              cityName: "伯明翰",
              pinYin: "bominghan",
              gangAoTai: false,
              hot: false,
              longitude: "-2.0037",
              latitude: "52.4776"
            },
            {
              id: 4432,
              cityName: "波尔多",
              pinYin: "boerduo",
              gangAoTai: false,
              hot: false,
              longitude: "-0.6562",
              latitude: "44.8638"
            },
            {
              id: 4475,
              cityName: "巴塞尔",
              pinYin: "basaier",
              gangAoTai: false,
              hot: false,
              longitude: "7.6",
              latitude: "47.5667"
            },
            {
              id: 201580,
              cityName: "波兰特",
              pinYin: "bolante",
              gangAoTai: false,
              hot: false,
              longitude: "-122.676",
              latitude: "45.5231"
            },
            {
              id: 200161,
              cityName: "布拉格",
              pinYin: "bulage",
              gangAoTai: false,
              hot: false,
              longitude: "0",
              latitude: "0"
            },
            {
              id: 200223,
              cityName: "不列颠哥伦比",
              pinYin: "British Columbia",
              gangAoTai: false,
              hot: false,
              longitude: "0",
              latitude: "0"
            },
            {
              id: 200225,
              cityName: "马德望",
              pinYin: "Battambang",
              gangAoTai: false,
              hot: false,
              longitude: "0",
              latitude: "0"
            },
            {
              id: 202302,
              cityName: "贝尔法期特",
              pinYin: "beierfaqite",
              gangAoTai: false,
              hot: false,
              longitude: "-5.9301",
              latitude: "54.5973"
            },
            {
              id: 200294,
              cityName: "巴图",
              pinYin: "ba tu ",
              gangAoTai: false,
              hot: false,
              longitude: "112.522",
              latitude: "-7.8326"
            },
            {
              id: 200340,
              cityName: "沙没巴干府",
              pinYin: "bei lan fu",
              gangAoTai: false,
              hot: false,
              longitude: "100.706",
              latitude: "13.5853"
            },
            {
              id: 200348,
              cityName: "北柳府",
              pinYin: "bei liu fu ",
              gangAoTai: false,
              hot: false,
              longitude: "101.056",
              latitude: "13.7198"
            },
            {
              id: 200360,
              cityName: "班武里府",
              pinYin: "ban wu li fu",
              gangAoTai: false,
              hot: false,
              longitude: "99.7244",
              latitude: "11.8606"
            },
            {
              id: 200446,
              cityName: "碧瑶",
              pinYin: "biyao",
              gangAoTai: false,
              hot: false,
              longitude: "120.591",
              latitude: "16.4168"
            },
            {
              id: 200479,
              cityName: "别府",
              pinYin: "biefu",
              gangAoTai: false,
              hot: false,
              longitude: "139.053",
              latitude: "35.0895"
            },
            {
              id: 200538,
              cityName: "巴拉万",
              pinYin: "balawan",
              gangAoTai: false,
              hot: false,
              longitude: "119.026",
              latitude: "10.1172"
            },
            {
              id: 200589,
              cityName: "布达佩斯",
              pinYin: "budapeisi",
              gangAoTai: false,
              hot: false,
              longitude: "19.0402",
              latitude: "47.4979"
            }
          ]
        },
        {
          group: "C",
          cities: [
            {
              id: 202754,
              cityName: "川口市",
              pinYin: "chuankoushi",
              gangAoTai: false,
              hot: false,
              longitude: "0",
              latitude: "0"
            },
            {
              id: 10263,
              cityName: "春蓬",
              pinYin: "Chumphon",
              gangAoTai: false,
              hot: false,
              longitude: "0",
              latitude: "0"
            },
            {
              id: 200735,
              cityName: "茶胶",
              pinYin: "chajiao",
              gangAoTai: false,
              hot: false,
              longitude: "104.799",
              latitude: "10.9322"
            },
            {
              id: 10274,
              cityName: "武里喃",
              pinYin: "Changwat Burinam",
              gangAoTai: false,
              hot: false,
              longitude: "0",
              latitude: "0"
            },
            {
              id: 4195,
              cityName: "冲绳",
              pinYin: "chongsheng",
              gangAoTai: false,
              hot: false,
              longitude: "127.156",
              latitude: "26.5851"
            },
            {
              id: 4201,
              cityName: "长野",
              pinYin: "changye",
              gangAoTai: false,
              hot: false,
              longitude: "137.47",
              latitude: "36.1142"
            },
            {
              id: 4203,
              cityName: "长崎",
              pinYin: "changqi",
              gangAoTai: false,
              hot: false,
              longitude: "129.492",
              latitude: "32.7592"
            },
            {
              id: 200121,
              cityName: "宿雾",
              pinYin: "Cebu",
              gangAoTai: false,
              hot: false,
              longitude: "0",
              latitude: "0"
            },
            {
              id: 200351,
              cityName: "春武里府",
              pinYin: "chun wu li fu",
              gangAoTai: false,
              hot: false,
              longitude: "101.024",
              latitude: "13.3508"
            }
          ]
        },
        {
          group: "D",
          cities: [
            {
              id: 200706,
              cityName: "大叻",
              pinYin: "dale",
              gangAoTai: false,
              hot: false,
              longitude: "108.458",
              latitude: "11.9404"
            },
            {
              id: 10284,
              cityName: "大田",
              pinYin: "Daejeon",
              gangAoTai: false,
              hot: false,
              longitude: "0",
              latitude: "0"
            },
            {
              id: 202831,
              cityName: "东大阪市",
              pinYin: "dongdabanshi",
              gangAoTai: false,
              hot: false,
              longitude: "135.615",
              latitude: "34.6725"
            },
            {
              id: 4190,
              cityName: "东京",
              pinYin: "dongjing",
              gangAoTai: false,
              hot: false,
              longitude: "139.57",
              latitude: "35.6735"
            },
            {
              id: 4191,
              cityName: "大阪",
              pinYin: "daban",
              gangAoTai: false,
              hot: false,
              longitude: "135.46",
              latitude: "34.6785"
            },
            {
              id: 4218,
              cityName: "迪拜",
              pinYin: "dibai",
              gangAoTai: false,
              hot: false,
              longitude: "54.949",
              latitude: "25.0742"
            },
            {
              id: 4241,
              cityName: "多哈",
              pinYin: "duoha",
              gangAoTai: false,
              hot: false,
              longitude: "51.4592",
              latitude: "25.3041"
            },
            {
              id: 4296,
              cityName: "多伦多",
              pinYin: "duolunduo",
              gangAoTai: false,
              hot: false,
              longitude: "-79.6582",
              latitude: "43.7184"
            },
            {
              id: 4438,
              cityName: "杜塞尔多夫",
              pinYin: "dusaierduofu",
              gangAoTai: false,
              hot: false,
              longitude: "6.6743",
              latitude: "51.2386"
            },
            {
              id: 200076,
              cityName: "但尼丁",
              pinYin: "danniding",
              gangAoTai: false,
              hot: false,
              longitude: "170.494",
              latitude: "-45.8869"
            },
            {
              id: 200253,
              cityName: "杜马格特",
              pinYin: "dumagete",
              gangAoTai: false,
              hot: false,
              longitude: "0",
              latitude: "0"
            },
            {
              id: 200337,
              cityName: "丁加奴州",
              pinYin: "ding jia nu zhou ",
              gangAoTai: false,
              hot: false,
              longitude: "102.898",
              latitude: "5.0359"
            },
            {
              id: 200430,
              cityName: "大城府",
              pinYin: "dachengfu",
              gangAoTai: false,
              hot: false,
              longitude: "100.567",
              latitude: "14.3424"
            },
            {
              id: 200523,
              cityName: "淡路",
              pinYin: "danlu",
              gangAoTai: false,
              hot: false,
              longitude: "134.916",
              latitude: "34.5071"
            },
            {
              id: 200525,
              cityName: "大津",
              pinYin: "dajin",
              gangAoTai: false,
              hot: false,
              longitude: "135.882",
              latitude: "35.0763"
            },
            {
              id: 200560,
              cityName: "大邱",
              pinYin: "daqiu",
              gangAoTai: false,
              hot: false,
              longitude: "128.578",
              latitude: "35.7898"
            }
          ]
        },
        {
          group: "E",
          cities: [
            {
              id: 202820,
              cityName: "尔湾市",
              pinYin: "erwanshi",
              gangAoTai: false,
              hot: false,
              longitude: "0",
              latitude: "0"
            }
          ]
        },
        {
          group: "F",
          cities: [
            {
              id: 200719,
              cityName: "藩切",
              pinYin: "fanqie",
              gangAoTai: false,
              hot: false,
              longitude: "108.261",
              latitude: "10.9805"
            },
            {
              id: 10297,
              cityName: "福岛",
              pinYin: "Fukushima",
              gangAoTai: false,
              hot: false,
              longitude: "0",
              latitude: "0"
            },
            {
              id: 10298,
              cityName: "福井",
              pinYin: "Fukui",
              gangAoTai: false,
              hot: false,
              longitude: "0",
              latitude: "0"
            },
            {
              id: 4196,
              cityName: "福冈",
              pinYin: "fugang",
              gangAoTai: false,
              hot: false,
              longitude: "130.317",
              latitude: "33.5989"
            },
            {
              id: 4207,
              cityName: "釜山",
              pinYin: "fushan",
              gangAoTai: false,
              hot: false,
              longitude: "128.931",
              latitude: "35.1646"
            },
            {
              id: 4258,
              cityName: "法兰克福",
              pinYin: "falankefu",
              gangAoTai: false,
              hot: false,
              longitude: "8.4961",
              latitude: "50.1213"
            },
            {
              id: 4316,
              cityName: "费城",
              pinYin: "feicheng1",
              gangAoTai: false,
              hot: false,
              longitude: "-75.2581",
              latitude: "40.0049"
            },
            {
              id: 4391,
              cityName: "佛罗伦萨",
              pinYin: "foluolunsa",
              gangAoTai: false,
              hot: false,
              longitude: "11.1709",
              latitude: "43.7801"
            },
            {
              id: 200262,
              cityName: "佛统",
              pinYin: "fotong",
              gangAoTai: false,
              hot: false,
              longitude: "100.03",
              latitude: "13.49"
            },
            {
              id: 204513,
              cityName: "富国岛",
              pinYin: "fuguodao",
              gangAoTai: false,
              hot: false,
              longitude: "104.002",
              latitude: "10.4111"
            },
            {
              id: 200578,
              cityName: "富良野",
              pinYin: "fuliangye",
              gangAoTai: false,
              hot: false,
              longitude: "142.452",
              latitude: "43.3012"
            }
          ]
        },
        {
          group: "G",
          cities: [
            {
              id: 202795,
              cityName: "哥打京那巴魯",
              pinYin: "gedajingnabalu",
              gangAoTai: false,
              hot: false,
              longitude: "0",
              latitude: "0"
            },
            {
              id: 10288,
              cityName: "庆州",
              pinYin: "Gyeongju",
              gangAoTai: false,
              hot: false,
              longitude: "0",
              latitude: "0"
            },
            {
              id: 4164,
              cityName: "古晋",
              pinYin: "gujin",
              gangAoTai: false,
              hot: false,
              longitude: "110.186",
              latitude: "1.6032"
            },
            {
              id: 4188,
              cityName: "狗骨岛",
              pinYin: "gougudao",
              gangAoTai: false,
              hot: false,
              longitude: "102.534",
              latitude: "11.6149"
            },
            {
              id: 4194,
              cityName: "广岛",
              pinYin: "guangdao",
              gangAoTai: false,
              hot: false,
              longitude: "132.407",
              latitude: "34.3939"
            },
            {
              id: 4254,
              cityName: "戛纳",
              pinYin: "gana",
              gangAoTai: false,
              hot: false,
              longitude: "6.931",
              latitude: "43.5549"
            },
            {
              id: 4377,
              cityName: "哥德堡",
              pinYin: "gedebao",
              gangAoTai: false,
              hot: false,
              longitude: "11.6135",
              latitude: "57.702"
            },
            {
              id: 202049,
              cityName: "格拉茨",
              pinYin: "gelaci",
              gangAoTai: false,
              hot: false,
              longitude: "15.4395",
              latitude: "47.0707"
            },
            {
              id: 202341,
              cityName: "根特",
              pinYin: "gente",
              gangAoTai: false,
              hot: false,
              longitude: "3.7174",
              latitude: "51.0543"
            },
            {
              id: 200339,
              cityName: "哥打巴鲁",
              pinYin: "ge da ba lu ",
              gangAoTai: false,
              hot: false,
              longitude: "102.254",
              latitude: "6.0314"
            },
            {
              id: 200379,
              cityName: "馆山",
              pinYin: "guanshan",
              gangAoTai: false,
              hot: false,
              longitude: "139.862",
              latitude: "34.9867"
            },
            {
              id: 204489,
              cityName: "高山村",
              pinYin: "gaoshancun",
              gangAoTai: false,
              hot: false,
              longitude: "0",
              latitude: "0"
            },
            {
              id: 202458,
              cityName: "格拉纳达",
              pinYin: "gelanada",
              gangAoTai: false,
              hot: false,
              longitude: "-3.5986",
              latitude: "37.1773"
            },
            {
              id: 200425,
              cityName: "高山",
              pinYin: "gaoshan",
              gangAoTai: false,
              hot: false,
              longitude: "137.212",
              latitude: "36.1187"
            },
            {
              id: 200474,
              cityName: "高松",
              pinYin: "gaosong",
              gangAoTai: false,
              hot: false,
              longitude: "134.032",
              latitude: "34.2736"
            }
          ]
        },
        {
          group: "H",
          cities: [
            {
              id: 10292,
              cityName: "函馆",
              pinYin: "hanguan",
              gangAoTai: false,
              hot: false,
              longitude: "0",
              latitude: "0"
            },
            {
              id: 10304,
              cityName: "和歌山",
              pinYin: "hegeshan",
              gangAoTai: false,
              hot: false,
              longitude: "0",
              latitude: "0"
            },
            {
              id: 4180,
              cityName: "华欣",
              pinYin: "huaxin",
              gangAoTai: false,
              hot: false,
              longitude: "99.9057",
              latitude: "12.5914"
            },
            {
              id: 4202,
              cityName: "横滨",
              pinYin: "hengbin",
              gangAoTai: false,
              hot: false,
              longitude: "139.549",
              latitude: "35.4621"
            },
            {
              id: 4232,
              cityName: "胡志明",
              pinYin: "huzhiming",
              gangAoTai: false,
              hot: false,
              longitude: "106.698",
              latitude: "10.7795"
            },
            {
              id: 4233,
              cityName: "河内",
              pinYin: "henei",
              gangAoTai: false,
              hot: false,
              longitude: "105.802",
              latitude: "21.0228"
            },
            {
              id: 4243,
              cityName: "霍巴特",
              pinYin: "huobate",
              gangAoTai: false,
              hot: false,
              longitude: "147.32",
              latitude: "-42.8824"
            },
            {
              id: 4259,
              cityName: "汉堡",
              pinYin: "hanbao",
              gangAoTai: false,
              hot: false,
              longitude: "9.7874",
              latitude: "53.5587"
            },
            {
              id: 4342,
              cityName: "火奴鲁鲁",
              pinYin: "huonululu",
              gangAoTai: false,
              hot: false,
              longitude: "-157.939",
              latitude: "21.3283"
            },
            {
              id: 200979,
              cityName: "海法",
              pinYin: "haifa",
              gangAoTai: false,
              hot: false,
              longitude: "0",
              latitude: "0"
            },
            {
              id: 4402,
              cityName: "惠灵顿",
              pinYin: "huilingdun",
              gangAoTai: false,
              hot: false,
              longitude: "174.622",
              latitude: "-41.244"
            },
            {
              id: 4404,
              cityName: "皇后镇",
              pinYin: "huanghouzhen",
              gangAoTai: false,
              hot: false,
              longitude: "168.622",
              latitude: "-45.0243"
            },
            {
              id: 4414,
              cityName: "黄金海岸",
              pinYin: "huangjinhaian",
              gangAoTai: false,
              hot: false,
              longitude: "153.044",
              latitude: "-27.986"
            },
            {
              id: 200159,
              cityName: "合艾",
              pinYin: "heai",
              gangAoTai: false,
              hot: false,
              longitude: "0",
              latitude: "0"
            },
            {
              id: 204514,
              cityName: "会安",
              pinYin: "huian1",
              gangAoTai: false,
              hot: false,
              longitude: "108.502",
              latitude: "15.9613"
            },
            {
              id: 200423,
              cityName: "弘前",
              pinYin: "hongqian",
              gangAoTai: false,
              hot: false,
              longitude: "140.465",
              latitude: "40.5927"
            },
            {
              id: 200490,
              cityName: "横须贺",
              pinYin: "hengxuhe",
              gangAoTai: false,
              hot: false,
              longitude: "139.798",
              latitude: "35.1198"
            },
            {
              id: 200701,
              cityName: "鸿基",
              pinYin: "hongji",
              gangAoTai: false,
              hot: false,
              longitude: "114.121",
              latitude: "22.5448"
            }
          ]
        },
        {
          group: "I",
          cities: [
            {
              id: 10294,
              cityName: "茨城",
              pinYin: "Ibaraki",
              gangAoTai: false,
              hot: false,
              longitude: "0",
              latitude: "0"
            }
          ]
        },
        {
          group: "J",
          cities: [
            {
              id: 202787,
              cityName: "京畿道",
              pinYin: "jingjidao",
              gangAoTai: false,
              hot: false,
              longitude: "0",
              latitude: "0"
            },
            {
              id: 202800,
              cityName: "江原道",
              pinYin: "jiangyuandao",
              gangAoTai: false,
              hot: false,
              longitude: "0",
              latitude: "0"
            },
            {
              id: 200762,
              cityName: "加勒",
              pinYin: "jiale",
              gangAoTai: false,
              hot: false,
              longitude: "80.221",
              latitude: "6.0535"
            },
            {
              id: 4158,
              cityName: "吉隆坡",
              pinYin: "jilongpo",
              gangAoTai: false,
              hot: false,
              longitude: "101.617",
              latitude: "3.1392"
            },
            {
              id: 202839,
              cityName: "江别",
              pinYin: "jiangbie",
              gangAoTai: false,
              hot: false,
              longitude: "141.539",
              latitude: "43.1039"
            },
            {
              id: 4181,
              cityName: "甲米",
              pinYin: "jiami",
              gangAoTai: false,
              hot: false,
              longitude: "98.4321",
              latitude: "8.0418"
            },
            {
              id: 4192,
              cityName: "京都",
              pinYin: "jingdu",
              gangAoTai: false,
              hot: false,
              longitude: "135.691",
              latitude: "35.0062"
            },
            {
              id: 4198,
              cityName: "静冈市",
              pinYin: "jinggangshi",
              gangAoTai: false,
              hot: false,
              longitude: "138.079",
              latitude: "35.2722"
            },
            {
              id: 4208,
              cityName: "济州岛",
              pinYin: "jizhoudao",
              gangAoTai: false,
              hot: false,
              longitude: "126.288",
              latitude: "33.3358"
            },
            {
              id: 4212,
              cityName: "金边",
              pinYin: "jinbian",
              gangAoTai: false,
              hot: false,
              longitude: "104.75",
              latitude: "11.5797"
            },
            {
              id: 4337,
              cityName: "旧金山",
              pinYin: "jiujinshan",
              gangAoTai: false,
              hot: false,
              longitude: "-122.508",
              latitude: "37.7578"
            },
            {
              id: 4403,
              cityName: "基督城",
              pinYin: "jiducheng",
              gangAoTai: false,
              hot: false,
              longitude: "172.319",
              latitude: "-43.5123"
            },
            {
              id: 4454,
              cityName: "基西米",
              pinYin: "jiximi",
              gangAoTai: false,
              hot: false,
              longitude: "-81.2446",
              latitude: "28.1814"
            },
            {
              id: 201514,
              cityName: "基洛纳",
              pinYin: "jiluona",
              gangAoTai: false,
              hot: false,
              longitude: "-119.496",
              latitude: "49.888"
            },
            {
              id: 200195,
              cityName: "尖竹汶府",
              pinYin: "jianzhuwenfu",
              gangAoTai: false,
              hot: false,
              longitude: "0",
              latitude: "0"
            },
            {
              id: 202255,
              cityName: "剑桥",
              pinYin: "jianqiao",
              gangAoTai: false,
              hot: false,
              longitude: "0.1218",
              latitude: "52.2053"
            },
            {
              id: 200417,
              cityName: "金泽",
              pinYin: "jinze",
              gangAoTai: false,
              hot: false,
              longitude: "136.715",
              latitude: "36.491"
            },
            {
              id: 200482,
              cityName: "今治",
              pinYin: "jinzhi",
              gangAoTai: false,
              hot: false,
              longitude: "132.955",
              latitude: "34.025"
            },
            {
              id: 200527,
              cityName: "姬路",
              pinYin: "jilu",
              gangAoTai: false,
              hot: false,
              longitude: "134.714",
              latitude: "34.8434"
            },
            {
              id: 202745,
              cityName: "加平",
              pinYin: "jiaping",
              gangAoTai: false,
              hot: false,
              longitude: "0",
              latitude: "0"
            }
          ]
        },
        {
          group: "K",
          cities: [
            {
              id: 10293,
              cityName: "川崎",
              pinYin: "Kawasaki",
              gangAoTai: false,
              hot: false,
              longitude: "0",
              latitude: "0"
            },
            {
              id: 10301,
              cityName: "高知",
              pinYin: "Kochi",
              gangAoTai: false,
              hot: false,
              longitude: "0",
              latitude: "0"
            },
            {
              id: 4169,
              cityName: "科伦坡",
              pinYin: "kelunpo",
              gangAoTai: false,
              hot: false,
              longitude: "79.8212",
              latitude: "6.9216"
            },
            {
              id: 10320,
              cityName: "香川",
              pinYin: "Kagawa",
              gangAoTai: false,
              hot: false,
              longitude: "0",
              latitude: "0"
            },
            {
              id: 10322,
              cityName: "熊本",
              pinYin: "Kumamoto",
              gangAoTai: false,
              hot: false,
              longitude: "0",
              latitude: "0"
            },
            {
              id: 4415,
              cityName: "凯恩斯",
              pinYin: "kaiensi",
              gangAoTai: false,
              hot: false,
              longitude: "145.45",
              latitude: "-16.9195"
            },
            {
              id: 4416,
              cityName: "堪培拉",
              pinYin: "kanpeila",
              gangAoTai: false,
              hot: false,
              longitude: "149.12",
              latitude: "-35.2812"
            },
            {
              id: 4435,
              cityName: "科隆",
              pinYin: "kelong1",
              gangAoTai: false,
              hot: false,
              longitude: "6.8272",
              latitude: "50.9574"
            },
            {
              id: 201519,
              cityName: "魁北克",
              pinYin: "kuibeike",
              gangAoTai: false,
              hot: false,
              longitude: "-73.5491",
              latitude: "52.9399"
            },
            {
              id: 201529,
              cityName: "卡尔加里",
              pinYin: "kaerjiali",
              gangAoTai: false,
              hot: false,
              longitude: "-114.071",
              latitude: "51.0486"
            },
            {
              id: 200022,
              cityName: "北碧",
              pinYin: "Kanchanaburi",
              gangAoTai: false,
              hot: false,
              longitude: "0",
              latitude: "0"
            },
            {
              id: 200038,
              cityName: "阁老岛",
              pinYin: "Khao Kho",
              gangAoTai: false,
              hot: false,
              longitude: "0",
              latitude: "0"
            },
            {
              id: 200179,
              cityName: "康提",
              pinYin: "Kandy",
              gangAoTai: false,
              hot: false,
              longitude: "0",
              latitude: "0"
            },
            {
              id: 200206,
              cityName: "白马市",
              pinYin: "Kep",
              gangAoTai: false,
              hot: false,
              longitude: "0",
              latitude: "0"
            },
            {
              id: 200219,
              cityName: "贡布",
              pinYin: "Kampot",
              gangAoTai: false,
              hot: false,
              longitude: "0",
              latitude: "0"
            },
            {
              id: 200228,
              cityName: "考农",
              pinYin: "Khanom",
              gangAoTai: false,
              hot: false,
              longitude: "0",
              latitude: "0"
            },
            {
              id: 202304,
              cityName: "科克",
              pinYin: "keke",
              gangAoTai: false,
              hot: false,
              longitude: "-8.4863",
              latitude: "51.8969"
            },
            {
              id: 200278,
              cityName: "加拉信",
              pinYin: "Kalasin",
              gangAoTai: false,
              hot: false,
              longitude: "0",
              latitude: "0"
            },
            {
              id: 200332,
              cityName: "孔敬府",
              pinYin: "kong jing fu ",
              gangAoTai: false,
              hot: false,
              longitude: "102.842",
              latitude: "16.4761"
            },
            {
              id: 202750,
              cityName: "库萨达斯",
              pinYin: "kusadasi",
              gangAoTai: false,
              hot: false,
              longitude: "0",
              latitude: "0"
            }
          ]
        },
        {
          group: "L",
          cities: [
            {
              id: 202756,
              cityName: "兰塔岛",
              pinYin: "lantadao1",
              gangAoTai: false,
              hot: false,
              longitude: "0",
              latitude: "0"
            },
            {
              id: 10268,
              cityName: "罗勇府",
              pinYin: "luoyongfu",
              gangAoTai: false,
              hot: false,
              longitude: "0",
              latitude: "0"
            },
            {
              id: 10269,
              cityName: "南邦",
              pinYin: "Lampang",
              gangAoTai: false,
              hot: false,
              longitude: "0",
              latitude: "0"
            },
            {
              id: 202781,
              cityName: "栃木",
              pinYin: "limu2",
              gangAoTai: false,
              hot: false,
              longitude: "0",
              latitude: "0"
            },
            {
              id: 4155,
              cityName: "龙目岛",
              pinYin: "longmudao",
              gangAoTai: false,
              hot: false,
              longitude: "115.711",
              latitude: "-8.5814"
            },
            {
              id: 4160,
              cityName: "兰卡威",
              pinYin: "lankawei",
              gangAoTai: false,
              hot: false,
              longitude: "99.7824",
              latitude: "6.35"
            },
            {
              id: 4239,
              cityName: "琅勃拉邦",
              pinYin: "langbolabang",
              gangAoTai: false,
              hot: false,
              longitude: "102.11",
              latitude: "19.8857"
            },
            {
              id: 4248,
              cityName: "伦敦",
              pinYin: "lundun2",
              gangAoTai: false,
              hot: false,
              longitude: "-0.3825",
              latitude: "51.5287"
            },
            {
              id: 4310,
              cityName: "洛杉矶",
              pinYin: "luoshanji",
              gangAoTai: false,
              hot: false,
              longitude: "-118.692",
              latitude: "34.0208"
            },
            {
              id: 4322,
              cityName: "拉斯维加斯",
              pinYin: "lasiweijiasi",
              gangAoTai: false,
              hot: false,
              longitude: "-115.455",
              latitude: "36.1252"
            },
            {
              id: 4349,
              cityName: "里约热内卢 ",
              pinYin: "liyuereneilu",
              gangAoTai: false,
              hot: false,
              longitude: "-43.7285",
              latitude: "-22.9104"
            },
            {
              id: 4374,
              cityName: "里斯本",
              pinYin: "lisiben",
              gangAoTai: false,
              hot: false,
              longitude: "-9.2302",
              latitude: "38.7437"
            },
            {
              id: 4389,
              cityName: "罗马",
              pinYin: "luoma1",
              gangAoTai: false,
              hot: false,
              longitude: "12.3959",
              latitude: "41.9102"
            },
            {
              id: 4405,
              cityName: "罗托鲁阿",
              pinYin: "luotuolua",
              gangAoTai: false,
              hot: false,
              longitude: "176.25",
              latitude: "-38.1386"
            },
            {
              id: 4441,
              cityName: "莱比锡",
              pinYin: "laibixi",
              gangAoTai: false,
              hot: false,
              longitude: "12.2536",
              latitude: "51.3419"
            },
            {
              id: 201859,
              cityName: "雷克雅未克",
              pinYin: "leikeyaweike",
              gangAoTai: false,
              hot: false,
              longitude: "-21.8174",
              latitude: "64.1265"
            },
            {
              id: 200124,
              cityName: "黎府",
              pinYin: "Loei",
              gangAoTai: false,
              hot: false,
              longitude: "0",
              latitude: "0"
            },
            {
              id: 200184,
              cityName: "华富里",
              pinYin: "Lopburi",
              gangAoTai: false,
              hot: false,
              longitude: "0",
              latitude: "0"
            },
            {
              id: 200251,
              cityName: "黎牙实比",
              pinYin: "Legaspi",
              gangAoTai: false,
              hot: false,
              longitude: "0",
              latitude: "0"
            },
            {
              id: 204496,
              cityName: "利马",
              pinYin: "lima",
              gangAoTai: false,
              hot: false,
              longitude: "-77.0345",
              latitude: "-12.0519"
            },
            {
              id: 204518,
              cityName: "吕宋岛",
              pinYin: "lvsongdao",
              gangAoTai: false,
              hot: false,
              longitude: "120.265",
              latitude: "15.2145"
            },
            {
              id: 204517,
              cityName: "丽贝岛",
              pinYin: "libeidao",
              gangAoTai: false,
              hot: false,
              longitude: "99.3059",
              latitude: "6.5354"
            },
            {
              id: 202543,
              cityName: "拉斯佩齐亚",
              pinYin: "lasipeiqiya",
              gangAoTai: false,
              hot: false,
              longitude: "9.8241",
              latitude: "44.1025"
            },
            {
              id: 200492,
              cityName: "鹿儿岛",
              pinYin: "luerdao",
              gangAoTai: false,
              hot: false,
              longitude: "0",
              latitude: "0"
            },
            {
              id: 200575,
              cityName: "镰仓",
              pinYin: "liancang",
              gangAoTai: false,
              hot: false,
              longitude: "139.532",
              latitude: "35.3452"
            },
            {
              id: 200697,
              cityName: "老街",
              pinYin: "laojie",
              gangAoTai: false,
              hot: false,
              longitude: "104.149",
              latitude: "22.3381"
            }
          ]
        },
        {
          group: "M",
          cities: [
            {
              id: 10290,
              cityName: "松山",
              pinYin: "Matsuyama",
              gangAoTai: false,
              hot: false,
              longitude: "0",
              latitude: "0"
            },
            {
              id: 10302,
              cityName: "宫城",
              pinYin: "Miyagi",
              gangAoTai: false,
              hot: false,
              longitude: "0",
              latitude: "0"
            },
            {
              id: 4159,
              cityName: "马六甲",
              pinYin: "maliujia1",
              gangAoTai: false,
              hot: false,
              longitude: "102.001",
              latitude: "2.2739"
            },
            {
              id: 10303,
              cityName: "宫崎",
              pinYin: "Miyazaki",
              gangAoTai: false,
              hot: false,
              longitude: "0",
              latitude: "0"
            },
            {
              id: 202816,
              cityName: "民都鲁",
              pinYin: "minduli",
              gangAoTai: false,
              hot: false,
              longitude: "0",
              latitude: "0"
            },
            {
              id: 4170,
              cityName: "马尼拉",
              pinYin: "manila",
              gangAoTai: false,
              hot: false,
              longitude: "120.945",
              latitude: "14.5982"
            },
            {
              id: 10314,
              cityName: "三重",
              pinYin: "Mie",
              gangAoTai: false,
              hot: false,
              longitude: "0",
              latitude: "0"
            },
            {
              id: 4179,
              cityName: "曼谷",
              pinYin: "mangu",
              gangAoTai: false,
              hot: false,
              longitude: "100.352",
              latitude: "13.7251"
            },
            {
              id: 4199,
              cityName: "名古屋",
              pinYin: "mingguwu",
              gangAoTai: false,
              hot: false,
              longitude: "136.876",
              latitude: "35.1681"
            },
            {
              id: 4214,
              cityName: "马尔代夫",
              pinYin: "maerdaifu",
              gangAoTai: false,
              hot: false,
              longitude: "73.3957",
              latitude: "1.9776"
            },
            {
              id: 4215,
              cityName: "毛里求斯",
              pinYin: "maoliqiusi",
              gangAoTai: false,
              hot: false,
              longitude: "55.4263",
              latitude: "-20.1872"
            },
            {
              id: 4244,
              cityName: "墨尔本",
              pinYin: "moerben1",
              gangAoTai: false,
              hot: false,
              longitude: "144.518",
              latitude: "-37.8579"
            },
            {
              id: 4250,
              cityName: "马赛",
              pinYin: "masai",
              gangAoTai: false,
              hot: false,
              longitude: "5.2647",
              latitude: "43.2806"
            },
            {
              id: 4260,
              cityName: "慕尼黑",
              pinYin: "munihei",
              gangAoTai: false,
              hot: false,
              longitude: "11.4014",
              latitude: "48.1551"
            },
            {
              id: 4298,
              cityName: "蒙特利尔",
              pinYin: "mengtelier",
              gangAoTai: false,
              hot: false,
              longitude: "-73.9917",
              latitude: "45.5603"
            },
            {
              id: 4308,
              cityName: "迈阿密",
              pinYin: "maiami",
              gangAoTai: false,
              hot: false,
              longitude: "-80.3011",
              latitude: "25.7825"
            },
            {
              id: 202965,
              cityName: "美塞",
              pinYin: "meisai",
              gangAoTai: false,
              hot: false,
              longitude: "0",
              latitude: "0"
            },
            {
              id: 4359,
              cityName: "莫斯科",
              pinYin: "mosike",
              gangAoTai: false,
              hot: false,
              longitude: "37.3523",
              latitude: "55.7499"
            },
            {
              id: 4390,
              cityName: "米兰",
              pinYin: "milan",
              gangAoTai: false,
              hot: false,
              longitude: "9.0377",
              latitude: "45.4629"
            },
            {
              id: 4421,
              cityName: "曼彻斯特",
              pinYin: "manchesite",
              gangAoTai: false,
              hot: false,
              longitude: "-2.2361",
              latitude: "53.4669"
            },
            {
              id: 4444,
              cityName: "马德里",
              pinYin: "madeli",
              gangAoTai: false,
              hot: false,
              longitude: "-3.8196",
              latitude: "40.4381"
            },
            {
              id: 201898,
              cityName: "明斯克",
              pinYin: "mingsike",
              gangAoTai: false,
              hot: false,
              longitude: "27.5615",
              latitude: "53.9045"
            },
            {
              id: 200111,
              cityName: "马累",
              pinYin: "Male",
              gangAoTai: false,
              hot: false,
              longitude: "0",
              latitude: "0"
            },
            {
              id: 200318,
              cityName: "棉兰",
              pinYin: "mian lan ",
              gangAoTai: false,
              hot: false,
              longitude: "98.6666",
              latitude: "3.623"
            },
            {
              id: 200316,
              cityName: "玛琅",
              pinYin: "ma lang ",
              gangAoTai: false,
              hot: false,
              longitude: "112.683",
              latitude: "-8.1054"
            },
            {
              id: 200590,
              cityName: "马拉加",
              pinYin: "malajia",
              gangAoTai: false,
              hot: false,
              longitude: "0",
              latitude: "0"
            }
          ]
        },
        {
          group: "N",
          cities: [
            {
              id: 202798,
              cityName: "那坤巴统",
              pinYin: "nakunbatong",
              gangAoTai: false,
              hot: false,
              longitude: "0",
              latitude: "0"
            },
            {
              id: 10286,
              cityName: "南海郡",
              pinYin: "Namhae",
              gangAoTai: false,
              hot: false,
              longitude: "0",
              latitude: "0"
            },
            {
              id: 10307,
              cityName: "奈良",
              pinYin: "Nara",
              gangAoTai: false,
              hot: false,
              longitude: "0",
              latitude: "0"
            },
            {
              id: 10321,
              cityName: "新潟",
              pinYin: "Niigata",
              gangAoTai: false,
              hot: false,
              longitude: "0",
              latitude: "0"
            },
            {
              id: 4251,
              cityName: "尼斯",
              pinYin: "nisi",
              gangAoTai: false,
              hot: false,
              longitude: "7.1826",
              latitude: "43.7033"
            },
            {
              id: 4309,
              cityName: "纽约",
              pinYin: "niuyue",
              gangAoTai: false,
              hot: false,
              longitude: "-74.2582",
              latitude: "40.7058"
            },
            {
              id: 4392,
              cityName: "那不勒斯",
              pinYin: "nabulesi",
              gangAoTai: false,
              hot: false,
              longitude: "14.1029",
              latitude: "40.8538"
            },
            {
              id: 4426,
              cityName: "诺丁汉",
              pinYin: "nuodinghan",
              gangAoTai: false,
              hot: false,
              longitude: "-1.2401",
              latitude: "52.9541"
            },
            {
              id: 4429,
              cityName: "牛津",
              pinYin: "niujin",
              gangAoTai: false,
              hot: false,
              longitude: "-1.2569",
              latitude: "51.7566"
            },
            {
              id: 201204,
              cityName: "纳拉",
              pinYin: "nala",
              gangAoTai: false,
              hot: false,
              longitude: "-7.2896",
              latitude: "15.1689"
            },
            {
              id: 201699,
              cityName: "拿骚",
              pinYin: "nasao",
              gangAoTai: false,
              hot: false,
              longitude: "-77.3554",
              latitude: "25.048"
            },
            {
              id: 200164,
              cityName: "暖武里",
              pinYin: "Nonthaburi",
              gangAoTai: false,
              hot: false,
              longitude: "0",
              latitude: "0"
            },
            {
              id: 200193,
              cityName: "廊开",
              pinYin: "Nong Khai",
              gangAoTai: false,
              hot: false,
              longitude: "0",
              latitude: "0"
            },
            {
              id: 200202,
              cityName: "难府",
              pinYin: "Nan",
              gangAoTai: false,
              hot: false,
              longitude: "0",
              latitude: "0"
            },
            {
              id: 200201,
              cityName: "洛坤",
              pinYin: "Nakhon Si Thammarat",
              gangAoTai: false,
              hot: false,
              longitude: "0",
              latitude: "0"
            },
            {
              id: 200431,
              cityName: "那空沙旺",
              pinYin: "nakongshawang",
              gangAoTai: false,
              hot: false,
              longitude: "100.107",
              latitude: "15.7152"
            },
            {
              id: 200506,
              cityName: "南鱼沼郡",
              pinYin: "nanyuzhaojun",
              gangAoTai: false,
              hot: false,
              longitude: "138.945",
              latitude: "37.035"
            },
            {
              id: 200552,
              cityName: "南奔",
              pinYin: "nanben",
              gangAoTai: false,
              hot: false,
              longitude: "99.0575",
              latitude: "18.564"
            }
          ]
        },
        {
          group: "O",
          cities: [
            {
              id: 10300,
              cityName: "冈山",
              pinYin: "Okayama",
              gangAoTai: false,
              hot: false,
              longitude: "0",
              latitude: "0"
            }
          ]
        },
        {
          group: "P",
          cities: [
            {
              id: 10270,
              cityName: "攀牙府",
              pinYin: "panyafu",
              gangAoTai: false,
              hot: false,
              longitude: "0",
              latitude: "0"
            },
            {
              id: 10271,
              cityName: "彭世洛",
              pinYin: "Phitsanulok",
              gangAoTai: false,
              hot: false,
              longitude: "0",
              latitude: "0"
            },
            {
              id: 10287,
              cityName: "平昌郡",
              pinYin: "pingchangjun",
              gangAoTai: false,
              hot: false,
              longitude: "128.39",
              latitude: "37.3704"
            },
            {
              id: 4177,
              cityName: "普吉岛",
              pinYin: "pujidao",
              gangAoTai: false,
              hot: false,
              longitude: "98.2195",
              latitude: "7.9668"
            },
            {
              id: 4182,
              cityName: "帕岸岛",
              pinYin: "paandao",
              gangAoTai: false,
              hot: false,
              longitude: "99.951",
              latitude: "9.7351"
            },
            {
              id: 4184,
              cityName: "皮皮岛",
              pinYin: "pipidao",
              gangAoTai: false,
              hot: false,
              longitude: "98.7566",
              latitude: "7.7527"
            },
            {
              id: 4245,
              cityName: "珀斯",
              pinYin: "posi",
              gangAoTai: false,
              hot: false,
              longitude: "115.835",
              latitude: "-31.9546"
            },
            {
              id: 202960,
              cityName: "帕侬",
              pinYin: "panong",
              gangAoTai: false,
              hot: false,
              longitude: "0",
              latitude: "0"
            },
            {
              id: 200125,
              cityName: "巴吞他尼",
              pinYin: "Pathum Thani",
              gangAoTai: false,
              hot: false,
              longitude: "0",
              latitude: "0"
            },
            {
              id: 200305,
              cityName: "彭亨州",
              pinYin: "penghengzhou",
              gangAoTai: false,
              hot: false,
              longitude: "101.939",
              latitude: "4.5387"
            },
            {
              id: 202378,
              cityName: "普瓦捷",
              pinYin: "puwajie",
              gangAoTai: false,
              hot: false,
              longitude: "0.3376",
              latitude: "46.5725"
            },
            {
              id: 200355,
              cityName: "素叻府",
              pinYin: "pu wo le zuo",
              gangAoTai: false,
              hot: false,
              longitude: "99.2737",
              latitude: "9.1039"
            },
            {
              id: 200415,
              cityName: "帕府",
              pinYin: "pafu",
              gangAoTai: false,
              hot: false,
              longitude: "100.301",
              latitude: "18.0753"
            },
            {
              id: 200469,
              cityName: "磐城",
              pinYin: "pancheng",
              gangAoTai: false,
              hot: false,
              longitude: "140.838",
              latitude: "37.1271"
            },
            {
              id: 202577,
              cityName: "普拉",
              pinYin: "pula",
              gangAoTai: false,
              hot: false,
              longitude: "13.8496",
              latitude: "44.8666"
            },
            {
              id: 200553,
              cityName: "帕尧",
              pinYin: "payao",
              gangAoTai: false,
              hot: false,
              longitude: "100.157",
              latitude: "19.2732"
            }
          ]
        },
        {
          group: "Q",
          cities: [
            {
              id: 202803,
              cityName: "庆尚南道",
              pinYin: "qingshangnandao",
              gangAoTai: false,
              hot: false,
              longitude: "0",
              latitude: "0"
            },
            {
              id: 202802,
              cityName: "庆尚北道",
              pinYin: "qingshangbeidao",
              gangAoTai: false,
              hot: false,
              longitude: "0",
              latitude: "0"
            },
            {
              id: 202804,
              cityName: "全罗北道",
              pinYin: "quanluobeidao",
              gangAoTai: false,
              hot: false,
              longitude: "0",
              latitude: "0"
            },
            {
              id: 202809,
              cityName: "七岩",
              pinYin: "qiyan",
              gangAoTai: false,
              hot: false,
              longitude: "0",
              latitude: "0"
            },
            {
              id: 4175,
              cityName: "清迈",
              pinYin: "qingmai",
              gangAoTai: false,
              hot: false,
              longitude: "98.8863",
              latitude: "18.7719"
            },
            {
              id: 4185,
              cityName: "清莱",
              pinYin: "qinglai",
              gangAoTai: false,
              hot: false,
              longitude: "99.458",
              latitude: "19.8762"
            },
            {
              id: 4200,
              cityName: "岐阜",
              pinYin: "qifu",
              gangAoTai: false,
              hot: false,
              longitude: "136.403",
              latitude: "35.7992"
            },
            {
              id: 202952,
              cityName: "清佬县",
              pinYin: "qinglaoxian",
              gangAoTai: false,
              hot: false,
              longitude: "0",
              latitude: "0"
            },
            {
              id: 4474,
              cityName: "千叶",
              pinYin: "qianye",
              gangAoTai: false,
              hot: false,
              longitude: "-140.123",
              latitude: "35.6051"
            },
            {
              id: 200515,
              cityName: "全州",
              pinYin: "quanzhou1",
              gangAoTai: false,
              hot: false,
              longitude: "127.221",
              latitude: "35.8365"
            },
            {
              id: 200514,
              cityName: "清州",
              pinYin: "qingzhou1",
              gangAoTai: false,
              hot: false,
              longitude: "127.448",
              latitude: "36.6107"
            },
            {
              id: 200702,
              cityName: "清化",
              pinYin: "qinghua",
              gangAoTai: false,
              hot: false,
              longitude: "105.313",
              latitude: "20.1291"
            }
          ]
        },
        {
          group: "R",
          cities: [
            {
              id: 10279,
              cityName: "日惹",
              pinYin: "rire",
              gangAoTai: false,
              hot: false,
              longitude: "0",
              latitude: "0"
            },
            {
              id: 4209,
              cityName: "仁川",
              pinYin: "renchuan",
              gangAoTai: false,
              hot: false,
              longitude: "126.604",
              latitude: "37.4647"
            },
            {
              id: 4379,
              cityName: "日内瓦",
              pinYin: "rineiwa",
              gangAoTai: false,
              hot: false,
              longitude: "6.1091",
              latitude: "46.2051"
            },
            {
              id: 200252,
              cityName: "叻丕",
              pinYin: "Ratchaburi",
              gangAoTai: false,
              hot: false,
              longitude: "0",
              latitude: "0"
            },
            {
              id: 200570,
              cityName: "热海",
              pinYin: "rehai",
              gangAoTai: false,
              hot: false,
              longitude: "139.053",
              latitude: "35.0895"
            }
          ]
        },
        {
          group: "S",
          cities: [
            {
              id: 10272,
              cityName: "素可泰",
              pinYin: "Sukhothai",
              gangAoTai: false,
              hot: false,
              longitude: "0",
              latitude: "0"
            },
            {
              id: 202811,
              cityName: "梳邦再也",
              pinYin: "shubangzaiye",
              gangAoTai: false,
              hot: false,
              longitude: "0",
              latitude: "0"
            },
            {
              id: 4157,
              cityName: "泗水",
              pinYin: "sishui",
              gangAoTai: false,
              hot: false,
              longitude: "112.641",
              latitude: "-7.2754"
            },
            {
              id: 4161,
              cityName: "沙巴",
              pinYin: "shaba",
              gangAoTai: false,
              hot: false,
              longitude: "115.055",
              latitude: "5.7407"
            },
            {
              id: 4163,
              cityName: "赛城",
              pinYin: "saicheng",
              gangAoTai: false,
              hot: false,
              longitude: "101.631",
              latitude: "2.9292"
            },
            {
              id: 10310,
              cityName: "埼玉",
              pinYin: "Saitama",
              gangAoTai: false,
              hot: false,
              longitude: "0",
              latitude: "0"
            },
            {
              id: 10316,
              cityName: "山梨",
              pinYin: "shanli",
              gangAoTai: false,
              hot: false,
              longitude: "0",
              latitude: "0"
            },
            {
              id: 4178,
              cityName: "苏梅岛",
              pinYin: "sumeidao",
              gangAoTai: false,
              hot: false,
              longitude: "99.9312",
              latitude: "9.5013"
            },
            {
              id: 10324,
              cityName: "滋贺",
              pinYin: "Shiga",
              gangAoTai: false,
              hot: false,
              longitude: "0",
              latitude: "0"
            },
            {
              id: 10325,
              cityName: "佐贺",
              pinYin: "Saga",
              gangAoTai: false,
              hot: false,
              longitude: "0",
              latitude: "0"
            },
            {
              id: 4183,
              cityName: "沙美岛",
              pinYin: "shameidao",
              gangAoTai: false,
              hot: false,
              longitude: "101.438",
              latitude: "12.5523"
            },
            {
              id: 202845,
              cityName: "山景城",
              pinYin: "shanjingcheng",
              gangAoTai: false,
              hot: false,
              longitude: "-122.083",
              latitude: "37.3943"
            },
            {
              id: 4205,
              cityName: "神户",
              pinYin: "shenhu",
              gangAoTai: false,
              hot: false,
              longitude: "135.12",
              latitude: "34.6944"
            },
            {
              id: 4206,
              cityName: "首尔",
              pinYin: "shouer",
              gangAoTai: false,
              hot: false,
              longitude: "126.849",
              latitude: "37.5653"
            },
            {
              id: 4210,
              cityName: "水原",
              pinYin: "shuiyuan",
              gangAoTai: false,
              hot: false,
              longitude: "126.956",
              latitude: "37.2789"
            },
            {
              id: 202869,
              cityName: "圣日耳曼昂莱",
              pinYin: "shengriermananglai",
              gangAoTai: false,
              hot: false,
              longitude: "2.0943",
              latitude: "48.8984"
            },
            {
              id: 202942,
              cityName: "是拉差",
              pinYin: "shilacha",
              gangAoTai: false,
              hot: false,
              longitude: "0",
              latitude: "0"
            },
            {
              id: 4360,
              cityName: "圣彼得堡",
              pinYin: "shengbidebao1",
              gangAoTai: false,
              hot: false,
              longitude: "30.0449",
              latitude: "59.9175"
            },
            {
              id: 4376,
              cityName: "斯德哥尔摩",
              pinYin: "sidegeermo",
              gangAoTai: false,
              hot: false,
              longitude: "17.7074",
              latitude: "59.3262"
            },
            {
              id: 4380,
              cityName: "苏黎世",
              pinYin: "sulishi",
              gangAoTai: false,
              hot: false,
              longitude: "8.4667",
              latitude: "47.3775"
            },
            {
              id: 4387,
              cityName: "圣托里尼岛",
              pinYin: "shengtuolinidao",
              gangAoTai: false,
              hot: false,
              longitude: "25.3506",
              latitude: "36.4073"
            },
            {
              id: 4439,
              cityName: "斯图加特",
              pinYin: "situjiate",
              gangAoTai: false,
              hot: false,
              longitude: "9.0371",
              latitude: "48.7794"
            },
            {
              id: 201594,
              cityName: "萨凡纳",
              pinYin: "safanna",
              gangAoTai: false,
              hot: false,
              longitude: "-81.0998",
              latitude: "32.0835"
            },
            {
              id: 201610,
              cityName: "圣迭戈",
              pinYin: "shengdiege",
              gangAoTai: false,
              hot: false,
              longitude: "-117.161",
              latitude: "32.7157"
            },
            {
              id: 200021,
              cityName: "素攀武里",
              pinYin: "Suphan Buri",
              gangAoTai: false,
              hot: false,
              longitude: "0",
              latitude: "0"
            },
            {
              id: 200335,
              cityName: "森美兰州",
              pinYin: "sen mei lan zhou ",
              gangAoTai: false,
              hot: false,
              longitude: "102.186",
              latitude: "2.8325"
            },
            {
              id: 200333,
              cityName: "宋卡府",
              pinYin: "song ka fu ",
              gangAoTai: false,
              hot: false,
              longitude: "100.571",
              latitude: "7.0871"
            },
            {
              id: 200397,
              cityName: "顺天",
              pinYin: "shuntian",
              gangAoTai: false,
              hot: false,
              longitude: "127.516",
              latitude: "34.9434"
            },
            {
              id: 202456,
              cityName: "塞维利亚",
              pinYin: "saiweiliya",
              gangAoTai: false,
              hot: false,
              longitude: "-5.9845",
              latitude: "37.3891"
            },
            {
              id: 200426,
              cityName: "松本",
              pinYin: "songben",
              gangAoTai: false,
              hot: false,
              longitude: "137.844",
              latitude: "36.2082"
            },
            {
              id: 202575,
              cityName: "萨格勒布",
              pinYin: "sagelebu",
              gangAoTai: false,
              hot: false,
              longitude: "15.9819",
              latitude: "45.815"
            },
            {
              id: 202582,
              cityName: "斯普利特",
              pinYin: "sipulite",
              gangAoTai: false,
              hot: false,
              longitude: "16.4402",
              latitude: "43.5081"
            },
            {
              id: 200593,
              cityName: "塞班岛",
              pinYin: "saibandao",
              gangAoTai: false,
              hot: false,
              longitude: "145.757",
              latitude: "15.1899"
            }
          ]
        },
        {
          group: "T",
          cities: [
            {
              id: 10265,
              cityName: "董里府",
              pinYin: "Trang",
              gangAoTai: false,
              hot: false,
              longitude: "0",
              latitude: "0"
            },
            {
              id: 10296,
              cityName: "德岛",
              pinYin: "Tokushima",
              gangAoTai: false,
              hot: false,
              longitude: "0",
              latitude: "0"
            },
            {
              id: 10299,
              cityName: "富山",
              pinYin: "Toyama",
              gangAoTai: false,
              hot: false,
              longitude: "0",
              latitude: "0"
            },
            {
              id: 10305,
              cityName: "枥木",
              pinYin: "Tochigi",
              gangAoTai: false,
              hot: false,
              longitude: "0",
              latitude: "0"
            },
            {
              id: 202821,
              cityName: "天普市",
              pinYin: "tianpushi",
              gangAoTai: false,
              hot: false,
              longitude: "0",
              latitude: "0"
            },
            {
              id: 4252,
              cityName: "图卢兹",
              pinYin: "tuluzi",
              gangAoTai: false,
              hot: false,
              longitude: "1.3626",
              latitude: "43.6008"
            },
            {
              id: 200988,
              cityName: "特拉维夫",
              pinYin: "telaweifu",
              gangAoTai: false,
              hot: false,
              longitude: "0",
              latitude: "0"
            },
            {
              id: 4419,
              cityName: "塔斯马尼亚",
              pinYin: "tasimaniya",
              gangAoTai: false,
              hot: false,
              longitude: "143.916",
              latitude: "-41.5646"
            },
            {
              id: 200013,
              cityName: "泰安",
              pinYin: "taianjun",
              gangAoTai: false,
              hot: false,
              longitude: "126.311",
              latitude: "36.7206"
            },
            {
              id: 200174,
              cityName: "维多利亚州",
              pinYin: "The State of Victoria",
              gangAoTai: false,
              hot: false,
              longitude: "0",
              latitude: "0"
            },
            {
              id: 200272,
              cityName: "托斯卡纳区",
              pinYin: "Tuscany",
              gangAoTai: false,
              hot: false,
              longitude: "0",
              latitude: "0"
            },
            {
              id: 202364,
              cityName: "图尔",
              pinYin: "tuer",
              gangAoTai: false,
              hot: false,
              longitude: "0.6848",
              latitude: "47.3941"
            },
            {
              id: 200329,
              cityName: "唐格朗",
              pinYin: "tang ge lang ",
              gangAoTai: false,
              hot: false,
              longitude: "106.657",
              latitude: "-6.1759"
            },
            {
              id: 204516,
              cityName: "头顿",
              pinYin: "toudun",
              gangAoTai: false,
              hot: false,
              longitude: "107.093",
              latitude: "10.5841"
            },
            {
              id: 202529,
              cityName: "特雷维索",
              pinYin: "teleiweisuo",
              gangAoTai: false,
              hot: false,
              longitude: "12.243",
              latitude: "45.6669"
            },
            {
              id: 200576,
              cityName: "藤泽",
              pinYin: "tengze",
              gangAoTai: false,
              hot: false,
              longitude: "139.468",
              latitude: "35.3641"
            }
          ]
        },
        {
          group: "U",
          cities: [
            {
              id: 200029,
              cityName: "乌隆",
              pinYin: "Udon Thani",
              gangAoTai: false,
              hot: false,
              longitude: "0",
              latitude: "0"
            },
            {
              id: 200105,
              cityName: "乌泰他尼",
              pinYin: "Uthai Thani",
              gangAoTai: false,
              hot: false,
              longitude: "0",
              latitude: "0"
            },
            {
              id: 200182,
              cityName: "程逸",
              pinYin: "Uttaradit",
              gangAoTai: false,
              hot: false,
              longitude: "0",
              latitude: "0"
            }
          ]
        },
        {
          group: "W",
          cities: [
            {
              id: 4153,
              cityName: "万隆",
              pinYin: "wanlong",
              gangAoTai: false,
              hot: false,
              longitude: "107.573",
              latitude: "-6.9033"
            },
            {
              id: 202813,
              cityName: "文冬",
              pinYin: "wendong",
              gangAoTai: false,
              hot: false,
              longitude: "0",
              latitude: "0"
            },
            {
              id: 4240,
              cityName: "万象",
              pinYin: "wanxiang",
              gangAoTai: false,
              hot: false,
              longitude: "102.536",
              latitude: "17.9606"
            },
            {
              id: 4242,
              cityName: "维提岛",
              pinYin: "weitidao",
              gangAoTai: false,
              hot: false,
              longitude: "177.411",
              latitude: "-17.7914"
            },
            {
              id: 4295,
              cityName: "温哥华",
              pinYin: "wengehua",
              gangAoTai: false,
              hot: false,
              longitude: "-123.264",
              latitude: "49.2563"
            },
            {
              id: 4354,
              cityName: "维也纳",
              pinYin: "weiyena",
              gangAoTai: false,
              hot: false,
              longitude: "16.24",
              latitude: "48.2208"
            },
            {
              id: 4393,
              cityName: "威尼斯",
              pinYin: "weinisi",
              gangAoTai: false,
              hot: false,
              longitude: "12.1016",
              latitude: "45.4059"
            },
            {
              id: 4446,
              cityName: "瓦伦西亚",
              pinYin: "walunxiya",
              gangAoTai: false,
              hot: false,
              longitude: "-0.5065",
              latitude: "39.4691"
            },
            {
              id: 200343,
              cityName: "乌汶府",
              pinYin: "wu wen fu",
              gangAoTai: false,
              hot: false,
              longitude: "104.903",
              latitude: "15.2748"
            },
            {
              id: 200580,
              cityName: "网走",
              pinYin: "wangzou",
              gangAoTai: false,
              hot: false,
              longitude: "144.149",
              latitude: "43.966"
            }
          ]
        },
        {
          group: "X",
          cities: [
            {
              id: 202799,
              cityName: "新山",
              pinYin: "xinshan",
              gangAoTai: false,
              hot: false,
              longitude: "0",
              latitude: "0"
            },
            {
              id: 10318,
              cityName: "箱根",
              pinYin: "xianggen",
              gangAoTai: false,
              hot: false,
              longitude: "0",
              latitude: "0"
            },
            {
              id: 4187,
              cityName: "象岛",
              pinYin: "xiangdao",
              gangAoTai: false,
              hot: false,
              longitude: "102.334",
              latitude: "12.1037"
            },
            {
              id: 4197,
              cityName: "仙台",
              pinYin: "xiantai",
              gangAoTai: false,
              hot: false,
              longitude: "140.797",
              latitude: "38.2704"
            },
            {
              id: 4204,
              cityName: "小樽市",
              pinYin: "xiaozunshi",
              gangAoTai: false,
              hot: false,
              longitude: "140.788",
              latitude: "43.1505"
            },
            {
              id: 4211,
              cityName: "暹粒",
              pinYin: "xianli",
              gangAoTai: false,
              hot: false,
              longitude: "103.723",
              latitude: "13.346"
            },
            {
              id: 4213,
              cityName: "西哈努克",
              pinYin: "xihanuke",
              gangAoTai: false,
              hot: false,
              longitude: "103.491",
              latitude: "10.6448"
            },
            {
              id: 4217,
              cityName: "新加坡",
              pinYin: "xinjiapo",
              gangAoTai: false,
              hot: false,
              longitude: "103.566",
              latitude: "1.3154"
            },
            {
              id: 4234,
              cityName: "岘港",
              pinYin: "xiangang",
              gangAoTai: false,
              hot: false,
              longitude: "108.171",
              latitude: "16.0468"
            },
            {
              id: 4338,
              cityName: "西雅图",
              pinYin: "xiyatu",
              gangAoTai: false,
              hot: false,
              longitude: "-122.476",
              latitude: "47.615"
            },
            {
              id: 4413,
              cityName: "悉尼",
              pinYin: "xini",
              gangAoTai: false,
              hot: false,
              longitude: "151.209",
              latitude: "-33.865"
            },
            {
              id: 201600,
              cityName: "休斯敦",
              pinYin: "xiusidun",
              gangAoTai: false,
              hot: false,
              longitude: "-95.3698",
              latitude: "29.7604"
            },
            {
              id: 200027,
              cityName: "西澳大利亚州",
              pinYin: "xiaodaliyazhou",
              gangAoTai: false,
              hot: false,
              longitude: "114.833",
              latitude: "-24.5039"
            },
            {
              id: 200236,
              cityName: "雪兰莪州",
              pinYin: "xuelanezhou",
              gangAoTai: false,
              hot: false,
              longitude: "101.559",
              latitude: "3.0269"
            },
            {
              id: 200413,
              cityName: "旭川",
              pinYin: "xuchuan",
              gangAoTai: false,
              hot: false,
              longitude: "142.379",
              latitude: "43.7297"
            },
            {
              id: 200569,
              cityName: "下田",
              pinYin: "xiatian",
              gangAoTai: false,
              hot: false,
              longitude: "138.927",
              latitude: "34.7144"
            }
          ]
        },
        {
          group: "Y",
          cities: [
            {
              id: 4156,
              cityName: "雅加达",
              pinYin: "yajiada",
              gangAoTai: false,
              hot: false,
              longitude: "106.689",
              latitude: "-6.2294"
            },
            {
              id: 10315,
              cityName: "山口",
              pinYin: "Yamaguchi",
              gangAoTai: false,
              hot: false,
              longitude: "0",
              latitude: "0"
            },
            {
              id: 202837,
              cityName: "宜野湾",
              pinYin: "yiyewan",
              gangAoTai: false,
              hot: false,
              longitude: "127.778",
              latitude: "26.2854"
            },
            {
              id: 4235,
              cityName: "芽庄市",
              pinYin: "yazhuangshi",
              gangAoTai: false,
              hot: false,
              longitude: "109.1",
              latitude: "12.2599"
            },
            {
              id: 4237,
              cityName: "仰光",
              pinYin: "yangguang",
              gangAoTai: false,
              hot: false,
              longitude: "96.0291",
              latitude: "16.9041"
            },
            {
              id: 200978,
              cityName: "耶路撒冷",
              pinYin: "yelusaleng",
              gangAoTai: false,
              hot: false,
              longitude: "0",
              latitude: "0"
            },
            {
              id: 4384,
              cityName: "因特拉肯",
              pinYin: "yintelaken",
              gangAoTai: false,
              hot: false,
              longitude: "7.8642",
              latitude: "46.6866"
            },
            {
              id: 4385,
              cityName: "雅典",
              pinYin: "yadian",
              gangAoTai: false,
              hot: false,
              longitude: "23.6683",
              latitude: "37.991"
            },
            {
              id: 4408,
              cityName: "伊斯坦布尔",
              pinYin: "yisitanbuer",
              gangAoTai: false,
              hot: false,
              longitude: "28.4518",
              latitude: "41.005"
            },
            {
              id: 4425,
              cityName: "约克",
              pinYin: "yueke",
              gangAoTai: false,
              hot: false,
              longitude: "-1.1506",
              latitude: "53.9587"
            },
            {
              id: 201673,
              cityName: "约罗",
              pinYin: "yueluo",
              gangAoTai: false,
              hot: false,
              longitude: "-87.1423",
              latitude: "15.295"
            },
            {
              id: 202101,
              cityName: "亚琛",
              pinYin: "ya琛",
              gangAoTai: false,
              hot: false,
              longitude: "6.0839",
              latitude: "50.7753"
            },
            {
              id: 200349,
              cityName: "夜丰颂府",
              pinYin: "ye feng song fu",
              gangAoTai: false,
              hot: false,
              longitude: "97.9744",
              latitude: "19.2797"
            },
            {
              id: 200567,
              cityName: "由布",
              pinYin: "youbu",
              gangAoTai: false,
              hot: false,
              longitude: "131.4",
              latitude: "33.1908"
            },
            {
              id: 200571,
              cityName: "伊豆",
              pinYin: "yidou1",
              gangAoTai: false,
              hot: false,
              longitude: "138.907",
              latitude: "34.9164"
            },
            {
              id: 200585,
              cityName: "怡保",
              pinYin: "yibao",
              gangAoTai: false,
              hot: false,
              longitude: "101.096",
              latitude: "4.616"
            }
          ]
        },
        {
          group: "Z",
          cities: [
            {
              id: 4193,
              cityName: "札幌",
              pinYin: "zhahuang",
              gangAoTai: false,
              hot: false,
              longitude: "141.3",
              latitude: "43.0596"
            },
            {
              id: 202927,
              cityName: "宗通县",
              pinYin: "zongtongxian",
              gangAoTai: false,
              hot: false,
              longitude: "0",
              latitude: "0"
            },
            {
              id: 200286,
              cityName: "扎达尔",
              pinYin: "zhadaer",
              gangAoTai: false,
              hot: false,
              longitude: "15.2549",
              latitude: "44.1255"
            },
            {
              id: 200378,
              cityName: "沼津",
              pinYin: "zhaojin",
              gangAoTai: false,
              hot: false,
              longitude: "138.312",
              latitude: "34.8638"
            }
          ]
        }
      ]
    }
  };
  const data$1 = {
    _id,
    trace,
    referTraceId,
    ver,
    ret,
    errmsg,
    errTip,
    errcode,
    data
  };
  var commonjsGlobal = typeof globalThis !== "undefined" ? globalThis : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : {};
  var FUNC_ERROR_TEXT = "Expected a function";
  var NAN = 0 / 0;
  var symbolTag = "[object Symbol]";
  var reTrim = /^\s+|\s+$/g;
  var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
  var reIsBinary = /^0b[01]+$/i;
  var reIsOctal = /^0o[0-7]+$/i;
  var freeParseInt = parseInt;
  var freeGlobal = typeof commonjsGlobal == "object" && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;
  var freeSelf = typeof self == "object" && self && self.Object === Object && self;
  var root = freeGlobal || freeSelf || Function("return this")();
  var objectProto = Object.prototype;
  var objectToString = objectProto.toString;
  var nativeMax = Math.max, nativeMin = Math.min;
  var now = function() {
    return root.Date.now();
  };
  function debounce(func2, wait, options) {
    var lastArgs, lastThis, maxWait, result, timerId, lastCallTime, lastInvokeTime = 0, leading = false, maxing = false, trailing = true;
    if (typeof func2 != "function") {
      throw new TypeError(FUNC_ERROR_TEXT);
    }
    wait = toNumber(wait) || 0;
    if (isObject(options)) {
      leading = !!options.leading;
      maxing = "maxWait" in options;
      maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
      trailing = "trailing" in options ? !!options.trailing : trailing;
    }
    function invokeFunc(time) {
      var args = lastArgs, thisArg = lastThis;
      lastArgs = lastThis = void 0;
      lastInvokeTime = time;
      result = func2.apply(thisArg, args);
      return result;
    }
    function leadingEdge(time) {
      lastInvokeTime = time;
      timerId = setTimeout(timerExpired, wait);
      return leading ? invokeFunc(time) : result;
    }
    function remainingWait(time) {
      var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime, result2 = wait - timeSinceLastCall;
      return maxing ? nativeMin(result2, maxWait - timeSinceLastInvoke) : result2;
    }
    function shouldInvoke(time) {
      var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime;
      return lastCallTime === void 0 || timeSinceLastCall >= wait || timeSinceLastCall < 0 || maxing && timeSinceLastInvoke >= maxWait;
    }
    function timerExpired() {
      var time = now();
      if (shouldInvoke(time)) {
        return trailingEdge(time);
      }
      timerId = setTimeout(timerExpired, remainingWait(time));
    }
    function trailingEdge(time) {
      timerId = void 0;
      if (trailing && lastArgs) {
        return invokeFunc(time);
      }
      lastArgs = lastThis = void 0;
      return result;
    }
    function cancel() {
      if (timerId !== void 0) {
        clearTimeout(timerId);
      }
      lastInvokeTime = 0;
      lastArgs = lastCallTime = lastThis = timerId = void 0;
    }
    function flush() {
      return timerId === void 0 ? result : trailingEdge(now());
    }
    function debounced() {
      var time = now(), isInvoking = shouldInvoke(time);
      lastArgs = arguments;
      lastThis = this;
      lastCallTime = time;
      if (isInvoking) {
        if (timerId === void 0) {
          return leadingEdge(lastCallTime);
        }
        if (maxing) {
          timerId = setTimeout(timerExpired, wait);
          return invokeFunc(lastCallTime);
        }
      }
      if (timerId === void 0) {
        timerId = setTimeout(timerExpired, wait);
      }
      return result;
    }
    debounced.cancel = cancel;
    debounced.flush = flush;
    return debounced;
  }
  function isObject(value) {
    var type = typeof value;
    return !!value && (type == "object" || type == "function");
  }
  function isObjectLike(value) {
    return !!value && typeof value == "object";
  }
  function isSymbol(value) {
    return typeof value == "symbol" || isObjectLike(value) && objectToString.call(value) == symbolTag;
  }
  function toNumber(value) {
    if (typeof value == "number") {
      return value;
    }
    if (isSymbol(value)) {
      return NAN;
    }
    if (isObject(value)) {
      var other = typeof value.valueOf == "function" ? value.valueOf() : value;
      value = isObject(other) ? other + "" : other;
    }
    if (typeof value != "string") {
      return value === 0 ? value : +value;
    }
    value = value.replace(reTrim, "");
    var isBinary = reIsBinary.test(value);
    return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
  }
  var lodash_debounce = debounce;
  const _sfc_main$j = {
    data() {
      return {
        searchText: "",
        street: "",
        historyList: [],
        hotCities: [],
        cities: [],
        letterGroup: [],
        latitude: 0,
        longitude: 0,
        tips: [],
        isLoading: false,
        isTips: false,
        viewpoint: [],
        businessDistrict: []
      };
    },
    methods: {
      nvBack() {
        uni.navigateBack({
          delta: 2
        });
      },
      getMylocation() {
        uni.getLocation({
          type: "gcj02",
          geocode: true,
          success: function(res) {
            formatAppLog("log", "at pages/search/search.vue:104", res);
            this.latitude = res.latitude;
            this.longitude = res.longitude;
            this.location = `${this.longitude},${this.latitude}`;
            uni.setStorageSync("street", res.address.street);
          }.bind(this),
          fail(err2) {
            formatAppLog("log", "at pages/search/search.vue:111", "fail");
            formatAppLog("log", "at pages/search/search.vue:112", err2);
          },
          complete: function() {
            this.isLocating = false;
          }.bind(this)
        });
      },
      sendData(item) {
        this.saveHistory(item);
        uni.setStorageSync("searchText", item.name);
        uni.setStorageSync("location", item.location);
        uni.navigateTo({
          url: "/pages/searchDetail/searchDetail"
        });
      },
      saveHistory(item) {
        this.historyList = this.insertOrUpdateCity(this.historyList, item);
        uni.setStorageSync("searchHistory2", this.historyList);
      },
      clearHistory() {
        this.historyList = [];
        uni.removeStorageSync("searchHistory");
      },
      insertOrUpdateCity(array2, cityObject) {
        const existingIndex = array2.findIndex((item) => item.id === cityObject.id);
        if (existingIndex !== -1) {
          const existingCity = array2.splice(existingIndex, 1)[0];
          array2.unshift(existingCity);
        } else {
          array2.unshift(cityObject);
        }
        return array2;
      },
      hanldeInput: lodash_debounce(function() {
        this.isTips = false;
        const location = uni.getStorageSync("location");
        this.tips = [];
        this.isLoading = true;
        uni.request({
          url: "https://restapi.amap.com/v3/assistant/inputtips",
          //仅为示例，并非真实接口地址。
          data: {
            key: "ca5638622884957be4cff8d31d00b1b0",
            location,
            keywords: this.searchText
          },
          success: function(res) {
            let arr = res.data.tips;
            if (arr.length == 0) {
              this.isTips = true;
            }
            arr.forEach((element, index2) => {
              if (element.id.length == 0) {
                arr.splice(index2, 1);
              }
            });
            this.tips = arr;
            formatAppLog("log", "at pages/search/search.vue:174", res);
          }.bind(this),
          fail: (err2) => {
            formatAppLog("log", "at pages/search/search.vue:177", err2);
          },
          complete: function() {
            this.isLoading = false;
          }.bind(this)
        });
      }, 300),
      highLight(name2) {
        const regex = new RegExp(this.searchText, "g");
        return name2.replace(regex, "<span style='color: #ff7014;'>" + this.searchText + "</span>");
      },
      cleanText() {
        this.searchText = "";
      },
      getViewpoint() {
        uni.request({
          url: "https://restapi.amap.com/v3/place/around",
          data: {
            location: uni.getStorageSync("location"),
            types: 11e4,
            radius: 3e4,
            offset: 12,
            page: 1,
            extensions: "all",
            sortrule: "weight",
            key: "ca5638622884957be4cff8d31d00b1b0"
          },
          success: (res) => {
            formatAppLog("log", "at pages/search/search.vue:205", res.data);
            const pois = res.data.pois;
            this.viewpoint = pois;
          },
          fail: (err2) => {
            formatAppLog("log", "at pages/search/search.vue:210", err2);
          }
        });
      },
      getBusinessDistrict() {
        uni.request({
          url: "https://restapi.amap.com/v3/place/around",
          data: {
            location: uni.getStorageSync("location"),
            types: "061000",
            radius: 5e4,
            offset: 12,
            page: 1,
            extensions: "all",
            sortrule: "weight",
            key: "ca5638622884957be4cff8d31d00b1b0"
          },
          success: (res) => {
            const pois = res.data.pois;
            this.businessDistrict = pois;
          },
          fail: (err2) => {
            formatAppLog("log", "at pages/search/search.vue:232", err2);
          }
        });
      }
    },
    onLoad() {
      this.street = uni.getStorageSync("street");
      if (this.street == "") {
        this.street = "获取位置失败，请重试";
      }
      const arr = uni.getStorageSync("searchHistory2");
      if (arr.length != 0) {
        this.historyList = arr;
      }
      this.getViewpoint();
      this.getBusinessDistrict();
    }
  };
  function _sfc_render$i(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("view", null, [
      vue.createElementVNode("view", { class: "topbar" }),
      vue.createElementVNode("view", { class: "city-container" }, [
        vue.createElementVNode("view", { class: "searchHeader" }, [
          vue.createElementVNode("view", { class: "left" }, [
            vue.createElementVNode("image", {
              style: { "width": "40rpx", "height": "40rpx" },
              class: "searchIcon",
              src: "/static/image/icon/search.png",
              mode: "aspectFit"
            }),
            vue.withDirectives(vue.createElementVNode(
              "input",
              {
                "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => $data.searchText = $event),
                class: "searchInput",
                type: "text",
                placeholder: "城市/区域/位置",
                "confirm-type": "search",
                onInput: _cache[1] || (_cache[1] = (...args) => $options.hanldeInput && $options.hanldeInput(...args))
              },
              null,
              544
              /* HYDRATE_EVENTS, NEED_PATCH */
            ), [
              [vue.vModelText, $data.searchText]
            ]),
            vue.createElementVNode("image", {
              onClick: _cache[2] || (_cache[2] = (...args) => $options.cleanText && $options.cleanText(...args)),
              style: { "width": "32rpx", "height": "32rpx", "margin-right": "14rpx", "margin-top": "24rpx" },
              class: "searchIcon",
              src: "/static/image/icon/fail.png",
              mode: "aspectFit"
            })
          ]),
          vue.createElementVNode("view", {
            class: "right",
            onClick: _cache[3] || (_cache[3] = (...args) => $options.nvBack && $options.nvBack(...args))
          }, "取消")
        ]),
        !$data.searchText ? (vue.openBlock(), vue.createElementBlock("view", {
          key: 0,
          class: "cities"
        }, [
          vue.createElementVNode("view", {
            class: "location",
            "hover-class": "locationHover",
            "hover-stay-time": "900",
            onClick: _cache[4] || (_cache[4] = (...args) => $options.getMylocation && $options.getMylocation(...args))
          }, [
            vue.createElementVNode("view", { class: "title" }, "当前位置"),
            vue.createElementVNode("view", { class: "address" }, [
              vue.createElementVNode("image", {
                class: "icon",
                src: "/static/image/icon/location2.png",
                mode: "aspectFit"
              }),
              vue.createTextVNode(
                " " + vue.toDisplayString($data.street),
                1
                /* TEXT */
              )
            ])
          ]),
          $data.historyList.length != 0 ? (vue.openBlock(), vue.createElementBlock("view", {
            key: 0,
            class: "history",
            id: "history"
          }, [
            vue.createElementVNode("view", { class: "titleWrapper" }, [
              vue.createElementVNode("view", { class: "title" }, "历史记录"),
              vue.createElementVNode("view", {
                class: "clear",
                onClick: _cache[5] || (_cache[5] = (...args) => $options.clearHistory && $options.clearHistory(...args))
              }, "清空")
            ]),
            vue.createElementVNode("view", { class: "historyList" }, [
              (vue.openBlock(true), vue.createElementBlock(
                vue.Fragment,
                null,
                vue.renderList($data.historyList, (item, index2) => {
                  return vue.openBlock(), vue.createElementBlock("view", {
                    class: "historyListItem",
                    "hover-class": "locationHover",
                    "hover-stay-time": "900",
                    onClick: ($event) => $options.sendData(item)
                  }, [
                    item.cityName ? (vue.openBlock(), vue.createElementBlock(
                      "text",
                      {
                        key: 0,
                        class: "textOverflow"
                      },
                      vue.toDisplayString(item.cityName),
                      1
                      /* TEXT */
                    )) : vue.createCommentVNode("v-if", true),
                    item.name ? (vue.openBlock(), vue.createElementBlock(
                      "text",
                      {
                        key: 1,
                        class: "textOverflow"
                      },
                      vue.toDisplayString(item.name),
                      1
                      /* TEXT */
                    )) : vue.createCommentVNode("v-if", true)
                  ], 8, ["onClick"]);
                }),
                256
                /* UNKEYED_FRAGMENT */
              ))
            ])
          ])) : vue.createCommentVNode("v-if", true),
          vue.createElementVNode("view", { class: "hotCities" }, [
            vue.createElementVNode("view", { class: "title" }, "景点"),
            vue.createElementVNode("view", { class: "hotCitiesList" }, [
              (vue.openBlock(true), vue.createElementBlock(
                vue.Fragment,
                null,
                vue.renderList($data.viewpoint, (item, index2) => {
                  return vue.openBlock(), vue.createElementBlock("view", {
                    class: "hotCityItem",
                    "hover-class": "locationHover",
                    "hover-stay-time": "900",
                    onClick: ($event) => $options.sendData(item)
                  }, vue.toDisplayString(item.name), 9, ["onClick"]);
                }),
                256
                /* UNKEYED_FRAGMENT */
              ))
            ])
          ]),
          vue.createElementVNode("view", { class: "hotCities" }, [
            vue.createElementVNode("view", { class: "title" }, "商圈"),
            vue.createElementVNode("view", { class: "hotCitiesList" }, [
              (vue.openBlock(true), vue.createElementBlock(
                vue.Fragment,
                null,
                vue.renderList($data.businessDistrict, (item, index2) => {
                  return vue.openBlock(), vue.createElementBlock("view", {
                    class: "hotCityItem",
                    "hover-class": "locationHover",
                    "hover-stay-time": "900",
                    onClick: ($event) => $options.sendData(item)
                  }, vue.toDisplayString(item.name), 9, ["onClick"]);
                }),
                256
                /* UNKEYED_FRAGMENT */
              ))
            ])
          ]),
          vue.createElementVNode("view", { class: "scrollBottom" })
        ])) : vue.createCommentVNode("v-if", true),
        $data.searchText ? (vue.openBlock(), vue.createElementBlock("view", {
          key: 1,
          class: "searchTip-container"
        }, [
          $data.isTips ? (vue.openBlock(), vue.createElementBlock("view", {
            key: 0,
            class: "noRecord"
          }, "暂无记录")) : vue.createCommentVNode("v-if", true),
          vue.createElementVNode("view", { class: "tips-list" }, [
            (vue.openBlock(true), vue.createElementBlock(
              vue.Fragment,
              null,
              vue.renderList($data.tips, (item, index2) => {
                return vue.openBlock(), vue.createElementBlock("view", {
                  class: "tip-item",
                  key: index2,
                  onClick: ($event) => $options.sendData(item)
                }, [
                  vue.createElementVNode("view", {
                    class: "tipName",
                    innerHTML: $options.highLight(item.name)
                  }, null, 8, ["innerHTML"]),
                  vue.createElementVNode(
                    "view",
                    { class: "district" },
                    vue.toDisplayString(item.district),
                    1
                    /* TEXT */
                  )
                ], 8, ["onClick"]);
              }),
              128
              /* KEYED_FRAGMENT */
            ))
          ]),
          vue.createElementVNode("view", { class: "scrollBottom" })
        ])) : vue.createCommentVNode("v-if", true)
      ]),
      $data.isLoading ? (vue.openBlock(), vue.createElementBlock("image", {
        key: 0,
        class: "loading",
        src: "/static/image/icon/loading.gif",
        mode: "aspectFit"
      })) : vue.createCommentVNode("v-if", true)
    ]);
  }
  const PagesSearchSearch = /* @__PURE__ */ _export_sfc(_sfc_main$j, [["render", _sfc_render$i], ["__file", "D:/HLTrip/hl/pages/search/search.vue"]]);
  const _sfc_main$i = {
    data() {
      return {
        currentCard: 0,
        favorPage: 1,
        houseInfo: [],
        maxPage: 0,
        showNoMore: false,
        isFirstload: true,
        houseInfo_history: [],
        houseids: [],
        firstHistory: true,
        maxHistory: 0,
        historyPage: 1,
        showEmpty: false
      };
    },
    methods: {
      toggle(index2) {
        this.currentCard = index2;
        this.showNoMore = false;
      },
      requestFavor() {
        uni.request({
          url: `${API.BASE_URL}/getFavorList`,
          data: {
            userid: uni.getStorageSync("userId"),
            page: this.favorPage
          },
          success: (res) => {
            const sdata = res.data.data;
            formatAppLog("log", "at pages/Components/Favor/Favor.vue:115", res.data);
            if (sdata.total == 0) {
              this.showEmpty = true;
            } else {
              this.showEmpty = false;
              this.maxPage = Math.ceil(sdata.total / 10);
              if (this.houseInfo.length == 0) {
                this.houseInfo = sdata.houseInfo;
              } else {
                this.houseInfo = [...this.houseInfo, ...sdata.houseInfo];
              }
              this.favorPage++;
            }
          }
        });
      },
      sendReqWhenindexChange() {
        if (this.currentCard == 1) {
          this.getAllHistoryId();
          this.historyPage = 1;
        }
      },
      getMoreHouse() {
        if (this.currentCard == 0) {
          if (this.favorPage <= this.maxPage) {
            this.requestFavor();
          } else {
            this.showNoMore = true;
          }
        } else {
          if (this.historyPage <= this.maxHistory) {
            this.getMoreHistory();
          } else {
            this.showNoMore = true;
          }
        }
      },
      likehouse(item) {
        item.islike = !item.islike;
        let hid = item.overview.houseid;
        const obj = { hid, islike: !item.islike };
        uni.$emit("changeid", obj);
        uni.request({
          url: `${API.BASE_URL}/favorHouse`,
          data: {
            houseid: item.overview.houseid,
            userid: uni.getStorageSync("userId")
          }
        });
      },
      flushFavor() {
        uni.request({
          url: `${API.BASE_URL}/getFavorList`,
          data: {
            userid: uni.getStorageSync("userId"),
            page: 1
          },
          success: (res) => {
            formatAppLog("log", "at pages/Components/Favor/Favor.vue:180", res);
            const sdata = res.data.data;
            if (sdata.total == 0) {
              this.showEmpty = true;
              return false;
            } else {
              this.showEmpty = false;
              this.maxPage = Math.ceil(sdata.total / 10);
              this.houseInfo = sdata.houseInfo;
              this.favorPage = 2;
            }
          }
        });
      },
      tohdt(houseid) {
        uni.navigateTo({
          url: `/pages/hotelDetail/hotelDetail?houseid=${houseid}`
        });
      },
      getAllHistoryId() {
        formatAppLog("log", "at pages/Components/Favor/Favor.vue:201", "gethouseids");
        uni.request({
          url: `${API.BASE_URL}/getAllHistoryId`,
          data: {
            userid: uni.getStorageSync("userId")
          },
          success: (res) => {
            if (res.data.requestStatus == "203") {
              this.showEmpty = true;
              return false;
            }
            this.showEmpty = false;
            this.houseids = this.chunkArray(res.data.data.houseids, 10);
            this.maxHistory = houseids.length;
          }
        });
      },
      chunkArray(array2, chunkSize) {
        let result = [];
        for (let i = 0; i < array2.length; i += chunkSize) {
          let chunk = array2.slice(i, i + chunkSize);
          result.push(chunk);
        }
        return result;
      },
      initHistory() {
        formatAppLog("log", "at pages/Components/Favor/Favor.vue:228", "inithistory");
        uni.request({
          url: `${API.BASE_URL}/getHistroyHouse`,
          data: {
            houseids: this.houseids[this.historyPage - 1],
            userid: uni.getStorageSync("userId")
          },
          success: (res) => {
            formatAppLog("log", "at pages/Components/Favor/Favor.vue:236", this.historyPage);
            this.houseInfo_history = res.data.data.houseInfo;
            this.historyPage = this.historyPage + 1;
            this.maxHistory = this.houseids.length;
          }
        });
      },
      getMoreHistory() {
        uni.request({
          url: `${API.BASE_URL}/getHistroyHouse`,
          data: {
            houseids: this.houseids[this.historyPage - 1],
            userid: uni.getStorageSync("userId")
          },
          success: (res) => {
            this.houseInfo_history = [...this.houseInfo_history, ...res.data.data.houseInfo];
            this.historyPage = this.historyPage + 1;
          }
        });
      }
    },
    onLoad() {
      this.requestFavor();
    },
    onShow() {
      uni.$on("sendIndexToFavor", (data2) => {
        this.currentCard = data2;
        formatAppLog("log", "at pages/Components/Favor/Favor.vue:264", 2);
      });
      if (!this.isFirstload) {
        this.flushFavor();
      }
      this.isFirstload = false;
      formatAppLog("log", "at pages/Components/Favor/Favor.vue:270", "favor show");
    },
    mounted() {
      this.$watch("currentCard", this.sendReqWhenindexChange);
      this.$watch("houseids", this.initHistory);
    }
  };
  function _sfc_render$h(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("view", null, [
      vue.createElementVNode("view", { class: "statusbar" }),
      vue.createElementVNode("view", { class: "toggleBar" }, [
        vue.createElementVNode("view", { class: "cardwrapper" }, [
          vue.createElementVNode(
            "view",
            {
              class: vue.normalizeClass(["favor carditem", { "actived": $data.currentCard == 0 }]),
              onClick: _cache[0] || (_cache[0] = ($event) => $options.toggle(0))
            },
            "我的收藏",
            2
            /* CLASS */
          ),
          vue.createElementVNode(
            "view",
            {
              class: vue.normalizeClass(["history carditem", { "actived": $data.currentCard == 1 }]),
              onClick: _cache[1] || (_cache[1] = ($event) => $options.toggle(1))
            },
            "浏览记录",
            2
            /* CLASS */
          )
        ])
      ]),
      !$data.showEmpty ? (vue.openBlock(), vue.createElementBlock(
        "scroll-view",
        {
          key: 0,
          "scroll-y": "true",
          class: "content",
          onScrolltolower: _cache[2] || (_cache[2] = (...args) => $options.getMoreHouse && $options.getMoreHouse(...args))
        },
        [
          $data.currentCard == 0 ? (vue.openBlock(), vue.createElementBlock("view", {
            key: 0,
            class: "favorCard"
          }, [
            (vue.openBlock(true), vue.createElementBlock(
              vue.Fragment,
              null,
              vue.renderList($data.houseInfo, (item, index2) => {
                return vue.openBlock(), vue.createElementBlock("view", { class: "content_item" }, [
                  vue.createElementVNode("view", { class: "item_left" }, [
                    vue.createElementVNode("view", { class: "imgWrapper" }, [
                      vue.createElementVNode("image", {
                        class: "cover",
                        src: item.overview.coverurl,
                        mode: "aspectFill"
                      }, null, 8, ["src"])
                    ]),
                    vue.createElementVNode("view", {
                      class: "icongroup",
                      onClick: ($event) => $options.likehouse(item)
                    }, [
                      !item.islike ? (vue.openBlock(), vue.createElementBlock("image", {
                        key: 0,
                        class: "like",
                        src: "/static/image/icon/like.png"
                      })) : vue.createCommentVNode("v-if", true),
                      item.islike ? (vue.openBlock(), vue.createElementBlock("image", {
                        key: 1,
                        class: "like",
                        src: "/static/image/icon/like-active.png"
                      })) : vue.createCommentVNode("v-if", true)
                    ], 8, ["onClick"])
                  ]),
                  vue.createElementVNode("view", { class: "item_right" }, [
                    vue.createElementVNode(
                      "view",
                      { class: "housename" },
                      vue.toDisplayString(item.overview.housename),
                      1
                      /* TEXT */
                    ),
                    vue.createElementVNode(
                      "view",
                      { class: "facilities" },
                      vue.toDisplayString(item.overview.roomcount) + "室厅·" + vue.toDisplayString(item.overview.bathroomcount) + "卫·" + vue.toDisplayString(item.overview.bedcount) + "张床·宜住" + vue.toDisplayString(item.overview.maxguests) + "人 ",
                      1
                      /* TEXT */
                    ),
                    vue.createElementVNode(
                      "view",
                      { class: "cityname" },
                      vue.toDisplayString(item.locationInfo.city),
                      1
                      /* TEXT */
                    ),
                    vue.createElementVNode("view", { class: "rtAndComment" }, [
                      vue.createElementVNode(
                        "text",
                        { class: "rate" },
                        vue.toDisplayString(item.overview.rating.toFixed(1)),
                        1
                        /* TEXT */
                      ),
                      vue.createElementVNode("text", { class: "desc" }, "分"),
                      vue.createElementVNode("text", { class: "seprator" }, "·"),
                      vue.createElementVNode(
                        "text",
                        { class: "comment" },
                        vue.toDisplayString(item.overview.commentcount) + "点评",
                        1
                        /* TEXT */
                      )
                    ]),
                    vue.createElementVNode("view", {
                      class: "btnToDt",
                      onClick: ($event) => $options.tohdt(item.overview.houseid)
                    }, "查看详情", 8, ["onClick"])
                  ])
                ]);
              }),
              256
              /* UNKEYED_FRAGMENT */
            ))
          ])) : vue.createCommentVNode("v-if", true),
          $data.currentCard == 1 ? (vue.openBlock(), vue.createElementBlock("view", {
            key: 1,
            class: "historyCard"
          }, [
            (vue.openBlock(true), vue.createElementBlock(
              vue.Fragment,
              null,
              vue.renderList($data.houseInfo_history, (item, index2) => {
                return vue.openBlock(), vue.createElementBlock("view", { class: "content_item" }, [
                  vue.createElementVNode("view", { class: "item_left" }, [
                    vue.createElementVNode("view", { class: "imgWrapper" }, [
                      vue.createElementVNode("image", {
                        class: "cover",
                        src: item.overview.coverurl,
                        mode: "aspectFill"
                      }, null, 8, ["src"])
                    ]),
                    vue.createElementVNode("view", {
                      class: "icongroup",
                      onClick: ($event) => $options.likehouse(item)
                    }, [
                      !item.islike ? (vue.openBlock(), vue.createElementBlock("image", {
                        key: 0,
                        class: "like",
                        src: "/static/image/icon/like.png"
                      })) : vue.createCommentVNode("v-if", true),
                      item.islike ? (vue.openBlock(), vue.createElementBlock("image", {
                        key: 1,
                        class: "like",
                        src: "/static/image/icon/like-active.png"
                      })) : vue.createCommentVNode("v-if", true)
                    ], 8, ["onClick"])
                  ]),
                  vue.createElementVNode("view", { class: "item_right" }, [
                    vue.createElementVNode(
                      "view",
                      { class: "housename" },
                      vue.toDisplayString(item.overview.housename),
                      1
                      /* TEXT */
                    ),
                    vue.createElementVNode(
                      "view",
                      { class: "facilities" },
                      vue.toDisplayString(item.overview.roomcount) + "室厅·" + vue.toDisplayString(item.overview.bathroomcount) + "卫·" + vue.toDisplayString(item.overview.bedcount) + "张床·宜住" + vue.toDisplayString(item.overview.maxguests) + "人 ",
                      1
                      /* TEXT */
                    ),
                    vue.createElementVNode(
                      "view",
                      { class: "cityname" },
                      vue.toDisplayString(item.locationInfo.city),
                      1
                      /* TEXT */
                    ),
                    vue.createElementVNode("view", { class: "rtAndComment" }, [
                      vue.createElementVNode(
                        "text",
                        { class: "rate" },
                        vue.toDisplayString(item.overview.rating.toFixed(1)),
                        1
                        /* TEXT */
                      ),
                      vue.createElementVNode("text", { class: "desc" }, "分"),
                      vue.createElementVNode("text", { class: "seprator" }, "·"),
                      vue.createElementVNode(
                        "text",
                        { class: "comment" },
                        vue.toDisplayString(item.overview.commentcount) + "点评",
                        1
                        /* TEXT */
                      )
                    ]),
                    vue.createElementVNode("view", {
                      class: "btnToDt",
                      onClick: ($event) => $options.tohdt(item.overview.houseid)
                    }, "查看详情", 8, ["onClick"])
                  ])
                ]);
              }),
              256
              /* UNKEYED_FRAGMENT */
            ))
          ])) : vue.createCommentVNode("v-if", true),
          $data.showNoMore ? (vue.openBlock(), vue.createElementBlock("view", {
            key: 2,
            class: "nomore"
          }, "-没有更多了-")) : vue.createCommentVNode("v-if", true)
        ],
        32
        /* HYDRATE_EVENTS */
      )) : vue.createCommentVNode("v-if", true),
      $data.showEmpty ? (vue.openBlock(), vue.createElementBlock("view", {
        key: 1,
        class: "empty"
      }, [
        vue.createElementVNode("image", {
          src: "/static/image/empty_bg.png",
          mode: "aspectFit"
        }),
        vue.createElementVNode("view", { class: "desc" }, "暂时没有内容")
      ])) : vue.createCommentVNode("v-if", true)
    ]);
  }
  const PagesComponentsFavorFavor = /* @__PURE__ */ _export_sfc(_sfc_main$i, [["render", _sfc_render$h], ["__file", "D:/HLTrip/hl/pages/Components/Favor/Favor.vue"]]);
  const mpMixin = {};
  function email(value) {
    return /^\w+((-\w+)|(\.\w+))*\@[A-Za-z0-9]+((\.|-)[A-Za-z0-9]+)*\.[A-Za-z0-9]+$/.test(value);
  }
  function mobile(value) {
    return /^1([3589]\d|4[5-9]|6[1-2,4-7]|7[0-8])\d{8}$/.test(value);
  }
  function url(value) {
    return /^((https|http|ftp|rtsp|mms):\/\/)(([0-9a-zA-Z_!~*'().&=+$%-]+: )?[0-9a-zA-Z_!~*'().&=+$%-]+@)?(([0-9]{1,3}.){3}[0-9]{1,3}|([0-9a-zA-Z_!~*'()-]+.)*([0-9a-zA-Z][0-9a-zA-Z-]{0,61})?[0-9a-zA-Z].[a-zA-Z]{2,6})(:[0-9]{1,4})?((\/?)|(\/[0-9a-zA-Z_!~*'().;?:@&=+$,%#-]+)+\/?)$/.test(value);
  }
  function date(value) {
    if (!value)
      return false;
    if (number(value))
      value = +value;
    return !/Invalid|NaN/.test(new Date(value).toString());
  }
  function dateISO(value) {
    return /^\d{4}[\/\-](0?[1-9]|1[012])[\/\-](0?[1-9]|[12][0-9]|3[01])$/.test(value);
  }
  function number(value) {
    return /^[\+-]?(\d+\.?\d*|\.\d+|\d\.\d+e\+\d+)$/.test(value);
  }
  function string(value) {
    return typeof value === "string";
  }
  function digits(value) {
    return /^\d+$/.test(value);
  }
  function idCard(value) {
    return /^[1-9]\d{5}[1-9]\d{3}((0\d)|(1[0-2]))(([0|1|2]\d)|3[0-1])\d{3}([0-9]|X)$/.test(
      value
    );
  }
  function carNo(value) {
    const xreg = /^[京津沪渝冀豫云辽黑湘皖鲁新苏浙赣鄂桂甘晋蒙陕吉闽贵粤青藏川宁琼使领A-Z]{1}[A-Z]{1}(([0-9]{5}[DF]$)|([DF][A-HJ-NP-Z0-9][0-9]{4}$))/;
    const creg = /^[京津沪渝冀豫云辽黑湘皖鲁新苏浙赣鄂桂甘晋蒙陕吉闽贵粤青藏川宁琼使领A-Z]{1}[A-Z]{1}[A-HJ-NP-Z0-9]{4}[A-HJ-NP-Z0-9挂学警港澳]{1}$/;
    if (value.length === 7) {
      return creg.test(value);
    }
    if (value.length === 8) {
      return xreg.test(value);
    }
    return false;
  }
  function amount(value) {
    return /^[1-9]\d*(,\d{3})*(\.\d{1,2})?$|^0\.\d{1,2}$/.test(value);
  }
  function chinese(value) {
    const reg = /^[\u4e00-\u9fa5]+$/gi;
    return reg.test(value);
  }
  function letter(value) {
    return /^[a-zA-Z]*$/.test(value);
  }
  function enOrNum(value) {
    const reg = /^[0-9a-zA-Z]*$/g;
    return reg.test(value);
  }
  function contains(value, param) {
    return value.indexOf(param) >= 0;
  }
  function range$1(value, param) {
    return value >= param[0] && value <= param[1];
  }
  function rangeLength(value, param) {
    return value.length >= param[0] && value.length <= param[1];
  }
  function landline(value) {
    const reg = /^\d{3,4}-\d{7,8}(-\d{3,4})?$/;
    return reg.test(value);
  }
  function empty(value) {
    switch (typeof value) {
      case "undefined":
        return true;
      case "string":
        if (value.replace(/(^[ \t\n\r]*)|([ \t\n\r]*$)/g, "").length == 0)
          return true;
        break;
      case "boolean":
        if (!value)
          return true;
        break;
      case "number":
        if (value === 0 || isNaN(value))
          return true;
        break;
      case "object":
        if (value === null || value.length === 0)
          return true;
        for (const i in value) {
          return false;
        }
        return true;
    }
    return false;
  }
  function jsonString(value) {
    if (typeof value === "string") {
      try {
        const obj = JSON.parse(value);
        if (typeof obj === "object" && obj) {
          return true;
        }
        return false;
      } catch (e) {
        return false;
      }
    }
    return false;
  }
  function array(value) {
    if (typeof Array.isArray === "function") {
      return Array.isArray(value);
    }
    return Object.prototype.toString.call(value) === "[object Array]";
  }
  function object(value) {
    return Object.prototype.toString.call(value) === "[object Object]";
  }
  function code(value, len = 6) {
    return new RegExp(`^\\d{${len}}$`).test(value);
  }
  function func(value) {
    return typeof value === "function";
  }
  function promise(value) {
    return object(value) && func(value.then) && func(value.catch);
  }
  function image(value) {
    const newValue = value.split("?")[0];
    const IMAGE_REGEXP = /\.(jpeg|jpg|gif|png|svg|webp|jfif|bmp|dpg)/i;
    return IMAGE_REGEXP.test(newValue);
  }
  function video(value) {
    const VIDEO_REGEXP = /\.(mp4|mpg|mpeg|dat|asf|avi|rm|rmvb|mov|wmv|flv|mkv|m3u8)/i;
    return VIDEO_REGEXP.test(value);
  }
  function regExp(o) {
    return o && Object.prototype.toString.call(o) === "[object RegExp]";
  }
  const test = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
    __proto__: null,
    amount,
    array,
    carNo,
    chinese,
    code,
    contains,
    date,
    dateISO,
    digits,
    email,
    empty,
    enOrNum,
    func,
    idCard,
    image,
    jsonString,
    landline,
    letter,
    mobile,
    number,
    object,
    promise,
    range: range$1,
    rangeLength,
    regExp,
    string,
    url,
    video
  }, Symbol.toStringTag, { value: "Module" }));
  function strip(num, precision = 15) {
    return +parseFloat(Number(num).toPrecision(precision));
  }
  function digitLength(num) {
    const eSplit = num.toString().split(/[eE]/);
    const len = (eSplit[0].split(".")[1] || "").length - +(eSplit[1] || 0);
    return len > 0 ? len : 0;
  }
  function float2Fixed(num) {
    if (num.toString().indexOf("e") === -1) {
      return Number(num.toString().replace(".", ""));
    }
    const dLen = digitLength(num);
    return dLen > 0 ? strip(Number(num) * Math.pow(10, dLen)) : Number(num);
  }
  function checkBoundary(num) {
    {
      if (num > Number.MAX_SAFE_INTEGER || num < Number.MIN_SAFE_INTEGER) {
        formatAppLog("warn", "at uni_modules/wu-ui-tools/libs/function/digit.js:45", `${num} 超出了精度限制，结果可能不正确`);
      }
    }
  }
  function iteratorOperation(arr, operation) {
    const [num1, num2, ...others] = arr;
    let res = operation(num1, num2);
    others.forEach((num) => {
      res = operation(res, num);
    });
    return res;
  }
  function times(...nums) {
    if (nums.length > 2) {
      return iteratorOperation(nums, times);
    }
    const [num1, num2] = nums;
    const num1Changed = float2Fixed(num1);
    const num2Changed = float2Fixed(num2);
    const baseNum = digitLength(num1) + digitLength(num2);
    const leftValue = num1Changed * num2Changed;
    checkBoundary(leftValue);
    return leftValue / Math.pow(10, baseNum);
  }
  function divide(...nums) {
    if (nums.length > 2) {
      return iteratorOperation(nums, divide);
    }
    const [num1, num2] = nums;
    const num1Changed = float2Fixed(num1);
    const num2Changed = float2Fixed(num2);
    checkBoundary(num1Changed);
    checkBoundary(num2Changed);
    return times(num1Changed / num2Changed, strip(Math.pow(10, digitLength(num2) - digitLength(num1))));
  }
  function round(num, ratio) {
    const base = Math.pow(10, ratio);
    let result = divide(Math.round(Math.abs(times(num, base))), base);
    if (num < 0 && result !== 0) {
      result = times(result, -1);
    }
    return result;
  }
  const cssKeywords = {
    "aliceblue": [240, 248, 255],
    "antiquewhite": [250, 235, 215],
    "aqua": [0, 255, 255],
    "aquamarine": [127, 255, 212],
    "azure": [240, 255, 255],
    "beige": [245, 245, 220],
    "bisque": [255, 228, 196],
    "black": [0, 0, 0],
    "blanchedalmond": [255, 235, 205],
    "blue": [0, 0, 255],
    "blueviolet": [138, 43, 226],
    "brown": [165, 42, 42],
    "burlywood": [222, 184, 135],
    "cadetblue": [95, 158, 160],
    "chartreuse": [127, 255, 0],
    "chocolate": [210, 105, 30],
    "coral": [255, 127, 80],
    "cornflowerblue": [100, 149, 237],
    "cornsilk": [255, 248, 220],
    "crimson": [220, 20, 60],
    "cyan": [0, 255, 255],
    "darkblue": [0, 0, 139],
    "darkcyan": [0, 139, 139],
    "darkgoldenrod": [184, 134, 11],
    "darkgray": [169, 169, 169],
    "darkgreen": [0, 100, 0],
    "darkgrey": [169, 169, 169],
    "darkkhaki": [189, 183, 107],
    "darkmagenta": [139, 0, 139],
    "darkolivegreen": [85, 107, 47],
    "darkorange": [255, 140, 0],
    "darkorchid": [153, 50, 204],
    "darkred": [139, 0, 0],
    "darksalmon": [233, 150, 122],
    "darkseagreen": [143, 188, 143],
    "darkslateblue": [72, 61, 139],
    "darkslategray": [47, 79, 79],
    "darkslategrey": [47, 79, 79],
    "darkturquoise": [0, 206, 209],
    "darkviolet": [148, 0, 211],
    "deeppink": [255, 20, 147],
    "deepskyblue": [0, 191, 255],
    "dimgray": [105, 105, 105],
    "dimgrey": [105, 105, 105],
    "dodgerblue": [30, 144, 255],
    "firebrick": [178, 34, 34],
    "floralwhite": [255, 250, 240],
    "forestgreen": [34, 139, 34],
    "fuchsia": [255, 0, 255],
    "gainsboro": [220, 220, 220],
    "ghostwhite": [248, 248, 255],
    "gold": [255, 215, 0],
    "goldenrod": [218, 165, 32],
    "gray": [128, 128, 128],
    "green": [0, 128, 0],
    "greenyellow": [173, 255, 47],
    "grey": [128, 128, 128],
    "honeydew": [240, 255, 240],
    "hotpink": [255, 105, 180],
    "indianred": [205, 92, 92],
    "indigo": [75, 0, 130],
    "ivory": [255, 255, 240],
    "khaki": [240, 230, 140],
    "lavender": [230, 230, 250],
    "lavenderblush": [255, 240, 245],
    "lawngreen": [124, 252, 0],
    "lemonchiffon": [255, 250, 205],
    "lightblue": [173, 216, 230],
    "lightcoral": [240, 128, 128],
    "lightcyan": [224, 255, 255],
    "lightgoldenrodyellow": [250, 250, 210],
    "lightgray": [211, 211, 211],
    "lightgreen": [144, 238, 144],
    "lightgrey": [211, 211, 211],
    "lightpink": [255, 182, 193],
    "lightsalmon": [255, 160, 122],
    "lightseagreen": [32, 178, 170],
    "lightskyblue": [135, 206, 250],
    "lightslategray": [119, 136, 153],
    "lightslategrey": [119, 136, 153],
    "lightsteelblue": [176, 196, 222],
    "lightyellow": [255, 255, 224],
    "lime": [0, 255, 0],
    "limegreen": [50, 205, 50],
    "linen": [250, 240, 230],
    "magenta": [255, 0, 255],
    "maroon": [128, 0, 0],
    "mediumaquamarine": [102, 205, 170],
    "mediumblue": [0, 0, 205],
    "mediumorchid": [186, 85, 211],
    "mediumpurple": [147, 112, 219],
    "mediumseagreen": [60, 179, 113],
    "mediumslateblue": [123, 104, 238],
    "mediumspringgreen": [0, 250, 154],
    "mediumturquoise": [72, 209, 204],
    "mediumvioletred": [199, 21, 133],
    "midnightblue": [25, 25, 112],
    "mintcream": [245, 255, 250],
    "mistyrose": [255, 228, 225],
    "moccasin": [255, 228, 181],
    "navajowhite": [255, 222, 173],
    "navy": [0, 0, 128],
    "oldlace": [253, 245, 230],
    "olive": [128, 128, 0],
    "olivedrab": [107, 142, 35],
    "orange": [255, 165, 0],
    "orangered": [255, 69, 0],
    "orchid": [218, 112, 214],
    "palegoldenrod": [238, 232, 170],
    "palegreen": [152, 251, 152],
    "paleturquoise": [175, 238, 238],
    "palevioletred": [219, 112, 147],
    "papayawhip": [255, 239, 213],
    "peachpuff": [255, 218, 185],
    "peru": [205, 133, 63],
    "pink": [255, 192, 203],
    "plum": [221, 160, 221],
    "powderblue": [176, 224, 230],
    "purple": [128, 0, 128],
    "rebeccapurple": [102, 51, 153],
    "red": [255, 0, 0],
    "rosybrown": [188, 143, 143],
    "royalblue": [65, 105, 225],
    "saddlebrown": [139, 69, 19],
    "salmon": [250, 128, 114],
    "sandybrown": [244, 164, 96],
    "seagreen": [46, 139, 87],
    "seashell": [255, 245, 238],
    "sienna": [160, 82, 45],
    "silver": [192, 192, 192],
    "skyblue": [135, 206, 235],
    "slateblue": [106, 90, 205],
    "slategray": [112, 128, 144],
    "slategrey": [112, 128, 144],
    "snow": [255, 250, 250],
    "springgreen": [0, 255, 127],
    "steelblue": [70, 130, 180],
    "tan": [210, 180, 140],
    "teal": [0, 128, 128],
    "thistle": [216, 191, 216],
    "tomato": [255, 99, 71],
    "turquoise": [64, 224, 208],
    "violet": [238, 130, 238],
    "wheat": [245, 222, 179],
    "white": [255, 255, 255],
    "whitesmoke": [245, 245, 245],
    "yellow": [255, 255, 0],
    "yellowgreen": [154, 205, 50]
  };
  function isArrayish(obj) {
    if (!obj || typeof obj === "string") {
      return false;
    }
    return obj instanceof Array || Array.isArray(obj) || obj.length >= 0 && (obj.splice instanceof Function || Object.getOwnPropertyDescriptor(obj, obj.length - 1) && obj.constructor.name !== "String");
  }
  var concat = Array.prototype.concat;
  var slice = Array.prototype.slice;
  function swizzle(args) {
    var results = [];
    for (var i = 0, len = args.length; i < len; i++) {
      var arg = args[i];
      if (isArrayish(arg)) {
        results = concat.call(results, slice.call(arg));
      } else {
        results.push(arg);
      }
    }
    return results;
  }
  swizzle.wrap = function(fn) {
    return function() {
      return fn(swizzle(arguments));
    };
  };
  var hasOwnProperty = Object.hasOwnProperty;
  var reverseNames = /* @__PURE__ */ Object.create(null);
  for (var name in cssKeywords) {
    if (hasOwnProperty.call(cssKeywords, name)) {
      reverseNames[cssKeywords[name]] = name;
    }
  }
  var cs = {
    to: {},
    get: {}
  };
  cs.get = function(string2) {
    var prefix = string2.substring(0, 3).toLowerCase();
    var val;
    var model;
    switch (prefix) {
      case "hsl":
        val = cs.get.hsl(string2);
        model = "hsl";
        break;
      case "hwb":
        val = cs.get.hwb(string2);
        model = "hwb";
        break;
      default:
        val = cs.get.rgb(string2);
        model = "rgb";
        break;
    }
    if (!val) {
      return null;
    }
    return { model, value: val };
  };
  cs.get.rgb = function(string2) {
    if (!string2) {
      return null;
    }
    var abbr = /^#([a-f0-9]{3,4})$/i;
    var hex = /^#([a-f0-9]{6})([a-f0-9]{2})?$/i;
    var rgba = /^rgba?\(\s*([+-]?\d+)(?=[\s,])\s*(?:,\s*)?([+-]?\d+)(?=[\s,])\s*(?:,\s*)?([+-]?\d+)\s*(?:[,|\/]\s*([+-]?[\d\.]+)(%?)\s*)?\)$/;
    var per = /^rgba?\(\s*([+-]?[\d\.]+)\%\s*,?\s*([+-]?[\d\.]+)\%\s*,?\s*([+-]?[\d\.]+)\%\s*(?:[,|\/]\s*([+-]?[\d\.]+)(%?)\s*)?\)$/;
    var keyword = /^(\w+)$/;
    var rgb = [0, 0, 0, 1];
    var match;
    var i;
    var hexAlpha;
    if (match = string2.match(hex)) {
      hexAlpha = match[2];
      match = match[1];
      for (i = 0; i < 3; i++) {
        var i2 = i * 2;
        rgb[i] = parseInt(match.slice(i2, i2 + 2), 16);
      }
      if (hexAlpha) {
        rgb[3] = parseInt(hexAlpha, 16) / 255;
      }
    } else if (match = string2.match(abbr)) {
      match = match[1];
      hexAlpha = match[3];
      for (i = 0; i < 3; i++) {
        rgb[i] = parseInt(match[i] + match[i], 16);
      }
      if (hexAlpha) {
        rgb[3] = parseInt(hexAlpha + hexAlpha, 16) / 255;
      }
    } else if (match = string2.match(rgba)) {
      for (i = 0; i < 3; i++) {
        rgb[i] = parseInt(match[i + 1], 0);
      }
      if (match[4]) {
        if (match[5]) {
          rgb[3] = parseFloat(match[4]) * 0.01;
        } else {
          rgb[3] = parseFloat(match[4]);
        }
      }
    } else if (match = string2.match(per)) {
      for (i = 0; i < 3; i++) {
        rgb[i] = Math.round(parseFloat(match[i + 1]) * 2.55);
      }
      if (match[4]) {
        if (match[5]) {
          rgb[3] = parseFloat(match[4]) * 0.01;
        } else {
          rgb[3] = parseFloat(match[4]);
        }
      }
    } else if (match = string2.match(keyword)) {
      if (match[1] === "transparent") {
        return [0, 0, 0, 0];
      }
      if (!hasOwnProperty.call(cssKeywords, match[1])) {
        return null;
      }
      rgb = cssKeywords[match[1]];
      rgb[3] = 1;
      return rgb;
    } else {
      return null;
    }
    for (i = 0; i < 3; i++) {
      rgb[i] = clamp(rgb[i], 0, 255);
    }
    rgb[3] = clamp(rgb[3], 0, 1);
    return rgb;
  };
  cs.get.hsl = function(string2) {
    if (!string2) {
      return null;
    }
    var hsl = /^hsla?\(\s*([+-]?(?:\d{0,3}\.)?\d+)(?:deg)?\s*,?\s*([+-]?[\d\.]+)%\s*,?\s*([+-]?[\d\.]+)%\s*(?:[,|\/]\s*([+-]?(?=\.\d|\d)(?:0|[1-9]\d*)?(?:\.\d*)?(?:[eE][+-]?\d+)?)\s*)?\)$/;
    var match = string2.match(hsl);
    if (match) {
      var alpha = parseFloat(match[4]);
      var h = (parseFloat(match[1]) % 360 + 360) % 360;
      var s = clamp(parseFloat(match[2]), 0, 100);
      var l = clamp(parseFloat(match[3]), 0, 100);
      var a = clamp(isNaN(alpha) ? 1 : alpha, 0, 1);
      return [h, s, l, a];
    }
    return null;
  };
  cs.get.hwb = function(string2) {
    if (!string2) {
      return null;
    }
    var hwb = /^hwb\(\s*([+-]?\d{0,3}(?:\.\d+)?)(?:deg)?\s*,\s*([+-]?[\d\.]+)%\s*,\s*([+-]?[\d\.]+)%\s*(?:,\s*([+-]?(?=\.\d|\d)(?:0|[1-9]\d*)?(?:\.\d*)?(?:[eE][+-]?\d+)?)\s*)?\)$/;
    var match = string2.match(hwb);
    if (match) {
      var alpha = parseFloat(match[4]);
      var h = (parseFloat(match[1]) % 360 + 360) % 360;
      var w = clamp(parseFloat(match[2]), 0, 100);
      var b = clamp(parseFloat(match[3]), 0, 100);
      var a = clamp(isNaN(alpha) ? 1 : alpha, 0, 1);
      return [h, w, b, a];
    }
    return null;
  };
  cs.to.hex = function() {
    var rgba = swizzle(arguments);
    return "#" + hexDouble(rgba[0]) + hexDouble(rgba[1]) + hexDouble(rgba[2]) + (rgba[3] < 1 ? hexDouble(Math.round(rgba[3] * 255)) : "");
  };
  cs.to.rgb = function() {
    var rgba = swizzle(arguments);
    return rgba.length < 4 || rgba[3] === 1 ? "rgb(" + Math.round(rgba[0]) + ", " + Math.round(rgba[1]) + ", " + Math.round(rgba[2]) + ")" : "rgba(" + Math.round(rgba[0]) + ", " + Math.round(rgba[1]) + ", " + Math.round(rgba[2]) + ", " + rgba[3] + ")";
  };
  cs.to.rgb.percent = function() {
    var rgba = swizzle(arguments);
    var r = Math.round(rgba[0] / 255 * 100);
    var g = Math.round(rgba[1] / 255 * 100);
    var b = Math.round(rgba[2] / 255 * 100);
    return rgba.length < 4 || rgba[3] === 1 ? "rgb(" + r + "%, " + g + "%, " + b + "%)" : "rgba(" + r + "%, " + g + "%, " + b + "%, " + rgba[3] + ")";
  };
  cs.to.hsl = function() {
    var hsla = swizzle(arguments);
    return hsla.length < 4 || hsla[3] === 1 ? "hsl(" + hsla[0] + ", " + hsla[1] + "%, " + hsla[2] + "%)" : "hsla(" + hsla[0] + ", " + hsla[1] + "%, " + hsla[2] + "%, " + hsla[3] + ")";
  };
  cs.to.hwb = function() {
    var hwba = swizzle(arguments);
    var a = "";
    if (hwba.length >= 4 && hwba[3] !== 1) {
      a = ", " + hwba[3];
    }
    return "hwb(" + hwba[0] + ", " + hwba[1] + "%, " + hwba[2] + "%" + a + ")";
  };
  cs.to.keyword = function(rgb) {
    return reverseNames[rgb.slice(0, 3)];
  };
  function clamp(num, min, max) {
    return Math.min(Math.max(min, num), max);
  }
  function hexDouble(num) {
    var str = Math.round(num).toString(16).toUpperCase();
    return str.length < 2 ? "0" + str : str;
  }
  const reverseKeywords = {};
  for (const key of Object.keys(cssKeywords)) {
    reverseKeywords[cssKeywords[key]] = key;
  }
  const convert$1 = {
    rgb: { channels: 3, labels: "rgb" },
    hsl: { channels: 3, labels: "hsl" },
    hsv: { channels: 3, labels: "hsv" },
    hwb: { channels: 3, labels: "hwb" },
    cmyk: { channels: 4, labels: "cmyk" },
    xyz: { channels: 3, labels: "xyz" },
    lab: { channels: 3, labels: "lab" },
    lch: { channels: 3, labels: "lch" },
    hex: { channels: 1, labels: ["hex"] },
    keyword: { channels: 1, labels: ["keyword"] },
    ansi16: { channels: 1, labels: ["ansi16"] },
    ansi256: { channels: 1, labels: ["ansi256"] },
    hcg: { channels: 3, labels: ["h", "c", "g"] },
    apple: { channels: 3, labels: ["r16", "g16", "b16"] },
    gray: { channels: 1, labels: ["gray"] }
  };
  for (const model of Object.keys(convert$1)) {
    if (!("channels" in convert$1[model])) {
      throw new Error("missing channels property: " + model);
    }
    if (!("labels" in convert$1[model])) {
      throw new Error("missing channel labels property: " + model);
    }
    if (convert$1[model].labels.length !== convert$1[model].channels) {
      throw new Error("channel and label counts mismatch: " + model);
    }
    const { channels, labels } = convert$1[model];
    delete convert$1[model].channels;
    delete convert$1[model].labels;
    Object.defineProperty(convert$1[model], "channels", { value: channels });
    Object.defineProperty(convert$1[model], "labels", { value: labels });
  }
  convert$1.rgb.hsl = function(rgb) {
    const r = rgb[0] / 255;
    const g = rgb[1] / 255;
    const b = rgb[2] / 255;
    const min = Math.min(r, g, b);
    const max = Math.max(r, g, b);
    const delta = max - min;
    let h;
    let s;
    if (max === min) {
      h = 0;
    } else if (r === max) {
      h = (g - b) / delta;
    } else if (g === max) {
      h = 2 + (b - r) / delta;
    } else if (b === max) {
      h = 4 + (r - g) / delta;
    }
    h = Math.min(h * 60, 360);
    if (h < 0) {
      h += 360;
    }
    const l = (min + max) / 2;
    if (max === min) {
      s = 0;
    } else if (l <= 0.5) {
      s = delta / (max + min);
    } else {
      s = delta / (2 - max - min);
    }
    return [h, s * 100, l * 100];
  };
  convert$1.rgb.hsv = function(rgb) {
    let rdif;
    let gdif;
    let bdif;
    let h;
    let s;
    const r = rgb[0] / 255;
    const g = rgb[1] / 255;
    const b = rgb[2] / 255;
    const v = Math.max(r, g, b);
    const diff = v - Math.min(r, g, b);
    const diffc = function(c) {
      return (v - c) / 6 / diff + 1 / 2;
    };
    if (diff === 0) {
      h = 0;
      s = 0;
    } else {
      s = diff / v;
      rdif = diffc(r);
      gdif = diffc(g);
      bdif = diffc(b);
      if (r === v) {
        h = bdif - gdif;
      } else if (g === v) {
        h = 1 / 3 + rdif - bdif;
      } else if (b === v) {
        h = 2 / 3 + gdif - rdif;
      }
      if (h < 0) {
        h += 1;
      } else if (h > 1) {
        h -= 1;
      }
    }
    return [
      h * 360,
      s * 100,
      v * 100
    ];
  };
  convert$1.rgb.hwb = function(rgb) {
    const r = rgb[0];
    const g = rgb[1];
    let b = rgb[2];
    const h = convert$1.rgb.hsl(rgb)[0];
    const w = 1 / 255 * Math.min(r, Math.min(g, b));
    b = 1 - 1 / 255 * Math.max(r, Math.max(g, b));
    return [h, w * 100, b * 100];
  };
  convert$1.rgb.cmyk = function(rgb) {
    const r = rgb[0] / 255;
    const g = rgb[1] / 255;
    const b = rgb[2] / 255;
    const k = Math.min(1 - r, 1 - g, 1 - b);
    const c = (1 - r - k) / (1 - k) || 0;
    const m = (1 - g - k) / (1 - k) || 0;
    const y = (1 - b - k) / (1 - k) || 0;
    return [c * 100, m * 100, y * 100, k * 100];
  };
  function comparativeDistance(x, y) {
    return (x[0] - y[0]) ** 2 + (x[1] - y[1]) ** 2 + (x[2] - y[2]) ** 2;
  }
  convert$1.rgb.keyword = function(rgb) {
    const reversed = reverseKeywords[rgb];
    if (reversed) {
      return reversed;
    }
    let currentClosestDistance = Infinity;
    let currentClosestKeyword;
    for (const keyword of Object.keys(cssKeywords)) {
      const value = cssKeywords[keyword];
      const distance = comparativeDistance(rgb, value);
      if (distance < currentClosestDistance) {
        currentClosestDistance = distance;
        currentClosestKeyword = keyword;
      }
    }
    return currentClosestKeyword;
  };
  convert$1.keyword.rgb = function(keyword) {
    return cssKeywords[keyword];
  };
  convert$1.rgb.xyz = function(rgb) {
    let r = rgb[0] / 255;
    let g = rgb[1] / 255;
    let b = rgb[2] / 255;
    r = r > 0.04045 ? ((r + 0.055) / 1.055) ** 2.4 : r / 12.92;
    g = g > 0.04045 ? ((g + 0.055) / 1.055) ** 2.4 : g / 12.92;
    b = b > 0.04045 ? ((b + 0.055) / 1.055) ** 2.4 : b / 12.92;
    const x = r * 0.4124 + g * 0.3576 + b * 0.1805;
    const y = r * 0.2126 + g * 0.7152 + b * 0.0722;
    const z = r * 0.0193 + g * 0.1192 + b * 0.9505;
    return [x * 100, y * 100, z * 100];
  };
  convert$1.rgb.lab = function(rgb) {
    const xyz = convert$1.rgb.xyz(rgb);
    let x = xyz[0];
    let y = xyz[1];
    let z = xyz[2];
    x /= 95.047;
    y /= 100;
    z /= 108.883;
    x = x > 8856e-6 ? x ** (1 / 3) : 7.787 * x + 16 / 116;
    y = y > 8856e-6 ? y ** (1 / 3) : 7.787 * y + 16 / 116;
    z = z > 8856e-6 ? z ** (1 / 3) : 7.787 * z + 16 / 116;
    const l = 116 * y - 16;
    const a = 500 * (x - y);
    const b = 200 * (y - z);
    return [l, a, b];
  };
  convert$1.hsl.rgb = function(hsl) {
    const h = hsl[0] / 360;
    const s = hsl[1] / 100;
    const l = hsl[2] / 100;
    let t2;
    let t3;
    let val;
    if (s === 0) {
      val = l * 255;
      return [val, val, val];
    }
    if (l < 0.5) {
      t2 = l * (1 + s);
    } else {
      t2 = l + s - l * s;
    }
    const t1 = 2 * l - t2;
    const rgb = [0, 0, 0];
    for (let i = 0; i < 3; i++) {
      t3 = h + 1 / 3 * -(i - 1);
      if (t3 < 0) {
        t3++;
      }
      if (t3 > 1) {
        t3--;
      }
      if (6 * t3 < 1) {
        val = t1 + (t2 - t1) * 6 * t3;
      } else if (2 * t3 < 1) {
        val = t2;
      } else if (3 * t3 < 2) {
        val = t1 + (t2 - t1) * (2 / 3 - t3) * 6;
      } else {
        val = t1;
      }
      rgb[i] = val * 255;
    }
    return rgb;
  };
  convert$1.hsl.hsv = function(hsl) {
    const h = hsl[0];
    let s = hsl[1] / 100;
    let l = hsl[2] / 100;
    let smin = s;
    const lmin = Math.max(l, 0.01);
    l *= 2;
    s *= l <= 1 ? l : 2 - l;
    smin *= lmin <= 1 ? lmin : 2 - lmin;
    const v = (l + s) / 2;
    const sv = l === 0 ? 2 * smin / (lmin + smin) : 2 * s / (l + s);
    return [h, sv * 100, v * 100];
  };
  convert$1.hsv.rgb = function(hsv) {
    const h = hsv[0] / 60;
    const s = hsv[1] / 100;
    let v = hsv[2] / 100;
    const hi = Math.floor(h) % 6;
    const f = h - Math.floor(h);
    const p = 255 * v * (1 - s);
    const q = 255 * v * (1 - s * f);
    const t2 = 255 * v * (1 - s * (1 - f));
    v *= 255;
    switch (hi) {
      case 0:
        return [v, t2, p];
      case 1:
        return [q, v, p];
      case 2:
        return [p, v, t2];
      case 3:
        return [p, q, v];
      case 4:
        return [t2, p, v];
      case 5:
        return [v, p, q];
    }
  };
  convert$1.hsv.hsl = function(hsv) {
    const h = hsv[0];
    const s = hsv[1] / 100;
    const v = hsv[2] / 100;
    const vmin = Math.max(v, 0.01);
    let sl;
    let l;
    l = (2 - s) * v;
    const lmin = (2 - s) * vmin;
    sl = s * vmin;
    sl /= lmin <= 1 ? lmin : 2 - lmin;
    sl = sl || 0;
    l /= 2;
    return [h, sl * 100, l * 100];
  };
  convert$1.hwb.rgb = function(hwb) {
    const h = hwb[0] / 360;
    let wh = hwb[1] / 100;
    let bl = hwb[2] / 100;
    const ratio = wh + bl;
    let f;
    if (ratio > 1) {
      wh /= ratio;
      bl /= ratio;
    }
    const i = Math.floor(6 * h);
    const v = 1 - bl;
    f = 6 * h - i;
    if ((i & 1) !== 0) {
      f = 1 - f;
    }
    const n = wh + f * (v - wh);
    let r;
    let g;
    let b;
    switch (i) {
      default:
      case 6:
      case 0:
        r = v;
        g = n;
        b = wh;
        break;
      case 1:
        r = n;
        g = v;
        b = wh;
        break;
      case 2:
        r = wh;
        g = v;
        b = n;
        break;
      case 3:
        r = wh;
        g = n;
        b = v;
        break;
      case 4:
        r = n;
        g = wh;
        b = v;
        break;
      case 5:
        r = v;
        g = wh;
        b = n;
        break;
    }
    return [r * 255, g * 255, b * 255];
  };
  convert$1.cmyk.rgb = function(cmyk) {
    const c = cmyk[0] / 100;
    const m = cmyk[1] / 100;
    const y = cmyk[2] / 100;
    const k = cmyk[3] / 100;
    const r = 1 - Math.min(1, c * (1 - k) + k);
    const g = 1 - Math.min(1, m * (1 - k) + k);
    const b = 1 - Math.min(1, y * (1 - k) + k);
    return [r * 255, g * 255, b * 255];
  };
  convert$1.xyz.rgb = function(xyz) {
    const x = xyz[0] / 100;
    const y = xyz[1] / 100;
    const z = xyz[2] / 100;
    let r;
    let g;
    let b;
    r = x * 3.2406 + y * -1.5372 + z * -0.4986;
    g = x * -0.9689 + y * 1.8758 + z * 0.0415;
    b = x * 0.0557 + y * -0.204 + z * 1.057;
    r = r > 31308e-7 ? 1.055 * r ** (1 / 2.4) - 0.055 : r * 12.92;
    g = g > 31308e-7 ? 1.055 * g ** (1 / 2.4) - 0.055 : g * 12.92;
    b = b > 31308e-7 ? 1.055 * b ** (1 / 2.4) - 0.055 : b * 12.92;
    r = Math.min(Math.max(0, r), 1);
    g = Math.min(Math.max(0, g), 1);
    b = Math.min(Math.max(0, b), 1);
    return [r * 255, g * 255, b * 255];
  };
  convert$1.xyz.lab = function(xyz) {
    let x = xyz[0];
    let y = xyz[1];
    let z = xyz[2];
    x /= 95.047;
    y /= 100;
    z /= 108.883;
    x = x > 8856e-6 ? x ** (1 / 3) : 7.787 * x + 16 / 116;
    y = y > 8856e-6 ? y ** (1 / 3) : 7.787 * y + 16 / 116;
    z = z > 8856e-6 ? z ** (1 / 3) : 7.787 * z + 16 / 116;
    const l = 116 * y - 16;
    const a = 500 * (x - y);
    const b = 200 * (y - z);
    return [l, a, b];
  };
  convert$1.lab.xyz = function(lab) {
    const l = lab[0];
    const a = lab[1];
    const b = lab[2];
    let x;
    let y;
    let z;
    y = (l + 16) / 116;
    x = a / 500 + y;
    z = y - b / 200;
    const y2 = y ** 3;
    const x2 = x ** 3;
    const z2 = z ** 3;
    y = y2 > 8856e-6 ? y2 : (y - 16 / 116) / 7.787;
    x = x2 > 8856e-6 ? x2 : (x - 16 / 116) / 7.787;
    z = z2 > 8856e-6 ? z2 : (z - 16 / 116) / 7.787;
    x *= 95.047;
    y *= 100;
    z *= 108.883;
    return [x, y, z];
  };
  convert$1.lab.lch = function(lab) {
    const l = lab[0];
    const a = lab[1];
    const b = lab[2];
    let h;
    const hr = Math.atan2(b, a);
    h = hr * 360 / 2 / Math.PI;
    if (h < 0) {
      h += 360;
    }
    const c = Math.sqrt(a * a + b * b);
    return [l, c, h];
  };
  convert$1.lch.lab = function(lch) {
    const l = lch[0];
    const c = lch[1];
    const h = lch[2];
    const hr = h / 360 * 2 * Math.PI;
    const a = c * Math.cos(hr);
    const b = c * Math.sin(hr);
    return [l, a, b];
  };
  convert$1.rgb.ansi16 = function(args, saturation = null) {
    const [r, g, b] = args;
    let value = saturation === null ? convert$1.rgb.hsv(args)[2] : saturation;
    value = Math.round(value / 50);
    if (value === 0) {
      return 30;
    }
    let ansi = 30 + (Math.round(b / 255) << 2 | Math.round(g / 255) << 1 | Math.round(r / 255));
    if (value === 2) {
      ansi += 60;
    }
    return ansi;
  };
  convert$1.hsv.ansi16 = function(args) {
    return convert$1.rgb.ansi16(convert$1.hsv.rgb(args), args[2]);
  };
  convert$1.rgb.ansi256 = function(args) {
    const r = args[0];
    const g = args[1];
    const b = args[2];
    if (r === g && g === b) {
      if (r < 8) {
        return 16;
      }
      if (r > 248) {
        return 231;
      }
      return Math.round((r - 8) / 247 * 24) + 232;
    }
    const ansi = 16 + 36 * Math.round(r / 255 * 5) + 6 * Math.round(g / 255 * 5) + Math.round(b / 255 * 5);
    return ansi;
  };
  convert$1.ansi16.rgb = function(args) {
    let color = args % 10;
    if (color === 0 || color === 7) {
      if (args > 50) {
        color += 3.5;
      }
      color = color / 10.5 * 255;
      return [color, color, color];
    }
    const mult = (~~(args > 50) + 1) * 0.5;
    const r = (color & 1) * mult * 255;
    const g = (color >> 1 & 1) * mult * 255;
    const b = (color >> 2 & 1) * mult * 255;
    return [r, g, b];
  };
  convert$1.ansi256.rgb = function(args) {
    if (args >= 232) {
      const c = (args - 232) * 10 + 8;
      return [c, c, c];
    }
    args -= 16;
    let rem;
    const r = Math.floor(args / 36) / 5 * 255;
    const g = Math.floor((rem = args % 36) / 6) / 5 * 255;
    const b = rem % 6 / 5 * 255;
    return [r, g, b];
  };
  convert$1.rgb.hex = function(args) {
    const integer = ((Math.round(args[0]) & 255) << 16) + ((Math.round(args[1]) & 255) << 8) + (Math.round(args[2]) & 255);
    const string2 = integer.toString(16).toUpperCase();
    return "000000".substring(string2.length) + string2;
  };
  convert$1.hex.rgb = function(args) {
    const match = args.toString(16).match(/[a-f0-9]{6}|[a-f0-9]{3}/i);
    if (!match) {
      return [0, 0, 0];
    }
    let colorString = match[0];
    if (match[0].length === 3) {
      colorString = colorString.split("").map((char) => {
        return char + char;
      }).join("");
    }
    const integer = parseInt(colorString, 16);
    const r = integer >> 16 & 255;
    const g = integer >> 8 & 255;
    const b = integer & 255;
    return [r, g, b];
  };
  convert$1.rgb.hcg = function(rgb) {
    const r = rgb[0] / 255;
    const g = rgb[1] / 255;
    const b = rgb[2] / 255;
    const max = Math.max(Math.max(r, g), b);
    const min = Math.min(Math.min(r, g), b);
    const chroma = max - min;
    let grayscale;
    let hue;
    if (chroma < 1) {
      grayscale = min / (1 - chroma);
    } else {
      grayscale = 0;
    }
    if (chroma <= 0) {
      hue = 0;
    } else if (max === r) {
      hue = (g - b) / chroma % 6;
    } else if (max === g) {
      hue = 2 + (b - r) / chroma;
    } else {
      hue = 4 + (r - g) / chroma;
    }
    hue /= 6;
    hue %= 1;
    return [hue * 360, chroma * 100, grayscale * 100];
  };
  convert$1.hsl.hcg = function(hsl) {
    const s = hsl[1] / 100;
    const l = hsl[2] / 100;
    const c = l < 0.5 ? 2 * s * l : 2 * s * (1 - l);
    let f = 0;
    if (c < 1) {
      f = (l - 0.5 * c) / (1 - c);
    }
    return [hsl[0], c * 100, f * 100];
  };
  convert$1.hsv.hcg = function(hsv) {
    const s = hsv[1] / 100;
    const v = hsv[2] / 100;
    const c = s * v;
    let f = 0;
    if (c < 1) {
      f = (v - c) / (1 - c);
    }
    return [hsv[0], c * 100, f * 100];
  };
  convert$1.hcg.rgb = function(hcg) {
    const h = hcg[0] / 360;
    const c = hcg[1] / 100;
    const g = hcg[2] / 100;
    if (c === 0) {
      return [g * 255, g * 255, g * 255];
    }
    const pure = [0, 0, 0];
    const hi = h % 1 * 6;
    const v = hi % 1;
    const w = 1 - v;
    let mg = 0;
    switch (Math.floor(hi)) {
      case 0:
        pure[0] = 1;
        pure[1] = v;
        pure[2] = 0;
        break;
      case 1:
        pure[0] = w;
        pure[1] = 1;
        pure[2] = 0;
        break;
      case 2:
        pure[0] = 0;
        pure[1] = 1;
        pure[2] = v;
        break;
      case 3:
        pure[0] = 0;
        pure[1] = w;
        pure[2] = 1;
        break;
      case 4:
        pure[0] = v;
        pure[1] = 0;
        pure[2] = 1;
        break;
      default:
        pure[0] = 1;
        pure[1] = 0;
        pure[2] = w;
    }
    mg = (1 - c) * g;
    return [
      (c * pure[0] + mg) * 255,
      (c * pure[1] + mg) * 255,
      (c * pure[2] + mg) * 255
    ];
  };
  convert$1.hcg.hsv = function(hcg) {
    const c = hcg[1] / 100;
    const g = hcg[2] / 100;
    const v = c + g * (1 - c);
    let f = 0;
    if (v > 0) {
      f = c / v;
    }
    return [hcg[0], f * 100, v * 100];
  };
  convert$1.hcg.hsl = function(hcg) {
    const c = hcg[1] / 100;
    const g = hcg[2] / 100;
    const l = g * (1 - c) + 0.5 * c;
    let s = 0;
    if (l > 0 && l < 0.5) {
      s = c / (2 * l);
    } else if (l >= 0.5 && l < 1) {
      s = c / (2 * (1 - l));
    }
    return [hcg[0], s * 100, l * 100];
  };
  convert$1.hcg.hwb = function(hcg) {
    const c = hcg[1] / 100;
    const g = hcg[2] / 100;
    const v = c + g * (1 - c);
    return [hcg[0], (v - c) * 100, (1 - v) * 100];
  };
  convert$1.hwb.hcg = function(hwb) {
    const w = hwb[1] / 100;
    const b = hwb[2] / 100;
    const v = 1 - b;
    const c = v - w;
    let g = 0;
    if (c < 1) {
      g = (v - c) / (1 - c);
    }
    return [hwb[0], c * 100, g * 100];
  };
  convert$1.apple.rgb = function(apple) {
    return [apple[0] / 65535 * 255, apple[1] / 65535 * 255, apple[2] / 65535 * 255];
  };
  convert$1.rgb.apple = function(rgb) {
    return [rgb[0] / 255 * 65535, rgb[1] / 255 * 65535, rgb[2] / 255 * 65535];
  };
  convert$1.gray.rgb = function(args) {
    return [args[0] / 100 * 255, args[0] / 100 * 255, args[0] / 100 * 255];
  };
  convert$1.gray.hsl = function(args) {
    return [0, 0, args[0]];
  };
  convert$1.gray.hsv = convert$1.gray.hsl;
  convert$1.gray.hwb = function(gray) {
    return [0, 100, gray[0]];
  };
  convert$1.gray.cmyk = function(gray) {
    return [0, 0, 0, gray[0]];
  };
  convert$1.gray.lab = function(gray) {
    return [gray[0], 0, 0];
  };
  convert$1.gray.hex = function(gray) {
    const val = Math.round(gray[0] / 100 * 255) & 255;
    const integer = (val << 16) + (val << 8) + val;
    const string2 = integer.toString(16).toUpperCase();
    return "000000".substring(string2.length) + string2;
  };
  convert$1.rgb.gray = function(rgb) {
    const val = (rgb[0] + rgb[1] + rgb[2]) / 3;
    return [val / 255 * 100];
  };
  function buildGraph() {
    const graph = {};
    const models2 = Object.keys(convert$1);
    for (let len = models2.length, i = 0; i < len; i++) {
      graph[models2[i]] = {
        // http://jsperf.com/1-vs-infinity
        // micro-opt, but this is simple.
        distance: -1,
        parent: null
      };
    }
    return graph;
  }
  function deriveBFS(fromModel) {
    const graph = buildGraph();
    const queue = [fromModel];
    graph[fromModel].distance = 0;
    while (queue.length) {
      const current = queue.pop();
      const adjacents = Object.keys(convert$1[current]);
      for (let len = adjacents.length, i = 0; i < len; i++) {
        const adjacent = adjacents[i];
        const node = graph[adjacent];
        if (node.distance === -1) {
          node.distance = graph[current].distance + 1;
          node.parent = current;
          queue.unshift(adjacent);
        }
      }
    }
    return graph;
  }
  function link(from, to) {
    return function(args) {
      return to(from(args));
    };
  }
  function wrapConversion(toModel, graph) {
    const path = [graph[toModel].parent, toModel];
    let fn = convert$1[graph[toModel].parent][toModel];
    let cur = graph[toModel].parent;
    while (graph[cur].parent) {
      path.unshift(graph[cur].parent);
      fn = link(convert$1[graph[cur].parent][cur], fn);
      cur = graph[cur].parent;
    }
    fn.conversion = path;
    return fn;
  }
  function route(fromModel) {
    const graph = deriveBFS(fromModel);
    const conversion = {};
    const models2 = Object.keys(graph);
    for (let len = models2.length, i = 0; i < len; i++) {
      const toModel = models2[i];
      const node = graph[toModel];
      if (node.parent === null) {
        continue;
      }
      conversion[toModel] = wrapConversion(toModel, graph);
    }
    return conversion;
  }
  const convert = {};
  const models = Object.keys(convert$1);
  function wrapRaw(fn) {
    const wrappedFn = function(...args) {
      const arg0 = args[0];
      if (arg0 === void 0 || arg0 === null) {
        return arg0;
      }
      if (arg0.length > 1) {
        args = arg0;
      }
      return fn(args);
    };
    if ("conversion" in fn) {
      wrappedFn.conversion = fn.conversion;
    }
    return wrappedFn;
  }
  function wrapRounded(fn) {
    const wrappedFn = function(...args) {
      const arg0 = args[0];
      if (arg0 === void 0 || arg0 === null) {
        return arg0;
      }
      if (arg0.length > 1) {
        args = arg0;
      }
      const result = fn(args);
      if (typeof result === "object") {
        for (let len = result.length, i = 0; i < len; i++) {
          result[i] = Math.round(result[i]);
        }
      }
      return result;
    };
    if ("conversion" in fn) {
      wrappedFn.conversion = fn.conversion;
    }
    return wrappedFn;
  }
  models.forEach((fromModel) => {
    convert[fromModel] = {};
    Object.defineProperty(convert[fromModel], "channels", { value: convert$1[fromModel].channels });
    Object.defineProperty(convert[fromModel], "labels", { value: convert$1[fromModel].labels });
    const routes = route(fromModel);
    const routeModels = Object.keys(routes);
    routeModels.forEach((toModel) => {
      const fn = routes[toModel];
      convert[fromModel][toModel] = wrapRounded(fn);
      convert[fromModel][toModel].raw = wrapRaw(fn);
    });
  });
  const skippedModels = [
    // To be honest, I don't really feel like keyword belongs in color convert, but eh.
    "keyword",
    // Gray conflicts with some method names, and has its own method defined.
    "gray",
    // Shouldn't really be in color-convert either...
    "hex"
  ];
  const hashedModelKeys = {};
  for (const model of Object.keys(convert)) {
    hashedModelKeys[[...convert[model].labels].sort().join("")] = model;
  }
  const limiters = {};
  function Color(object2, model) {
    if (!(this instanceof Color)) {
      return new Color(object2, model);
    }
    if (model && model in skippedModels) {
      model = null;
    }
    if (model && !(model in convert)) {
      throw new Error("Unknown model: " + model);
    }
    let i;
    let channels;
    if (object2 == null) {
      this.model = "rgb";
      this.color = [0, 0, 0];
      this.valpha = 1;
    } else if (object2 instanceof Color) {
      this.model = object2.model;
      this.color = [...object2.color];
      this.valpha = object2.valpha;
    } else if (typeof object2 === "string") {
      const result = cs.get(object2);
      if (result === null) {
        throw new Error("Unable to parse color from string: " + object2);
      }
      this.model = result.model;
      channels = convert[this.model].channels;
      this.color = result.value.slice(0, channels);
      this.valpha = typeof result.value[channels] === "number" ? result.value[channels] : 1;
    } else if (object2.length > 0) {
      this.model = model || "rgb";
      channels = convert[this.model].channels;
      const newArray = Array.prototype.slice.call(object2, 0, channels);
      this.color = zeroArray(newArray, channels);
      this.valpha = typeof object2[channels] === "number" ? object2[channels] : 1;
    } else if (typeof object2 === "number") {
      this.model = "rgb";
      this.color = [
        object2 >> 16 & 255,
        object2 >> 8 & 255,
        object2 & 255
      ];
      this.valpha = 1;
    } else {
      this.valpha = 1;
      const keys = Object.keys(object2);
      if ("alpha" in object2) {
        keys.splice(keys.indexOf("alpha"), 1);
        this.valpha = typeof object2.alpha === "number" ? object2.alpha : 0;
      }
      const hashedKeys = keys.sort().join("");
      if (!(hashedKeys in hashedModelKeys)) {
        throw new Error("Unable to parse color from object: " + JSON.stringify(object2));
      }
      this.model = hashedModelKeys[hashedKeys];
      const { labels } = convert[this.model];
      const color = [];
      for (i = 0; i < labels.length; i++) {
        color.push(object2[labels[i]]);
      }
      this.color = zeroArray(color);
    }
    if (limiters[this.model]) {
      channels = convert[this.model].channels;
      for (i = 0; i < channels; i++) {
        const limit = limiters[this.model][i];
        if (limit) {
          this.color[i] = limit(this.color[i]);
        }
      }
    }
    this.valpha = Math.max(0, Math.min(1, this.valpha));
    if (Object.freeze) {
      Object.freeze(this);
    }
  }
  Color.prototype = {
    toString() {
      return this.string();
    },
    toJSON() {
      return this[this.model]();
    },
    string(places) {
      let self2 = this.model in cs.to ? this : this.rgb();
      self2 = self2.round(typeof places === "number" ? places : 1);
      const args = self2.valpha === 1 ? self2.color : [...self2.color, this.valpha];
      return cs.to[self2.model](args);
    },
    percentString(places) {
      const self2 = this.rgb().round(typeof places === "number" ? places : 1);
      const args = self2.valpha === 1 ? self2.color : [...self2.color, this.valpha];
      return cs.to.rgb.percent(args);
    },
    array() {
      return this.valpha === 1 ? [...this.color] : [...this.color, this.valpha];
    },
    object() {
      const result = {};
      const { channels } = convert[this.model];
      const { labels } = convert[this.model];
      for (let i = 0; i < channels; i++) {
        result[labels[i]] = this.color[i];
      }
      if (this.valpha !== 1) {
        result.alpha = this.valpha;
      }
      return result;
    },
    unitArray() {
      const rgb = this.rgb().color;
      rgb[0] /= 255;
      rgb[1] /= 255;
      rgb[2] /= 255;
      if (this.valpha !== 1) {
        rgb.push(this.valpha);
      }
      return rgb;
    },
    unitObject() {
      const rgb = this.rgb().object();
      rgb.r /= 255;
      rgb.g /= 255;
      rgb.b /= 255;
      if (this.valpha !== 1) {
        rgb.alpha = this.valpha;
      }
      return rgb;
    },
    round(places) {
      places = Math.max(places || 0, 0);
      return new Color([...this.color.map(roundToPlace(places)), this.valpha], this.model);
    },
    alpha(value) {
      if (value !== void 0) {
        return new Color([...this.color, Math.max(0, Math.min(1, value))], this.model);
      }
      return this.valpha;
    },
    // Rgb
    red: getset("rgb", 0, maxfn(255)),
    green: getset("rgb", 1, maxfn(255)),
    blue: getset("rgb", 2, maxfn(255)),
    hue: getset(["hsl", "hsv", "hsl", "hwb", "hcg"], 0, (value) => (value % 360 + 360) % 360),
    saturationl: getset("hsl", 1, maxfn(100)),
    lightness: getset("hsl", 2, maxfn(100)),
    saturationv: getset("hsv", 1, maxfn(100)),
    value: getset("hsv", 2, maxfn(100)),
    chroma: getset("hcg", 1, maxfn(100)),
    gray: getset("hcg", 2, maxfn(100)),
    white: getset("hwb", 1, maxfn(100)),
    wblack: getset("hwb", 2, maxfn(100)),
    cyan: getset("cmyk", 0, maxfn(100)),
    magenta: getset("cmyk", 1, maxfn(100)),
    yellow: getset("cmyk", 2, maxfn(100)),
    black: getset("cmyk", 3, maxfn(100)),
    x: getset("xyz", 0, maxfn(95.047)),
    y: getset("xyz", 1, maxfn(100)),
    z: getset("xyz", 2, maxfn(108.833)),
    l: getset("lab", 0, maxfn(100)),
    a: getset("lab", 1),
    b: getset("lab", 2),
    keyword(value) {
      if (value !== void 0) {
        return new Color(value);
      }
      return convert[this.model].keyword(this.color);
    },
    hex(value) {
      if (value !== void 0) {
        return new Color(value);
      }
      return cs.to.hex(this.rgb().round().color);
    },
    hexa(value) {
      if (value !== void 0) {
        return new Color(value);
      }
      const rgbArray = this.rgb().round().color;
      let alphaHex = Math.round(this.valpha * 255).toString(16).toUpperCase();
      if (alphaHex.length === 1) {
        alphaHex = "0" + alphaHex;
      }
      return cs.to.hex(rgbArray) + alphaHex;
    },
    rgbNumber() {
      const rgb = this.rgb().color;
      return (rgb[0] & 255) << 16 | (rgb[1] & 255) << 8 | rgb[2] & 255;
    },
    luminosity() {
      const rgb = this.rgb().color;
      const lum = [];
      for (const [i, element] of rgb.entries()) {
        const chan = element / 255;
        lum[i] = chan <= 0.04045 ? chan / 12.92 : ((chan + 0.055) / 1.055) ** 2.4;
      }
      return 0.2126 * lum[0] + 0.7152 * lum[1] + 0.0722 * lum[2];
    },
    contrast(color2) {
      const lum1 = this.luminosity();
      const lum2 = color2.luminosity();
      if (lum1 > lum2) {
        return (lum1 + 0.05) / (lum2 + 0.05);
      }
      return (lum2 + 0.05) / (lum1 + 0.05);
    },
    level(color2) {
      const contrastRatio = this.contrast(color2);
      if (contrastRatio >= 7) {
        return "AAA";
      }
      return contrastRatio >= 4.5 ? "AA" : "";
    },
    isDark() {
      const rgb = this.rgb().color;
      const yiq = (rgb[0] * 2126 + rgb[1] * 7152 + rgb[2] * 722) / 1e4;
      return yiq < 128;
    },
    isLight() {
      return !this.isDark();
    },
    negate() {
      const rgb = this.rgb();
      for (let i = 0; i < 3; i++) {
        rgb.color[i] = 255 - rgb.color[i];
      }
      return rgb;
    },
    lighten(ratio) {
      const hsl = this.hsl();
      hsl.color[2] += hsl.color[2] * ratio;
      return hsl;
    },
    darken(ratio) {
      const hsl = this.hsl();
      hsl.color[2] -= hsl.color[2] * ratio;
      return hsl;
    },
    saturate(ratio) {
      const hsl = this.hsl();
      hsl.color[1] += hsl.color[1] * ratio;
      return hsl;
    },
    desaturate(ratio) {
      const hsl = this.hsl();
      hsl.color[1] -= hsl.color[1] * ratio;
      return hsl;
    },
    whiten(ratio) {
      const hwb = this.hwb();
      hwb.color[1] += hwb.color[1] * ratio;
      return hwb;
    },
    blacken(ratio) {
      const hwb = this.hwb();
      hwb.color[2] += hwb.color[2] * ratio;
      return hwb;
    },
    grayscale() {
      const rgb = this.rgb().color;
      const value = rgb[0] * 0.3 + rgb[1] * 0.59 + rgb[2] * 0.11;
      return Color.rgb(value, value, value);
    },
    fade(ratio) {
      return this.alpha(this.valpha - this.valpha * ratio);
    },
    opaquer(ratio) {
      return this.alpha(this.valpha + this.valpha * ratio);
    },
    rotate(degrees) {
      const hsl = this.hsl();
      let hue = hsl.color[0];
      hue = (hue + degrees) % 360;
      hue = hue < 0 ? 360 + hue : hue;
      hsl.color[0] = hue;
      return hsl;
    },
    mix(mixinColor, weight) {
      if (!mixinColor || !mixinColor.rgb) {
        throw new Error('Argument to "mix" was not a Color instance, but rather an instance of ' + typeof mixinColor);
      }
      const color1 = mixinColor.rgb();
      const color2 = this.rgb();
      const p = weight === void 0 ? 0.5 : weight;
      const w = 2 * p - 1;
      const a = color1.alpha() - color2.alpha();
      const w1 = ((w * a === -1 ? w : (w + a) / (1 + w * a)) + 1) / 2;
      const w2 = 1 - w1;
      return Color.rgb(
        w1 * color1.red() + w2 * color2.red(),
        w1 * color1.green() + w2 * color2.green(),
        w1 * color1.blue() + w2 * color2.blue(),
        color1.alpha() * p + color2.alpha() * (1 - p)
      );
    }
  };
  for (const model of Object.keys(convert)) {
    if (skippedModels.includes(model)) {
      continue;
    }
    const { channels } = convert[model];
    Color.prototype[model] = function(...args) {
      if (this.model === model) {
        return new Color(this);
      }
      if (args.length > 0) {
        return new Color(args, model);
      }
      return new Color([...assertArray(convert[this.model][model].raw(this.color)), this.valpha], model);
    };
    Color[model] = function(...args) {
      let color = args[0];
      if (typeof color === "number") {
        color = zeroArray(args, channels);
      }
      return new Color(color, model);
    };
  }
  function roundTo(number2, places) {
    return Number(number2.toFixed(places));
  }
  function roundToPlace(places) {
    return function(number2) {
      return roundTo(number2, places);
    };
  }
  function getset(model, channel, modifier) {
    model = Array.isArray(model) ? model : [model];
    for (const m of model) {
      (limiters[m] || (limiters[m] = []))[channel] = modifier;
    }
    model = model[0];
    return function(value) {
      let result;
      if (value !== void 0) {
        if (modifier) {
          value = modifier(value);
        }
        result = this[model]();
        result.color[channel] = value;
        return result;
      }
      result = this[model]().color[channel];
      if (modifier) {
        result = modifier(result);
      }
      return result;
    };
  }
  function maxfn(max) {
    return function(v) {
      return Math.max(0, Math.min(max, v));
    };
  }
  function assertArray(value) {
    return Array.isArray(value) ? value : [value];
  }
  function zeroArray(array2, length) {
    for (let i = 0; i < length; i++) {
      if (typeof array2[i] !== "number") {
        array2[i] = 0;
      }
    }
    return array2;
  }
  function convertFormat(color = "#fff", format = "rgb", type = "string") {
    let colorObj = Color(color);
    if (colorObj[format]) {
      if (format == "hex" && type != "string")
        format = "rgb";
      let typeName = "";
      switch (type) {
        case "string":
          typeName = "toString";
          break;
        case "object":
          typeName = "object";
          break;
        case "array":
          typeName = "array";
          break;
        case "round":
          typeName = "round";
          break;
        default:
          throw Error("Unsupported target type:" + type);
      }
      return colorObj[format]()[typeName]();
    } else {
      throw Error("Unsupported target format: " + format);
    }
  }
  function gradient(startColor = "rgb(0, 0, 0)", endColor = "rgb(255, 255, 255)", step = 10) {
    const startRGB = convertFormat(startColor, "rgb", "array");
    const startR = startRGB[0];
    const startG = startRGB[1];
    const startB = startRGB[2];
    const endRGB = convertFormat(endColor, "rgb", "array");
    const endR = endRGB[0];
    const endG = endRGB[1];
    const endB = endRGB[2];
    const sR = (endR - startR) / step;
    const sG = (endG - startG) / step;
    const sB = (endB - startB) / step;
    const colorArr = [];
    for (let i = 0; i < step; i++) {
      let hex = convertFormat(`rgb(${Math.round(sR * i + startR)},${Math.round(sG * i + startG)},${Math.round(sB * i + startB)})`, "hex");
      if (i === 0)
        hex = convertFormat(startColor, "hex");
      if (i === step - 1)
        hex = convertFormat(endColor, "hex");
      colorArr.push(hex);
    }
    return colorArr;
  }
  const index$1 = {
    /**
     * 格式转换。
     */
    convertFormat,
    /**
     * 计算两个颜色之间的渐变值。
     */
    gradient,
    /**
     * 增加颜色的亮度。
     * @param {string} color - 输入的颜色。
     * @param {number} value - 增加的亮度值（0-1）。
     * @returns {string} 调整后的颜色。
     */
    lighten: (color, value, format = "rgb", type = "string") => convertFormat(Color(color).lighten(value), format, type),
    /**
     * 减少颜色的亮度。
     * @param {string} color - 输入的颜色。
     * @param {number} value - 减少的亮度值（0-1）。
     * @returns {string} 调整后的颜色。
     */
    darken: (color, value, format = "rgb", type = "string") => convertFormat(Color(color).darken(value), format, type),
    /**
     * 增加颜色的饱和度。
     * @param {string} color - 输入的颜色。
     * @param {number} value - 增加的饱和度值（0-1）。
     * @returns {string} 调整后的颜色。
     */
    saturate: (color, value, format = "rgb", type = "string") => convertFormat(Color(color).saturate(value), format, type),
    /**
     * 减少颜色的饱和度。
     * @param {string} color - 输入的颜色。
     * @param {number} value - 减少的饱和度值（0-1）。
     * @returns {string} 调整后的颜色。
     */
    desaturate: (color, value, format = "rgb", type = "string") => convertFormat(Color(color).desaturate(value), format, type),
    /**
     * 旋转颜色的色相。
     * @param {string} color - 输入的颜色。
     * @param {number} degrees - 旋转的度数。
     * @returns {string} 调整后的颜色。
     */
    rotate: (color, degrees, format = "rgb", type = "string") => convertFormat(Color(color).rotate(degrees), format, type),
    /**
     * 调整颜色的透明度。
     * @param {string} color - 输入的颜色。
     * @param {number} value - 透明度值（0-1，其中 1 是不透明）。
     * @returns {string} 调整后的颜色。
     */
    adjustAlpha: (color, value, format = "rgb", type = "string") => convertFormat(Color(color).alpha(value), format, type),
    /**
     * 获取颜色的亮度。
     * @param {string} color - 输入的颜色。
     * @returns {number} 颜色的亮度值（0-1）。
     */
    luminosity: (color, format) => Color(color).luminosity(),
    /**
     * 判断颜色是否为暗色。
     * @param {string} color - 输入的颜色。
     * @returns {boolean} 如果是暗色则返回 true，否则返回 false。
     */
    isDark: (color, format) => Color(color).isDark(),
    /**
     * 判断颜色是否为亮色。
     * @param {string} color - 输入的颜色。
     * @returns {boolean} 如果是亮色则返回 true，否则返回 false。
     */
    isLight: (color, format) => Color(color).isLight()
  };
  function range(min = 0, max = 0, value = 0) {
    return Math.max(min, Math.min(max, Number(value)));
  }
  function getPx(value, unit = false) {
    if (number(value)) {
      return unit ? `${value}px` : Number(value);
    }
    if (/(rpx|upx)$/.test(value)) {
      return unit ? `${uni.upx2px(parseInt(value))}px` : Number(uni.upx2px(parseInt(value)));
    }
    return unit ? `${parseInt(value)}px` : parseInt(value);
  }
  function sleep(value = 30) {
    return new Promise((resolve) => {
      setTimeout(() => {
        resolve();
      }, value);
    });
  }
  function os() {
    return uni.getSystemInfoSync().platform.toLowerCase();
  }
  function sys() {
    return uni.getSystemInfoSync();
  }
  function random(min, max) {
    if (min >= 0 && max > 0 && max >= min) {
      const gab = max - min + 1;
      return Math.floor(Math.random() * gab + min);
    }
    return 0;
  }
  function guid(len = 32, firstU = true, radix = null) {
    const chars = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz".split("");
    const uuid = [];
    radix = radix || chars.length;
    if (len) {
      for (let i = 0; i < len; i++)
        uuid[i] = chars[0 | Math.random() * radix];
    } else {
      let r;
      uuid[8] = uuid[13] = uuid[18] = uuid[23] = "-";
      uuid[14] = "4";
      for (let i = 0; i < 36; i++) {
        if (!uuid[i]) {
          r = 0 | Math.random() * 16;
          uuid[i] = chars[i == 19 ? r & 3 | 8 : r];
        }
      }
    }
    if (firstU) {
      uuid.shift();
      return `u${uuid.join("")}`;
    }
    return uuid.join("");
  }
  function $parent(name2 = void 0) {
    let parent = this.$parent;
    while (parent) {
      if (parent.$options && parent.$options.name !== name2) {
        parent = parent.$parent;
      } else {
        return parent;
      }
    }
    return false;
  }
  function addStyle(customStyle, target = "object") {
    if (empty(customStyle) || typeof customStyle === "object" && target === "object" || target === "string" && typeof customStyle === "string") {
      return customStyle;
    }
    if (target === "object") {
      customStyle = trim(customStyle);
      const styleArray = customStyle.split(";");
      const style = {};
      for (let i = 0; i < styleArray.length; i++) {
        if (styleArray[i]) {
          const item = styleArray[i].split(":");
          style[trim(item[0])] = trim(item[1]);
        }
      }
      return style;
    }
    let string2 = "";
    for (const i in customStyle) {
      const key = i.replace(/([A-Z])/g, "-$1").toLowerCase();
      string2 += `${key}:${customStyle[i]};`;
    }
    return trim(string2);
  }
  function addUnit(value = "auto", unit = ((_b) => (_b = ((_a) => (_a = uni == null ? void 0 : uni.$w) == null ? void 0 : _a.config)()) == null ? void 0 : _b.unit)() ? ((_d) => (_d = ((_c) => (_c = uni == null ? void 0 : uni.$w) == null ? void 0 : _c.config)()) == null ? void 0 : _d.unit)() : "px") {
    value = String(value);
    return number(value) ? `${value}${unit}` : value;
  }
  function deepClone(obj, cache = /* @__PURE__ */ new WeakMap()) {
    if (obj === null || typeof obj !== "object")
      return obj;
    if (cache.has(obj))
      return cache.get(obj);
    let clone;
    if (obj instanceof Date) {
      clone = new Date(obj.getTime());
    } else if (obj instanceof RegExp) {
      clone = new RegExp(obj);
    } else if (obj instanceof Map) {
      clone = new Map(Array.from(obj, ([key, value]) => [key, deepClone(value, cache)]));
    } else if (obj instanceof Set) {
      clone = new Set(Array.from(obj, (value) => deepClone(value, cache)));
    } else if (Array.isArray(obj)) {
      clone = obj.map((value) => deepClone(value, cache));
    } else if (Object.prototype.toString.call(obj) === "[object Object]") {
      clone = Object.create(Object.getPrototypeOf(obj));
      cache.set(obj, clone);
      for (const [key, value] of Object.entries(obj)) {
        clone[key] = deepClone(value, cache);
      }
    } else {
      clone = Object.assign({}, obj);
    }
    cache.set(obj, clone);
    return clone;
  }
  function deepMerge(target = {}, source = {}) {
    target = deepClone(target);
    if (typeof target !== "object" || target === null || typeof source !== "object" || source === null)
      return target;
    const merged = Array.isArray(target) ? target.slice() : Object.assign({}, target);
    for (const prop in source) {
      if (!source.hasOwnProperty(prop))
        continue;
      const sourceValue = source[prop];
      const targetValue = merged[prop];
      if (sourceValue instanceof Date) {
        merged[prop] = new Date(sourceValue);
      } else if (sourceValue instanceof RegExp) {
        merged[prop] = new RegExp(sourceValue);
      } else if (sourceValue instanceof Map) {
        merged[prop] = new Map(sourceValue);
      } else if (sourceValue instanceof Set) {
        merged[prop] = new Set(sourceValue);
      } else if (typeof sourceValue === "object" && sourceValue !== null) {
        merged[prop] = deepMerge(targetValue, sourceValue);
      } else {
        merged[prop] = sourceValue;
      }
    }
    return merged;
  }
  function error(err2) {
    {
      formatAppLog("error", "at uni_modules/wu-ui-tools/libs/function/index.js:253", `wuui提示：${err2}`);
    }
  }
  function randomArray(array2 = []) {
    return array2.sort(() => Math.random() - 0.5);
  }
  if (!String.prototype.padStart) {
    String.prototype.padStart = function(maxLength, fillString = " ") {
      if (Object.prototype.toString.call(fillString) !== "[object String]") {
        throw new TypeError(
          "fillString must be String"
        );
      }
      const str = this;
      if (str.length >= maxLength)
        return String(str);
      const fillLength = maxLength - str.length;
      let times2 = Math.ceil(fillLength / fillString.length);
      while (times2 >>= 1) {
        fillString += fillString;
        if (times2 === 1) {
          fillString += fillString;
        }
      }
      return fillString.slice(0, fillLength) + str;
    };
  }
  function timeFormat(dateTime = null, formatStr = "yyyy-mm-dd") {
    let date2;
    if (!dateTime) {
      date2 = /* @__PURE__ */ new Date();
    } else if (/^\d{10}$/.test(dateTime == null ? void 0 : dateTime.toString().trim())) {
      date2 = new Date(dateTime * 1e3);
    } else if (typeof dateTime === "string" && /^\d+$/.test(dateTime.trim())) {
      date2 = new Date(Number(dateTime));
    } else if (typeof dateTime === "string" && dateTime.includes("-") && !dateTime.includes("T")) {
      date2 = new Date(dateTime.replace(/-/g, "/"));
    } else {
      date2 = new Date(dateTime);
    }
    const timeSource = {
      "y": date2.getFullYear().toString(),
      // 年
      "m": (date2.getMonth() + 1).toString().padStart(2, "0"),
      // 月
      "d": date2.getDate().toString().padStart(2, "0"),
      // 日
      "h": date2.getHours().toString().padStart(2, "0"),
      // 时
      "M": date2.getMinutes().toString().padStart(2, "0"),
      // 分
      "s": date2.getSeconds().toString().padStart(2, "0")
      // 秒
      // 有其他格式化字符需求可以继续添加，必须转化成字符串
    };
    for (const key in timeSource) {
      const [ret2] = new RegExp(`${key}+`).exec(formatStr) || [];
      if (ret2) {
        const beginIndex = key === "y" && ret2.length === 2 ? 2 : 0;
        formatStr = formatStr.replace(ret2, timeSource[key].slice(beginIndex));
      }
    }
    return formatStr;
  }
  function timeFrom(timestamp = null, format = "yyyy-mm-dd") {
    if (timestamp == null)
      timestamp = Number(/* @__PURE__ */ new Date());
    timestamp = parseInt(timestamp);
    if (timestamp.toString().length == 10)
      timestamp *= 1e3;
    let timer = (/* @__PURE__ */ new Date()).getTime() - timestamp;
    timer = parseInt(timer / 1e3);
    let tips = "";
    switch (true) {
      case timer < 300:
        tips = "刚刚";
        break;
      case (timer >= 300 && timer < 3600):
        tips = `${parseInt(timer / 60)}分钟前`;
        break;
      case (timer >= 3600 && timer < 86400):
        tips = `${parseInt(timer / 3600)}小时前`;
        break;
      case (timer >= 86400 && timer < 2592e3):
        tips = `${parseInt(timer / 86400)}天前`;
        break;
      default:
        if (format === false) {
          if (timer >= 2592e3 && timer < 365 * 86400) {
            tips = `${parseInt(timer / (86400 * 30))}个月前`;
          } else {
            tips = `${parseInt(timer / (86400 * 365))}年前`;
          }
        } else {
          tips = timeFormat(timestamp, format);
        }
    }
    return tips;
  }
  function trim(str, pos = "both") {
    str = String(str);
    if (pos == "both") {
      return str.replace(/^\s+|\s+$/g, "");
    }
    if (pos == "left") {
      return str.replace(/^\s*/, "");
    }
    if (pos == "right") {
      return str.replace(/(\s*$)/g, "");
    }
    if (pos == "all") {
      return str.replace(/\s+/g, "");
    }
    return str;
  }
  function queryParams(data2 = {}, isPrefix = true, arrayFormat = "brackets") {
    const prefix = isPrefix ? "?" : "";
    const _result = [];
    if (["indices", "brackets", "repeat", "comma"].indexOf(arrayFormat) == -1)
      arrayFormat = "brackets";
    for (const key in data2) {
      const value = data2[key];
      if (["", void 0, null].indexOf(value) >= 0) {
        continue;
      }
      if (value.constructor === Array) {
        switch (arrayFormat) {
          case "indices":
            for (let i = 0; i < value.length; i++) {
              _result.push(`${key}[${i}]=${value[i]}`);
            }
            break;
          case "brackets":
            value.forEach((_value) => {
              _result.push(`${key}[]=${_value}`);
            });
            break;
          case "repeat":
            value.forEach((_value) => {
              _result.push(`${key}=${_value}`);
            });
            break;
          case "comma":
            let commaStr = "";
            value.forEach((_value) => {
              commaStr += (commaStr ? "," : "") + _value;
            });
            _result.push(`${key}=${commaStr}`);
            break;
          default:
            value.forEach((_value) => {
              _result.push(`${key}[]=${_value}`);
            });
        }
      } else {
        _result.push(`${key}=${value}`);
      }
    }
    return _result.length ? prefix + _result.join("&") : "";
  }
  function toast(title, duration = 2e3) {
    uni.showToast({
      title: String(title),
      icon: "none",
      duration
    });
  }
  function type2icon(type = "success", fill = false) {
    if (["primary", "info", "error", "warning", "success"].indexOf(type) == -1)
      type = "success";
    let iconName = "";
    switch (type) {
      case "primary":
        iconName = "info-circle";
        break;
      case "info":
        iconName = "info-circle";
        break;
      case "error":
        iconName = "close-circle";
        break;
      case "warning":
        iconName = "error-circle";
        break;
      case "success":
        iconName = "checkmark-circle";
        break;
      default:
        iconName = "checkmark-circle";
    }
    if (fill)
      iconName += "-fill";
    return iconName;
  }
  function priceFormat(number2, decimals = 0, decimalPoint = ".", thousandsSeparator = ",") {
    number2 = `${number2}`.replace(/[^0-9+-Ee.]/g, "");
    const n = !isFinite(+number2) ? 0 : +number2;
    const prec = !isFinite(+decimals) ? 0 : Math.abs(decimals);
    const sep = typeof thousandsSeparator === "undefined" ? "," : thousandsSeparator;
    const dec = typeof decimalPoint === "undefined" ? "." : decimalPoint;
    let s = "";
    s = (prec ? round(n, prec) + "" : `${Math.round(n)}`).split(".");
    const re = /(-?\d+)(\d{3})/;
    while (re.test(s[0])) {
      s[0] = s[0].replace(re, `$1${sep}$2`);
    }
    if ((s[1] || "").length < prec) {
      s[1] = s[1] || "";
      s[1] += new Array(prec - s[1].length + 1).join("0");
    }
    return s.join(dec);
  }
  function getDuration(value, unit = true) {
    const valueNum = parseInt(value);
    if (unit) {
      if (/s$/.test(value))
        return value;
      return value > 30 ? `${value}ms` : `${value}s`;
    }
    if (/ms$/.test(value))
      return valueNum;
    if (/s$/.test(value))
      return valueNum > 30 ? valueNum : valueNum * 1e3;
    return valueNum;
  }
  function padZero(value) {
    return `00${value}`.slice(-2);
  }
  function formValidate(instance, event) {
    const formItem = $parent.call(instance, "wu-form-item");
    const form = $parent.call(instance, "wu-form");
    if (formItem && form) {
      form.validateField(formItem.prop, () => {
      }, event);
    }
  }
  function getProperty(obj, key) {
    if (!obj) {
      return;
    }
    if (typeof key !== "string" || key === "") {
      return "";
    }
    if (key.indexOf(".") !== -1) {
      const keys = key.split(".");
      let firstObj = obj[keys[0]] || {};
      for (let i = 1; i < keys.length; i++) {
        if (firstObj) {
          firstObj = firstObj[keys[i]];
        }
      }
      return firstObj;
    }
    return obj[key];
  }
  function setProperty(obj, key, value) {
    if (!obj) {
      return;
    }
    const inFn = function(_obj, keys, v) {
      if (keys.length === 1) {
        _obj[keys[0]] = v;
        return;
      }
      while (keys.length > 1) {
        const k = keys[0];
        if (!_obj[k] || typeof _obj[k] !== "object") {
          _obj[k] = {};
        }
        keys.shift();
        inFn(_obj[k], keys, v);
      }
    };
    if (typeof key !== "string" || key === "")
      ;
    else if (key.indexOf(".") !== -1) {
      const keys = key.split(".");
      inFn(obj, keys, value);
    } else {
      obj[key] = value;
    }
  }
  function page() {
    var _a;
    const pages2 = getCurrentPages();
    const route2 = (_a = pages2[pages2.length - 1]) == null ? void 0 : _a.route;
    return `/${route2 ? route2 : ""}`;
  }
  function pages() {
    const pages2 = getCurrentPages();
    return pages2;
  }
  function getHistoryPage(back = 0) {
    const pages2 = getCurrentPages();
    const len = pages2.length;
    return pages2[len - 1 + back];
  }
  function setConfig({
    props: props2 = {},
    config = {},
    color = {},
    zIndex = {}
  }) {
    const {
      deepMerge: deepMerge2
    } = uni.$w;
    uni.$w.config = deepMerge2(uni.$w.config, config);
    uni.$w.props = deepMerge2(uni.$w.props, props2);
    uni.$w.color = deepMerge2(uni.$w.color, color);
    uni.$w.zIndex = deepMerge2(uni.$w.zIndex, zIndex);
  }
  const index = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
    __proto__: null,
    $parent,
    Color: index$1,
    addStyle,
    addUnit,
    deepClone,
    deepMerge,
    error,
    formValidate,
    getDuration,
    getHistoryPage,
    getProperty,
    getPx,
    guid,
    os,
    padZero,
    page,
    pages,
    priceFormat,
    queryParams,
    random,
    randomArray,
    range,
    setConfig,
    setProperty,
    sleep,
    sys,
    timeFormat,
    timeFrom,
    toast,
    trim,
    type2icon
  }, Symbol.toStringTag, { value: "Module" }));
  const mixin = {
    // 定义每个组件都可能需要用到的外部样式以及类名
    props: {
      // 每个组件都有的父组件传递的样式，可以为字符串或者对象形式
      customStyle: {
        type: [Object, String],
        default: () => ({})
      },
      customClass: {
        type: String,
        default: ""
      },
      // 跳转的页面路径
      url: {
        type: String,
        default: ""
      },
      // 页面跳转的类型
      linkType: {
        type: String,
        default: "navigateTo"
      }
    },
    data() {
      return {};
    },
    onLoad() {
      this.$w.getRect = this.$wuGetRect;
    },
    created() {
      this.$w.getRect = this.$wuGetRect;
    },
    computed: {
      $w() {
        return {
          ...index,
          test
        };
      },
      /**
       * 生成bem规则类名
       * 由于微信小程序，H5，nvue之间绑定class的差异，无法通过:class="[bem()]"的形式进行同用
       * 故采用如下折中做法，最后返回的是数组（一般平台）或字符串（支付宝和字节跳动平台），类似['a', 'b', 'c']或'a b c'的形式
       * @param {String} name 组件名称
       * @param {Array} fixed 一直会存在的类名
       * @param {Array} change 会根据变量值为true或者false而出现或者隐藏的类名
       * @returns {Array|string}
       */
      bem() {
        return function(name2, fixed, change) {
          const prefix = `wu-${name2}--`;
          const classes = {};
          if (fixed) {
            fixed.map((item) => {
              classes[prefix + this[item]] = true;
            });
          }
          if (change) {
            change.map((item) => {
              this[item] ? classes[prefix + item] = this[item] : delete classes[prefix + item];
            });
          }
          return Object.keys(classes);
        };
      }
    },
    methods: {
      // 跳转某一个页面
      openPage(urlKey = "url") {
        const url2 = this[urlKey];
        if (url2) {
          uni[this.linkType]({
            url: url2
          });
        }
      },
      // 查询节点信息
      // 目前此方法在支付宝小程序中无法获取组件跟接点的尺寸，为支付宝的bug(2020-07-21)
      // 解决办法为在组件根部再套一个没有任何作用的view元素
      $wuGetRect(selector, all) {
        return new Promise((resolve) => {
          uni.createSelectorQuery().in(this)[all ? "selectAll" : "select"](selector).boundingClientRect((rect) => {
            if (all && Array.isArray(rect) && rect.length) {
              resolve(rect);
            }
            if (!all && rect) {
              resolve(rect);
            }
          }).exec();
        });
      },
      // 查询节点布局是否相交
      IntersectionObserver(_this, nodeName, callback) {
        this.$nextTick(() => {
          let intersectionObserver = uni.createIntersectionObserver(_this);
          intersectionObserver.relativeToViewport({
            bottom: Number(this.lazyLoadRootMargin)
          }).observe(nodeName, (res) => {
            callback(res, () => intersectionObserver.disconnect());
          });
        });
      },
      getParentData(parentName = "") {
        if (!this.parent)
          this.parent = {};
        this.parent = this.$w.$parent.call(this, parentName);
        if (this.parent.children) {
          this.parent.children.indexOf(this) === -1 && this.parent.children.push(this);
        }
        if (this.parent && this.parentData) {
          Object.keys(this.parentData).map((key) => {
            this.parentData[key] = this.parent[key];
          });
        }
      },
      // 阻止事件冒泡
      preventEvent(e) {
        e && typeof e.stopPropagation === "function" && e.stopPropagation();
      },
      // 空操作
      noop(e) {
        this.preventEvent(e);
      }
    },
    onReachBottom() {
      uni.$emit("wuOnReachBottom");
    },
    beforeDestroy() {
      if (this.parent && array(this.parent.children)) {
        const childrenList = this.parent.children;
        childrenList.map((child, index2) => {
          if (child === this) {
            childrenList.splice(index2, 1);
          }
        });
      }
    }
  };
  const props$4 = {
    props: {
      color: {
        type: String,
        default: "#3c9cff"
      },
      startText: {
        type: String,
        default: "开始"
      },
      endText: {
        type: String,
        default: "结束"
      },
      weeks: {
        type: Object,
        default() {
          return {};
        }
      },
      calendar: {
        type: Object,
        default: () => {
          return {};
        }
      },
      selected: {
        type: Array,
        default: () => {
          return [];
        }
      },
      lunar: {
        type: Boolean,
        default: false
      },
      itemHeight: {
        type: Number,
        default: 64
      },
      actBadgeColor: {
        type: String,
        default: "#fff"
      }
    }
  };
  const en = {
    "wu-calender.ok": "ok",
    "wu-calender.cancel": "cancel",
    "wu-calender.year": "year",
    "wu-calender.month": "month",
    "wu-calender.today": "today",
    "wu-calender.MON": "MON",
    "wu-calender.TUE": "TUE",
    "wu-calender.WED": "WED",
    "wu-calender.THU": "THU",
    "wu-calender.FRI": "FRI",
    "wu-calender.SAT": "SAT",
    "wu-calender.SUN": "SUN"
  };
  const zhHans = {
    "wu-calender.ok": "确定",
    "wu-calender.cancel": "取消",
    "wu-calender.year": "年",
    "wu-calender.month": "月",
    "wu-calender.today": "今日",
    "wu-calender.SUN": "日",
    "wu-calender.MON": "一",
    "wu-calender.TUE": "二",
    "wu-calender.WED": "三",
    "wu-calender.THU": "四",
    "wu-calender.FRI": "五",
    "wu-calender.SAT": "六"
  };
  const zhHant = {
    "wu-calender.ok": "確定",
    "wu-calender.cancel": "取消",
    "wu-calender.year": "年",
    "wu-calender.month": "月",
    "wu-calender.today": "今日",
    "wu-calender.SUN": "日",
    "wu-calender.MON": "一",
    "wu-calender.TUE": "二",
    "wu-calender.WED": "三",
    "wu-calender.THU": "四",
    "wu-calender.FRI": "五",
    "wu-calender.SAT": "六"
  };
  const i18nMessages = {
    en,
    "zh-Hans": zhHans,
    "zh-Hant": zhHant
  };
  const {
    t: t$1
  } = initVueI18n(i18nMessages);
  const _sfc_main$h = {
    emits: ["change"],
    mixins: [mpMixin, mixin, props$4],
    computed: {
      todayText() {
        return t$1("wu-calender.today");
      },
      // 每项日历样式
      calendarItemStyle() {
        let style = {};
        let color = this.$w.Color.gradient(this.color, this.$w.Color.isLight(this.color) ? "#000" : "#fff", 100)[6];
        if (this.weeks.rangeMultiple) {
          style = {
            backgroundColor: this.$w.Color.gradient(this.color, "#fff", 100)[80],
            color
          };
        }
        if (this.weeks.isDay) {
          style.color = color;
        }
        if (this.weeks.disable) {
          style = {
            backgroundColor: "rgba(249, 249, 249, 0.3)",
            color: "#c0c0c0"
          };
        }
        return style;
      },
      // 选中的日期样式
      actMultipleStyle() {
        if ((this.weeks.beforeRange || this.weeks.afterRange || this.weeks.multiples || this.calendar.fullDate === this.weeks.fullDate && this.weeks.mode === "single") && !this.weeks.disable) {
          return {
            backgroundColor: this.color,
            color: "#fff",
            borderRadius: "12rpx"
          };
        }
      },
      // 徽标样式
      badgeStyle() {
        let style = {
          backgroundColor: this.weeks.disable ? "#c0c0c0" : "#e43d33",
          width: "16rpx",
          height: "16rpx"
        };
        if (this.weeks.extraInfo) {
          if (this.weeks.extraInfo.badgeColor) {
            if ((this.weeks.beforeRange || this.weeks.afterRange || this.weeks.multiples || this.calendar.fullDate === this.weeks.fullDate && this.weeks.mode === "single") && !this.weeks.disable && this.$w.Color.convertFormat(this.weeks.extraInfo.badgeColor) == this.$w.Color.convertFormat(this.color)) {
              style.backgroundColor = this.actBadgeColor;
            } else {
              style.backgroundColor = this.weeks.extraInfo.badgeColor;
            }
          }
          if (this.weeks.extraInfo.badgeSize) {
            style.width = this.weeks.extraInfo.badgeSize;
            style.height = this.weeks.extraInfo.badgeSize;
          }
          if (!this.weeks.extraInfo.badgePosition) {
            style.right = "10rpx";
            style.top = "10rpx";
          } else if (this.weeks.extraInfo.badgePosition == "top-left") {
            style.top = "10rpx";
            style.left = "10rpx";
          } else if (this.weeks.extraInfo.badgePosition == "top-center") {
            style.top = "10rpx";
            style.left = "center";
          } else if (this.weeks.extraInfo.badgePosition == "top-right") {
            style.top = "10rpx";
            style.right = "10rpx";
          } else if (this.weeks.extraInfo.badgePosition == "bottom-left") {
            style.bottom = "10rpx";
            style.left = "10rpx";
          } else if (this.weeks.extraInfo.badgePosition == "bottom-center") {
            style.bottom = "10rpx";
            style.left = "center";
          } else if (this.weeks.extraInfo.badgePosition == "bottom-right") {
            style.bottom = "10rpx";
            style.right = "10rpx";
          }
        }
        return style;
      },
      // 日期文字
      dayText() {
        let text = "";
        if (this.weeks.isDay) {
          text = this.todayText;
        } else if (this.weeks.lunar.festival) {
          text = this.weeks.lunar.festival;
        } else if (this.weeks.lunar.isTerm) {
          text = this.weeks.lunar.Term;
        } else if (this.weeks.lunar.IDayCn === "初一") {
          text = this.weeks.lunar.IMonthCn;
        } else {
          text = this.weeks.lunar.IDayCn;
        }
        return text;
      },
      // 选中的文字
      multipleText() {
        let text = "";
        if (this.weeks.afterRange) {
          text = this.endText;
        } else if (this.weeks.beforeRange) {
          text = this.startText;
        }
        return text;
      }
    },
    methods: {
      choiceDate(weeks) {
        this.$emit("change", weeks);
      }
    }
  };
  function _sfc_render$g(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock(
      "view",
      {
        class: "wu-calendar-item__weeks-box",
        ref: "$weeksbox",
        style: vue.normalizeStyle([$options.calendarItemStyle, {
          borderTopLeftRadius: _ctx.weeks.beforeRange ? "12rpx" : "",
          borderBottomLeftRadius: _ctx.weeks.beforeRange ? "12rpx" : "",
          borderTopRightRadius: _ctx.weeks.afterRange ? "12rpx" : "",
          borderBottomRightRadius: _ctx.weeks.afterRange ? "12rpx" : ""
        }]),
        onClick: _cache[0] || (_cache[0] = ($event) => $options.choiceDate(_ctx.weeks))
      },
      [
        vue.createElementVNode(
          "view",
          {
            class: "wu-calendar-item__weeks-box-item",
            style: vue.normalizeStyle([$options.actMultipleStyle, { height: _ctx.itemHeight + "px" }])
          },
          [
            vue.createCommentVNode(" 自定义打点上方信息 "),
            _ctx.weeks.extraInfo && _ctx.weeks.extraInfo.topInfo ? (vue.openBlock(), vue.createElementBlock(
              "text",
              {
                key: 0,
                class: "wu-calendar-item__weeks-lunar-text",
                style: vue.normalizeStyle([{ color: _ctx.weeks.extraInfo.topInfoColor || "#e43d33" }, $options.calendarItemStyle, $options.actMultipleStyle])
              },
              vue.toDisplayString(_ctx.weeks.extraInfo.topInfo),
              5
              /* TEXT, STYLE */
            )) : vue.createCommentVNode("v-if", true),
            vue.createCommentVNode(" 徽标 "),
            _ctx.selected && _ctx.weeks.extraInfo && _ctx.weeks.extraInfo.badge ? (vue.openBlock(), vue.createElementBlock(
              "text",
              {
                key: 1,
                class: "wu-calendar-item__weeks-box-circle",
                style: vue.normalizeStyle([$options.badgeStyle])
              },
              null,
              4
              /* STYLE */
            )) : vue.createCommentVNode("v-if", true),
            vue.createCommentVNode(" 日期文字 "),
            vue.createElementVNode(
              "text",
              {
                class: "wu-calendar-item__weeks-box-text",
                style: vue.normalizeStyle([$options.calendarItemStyle, $options.actMultipleStyle])
              },
              vue.toDisplayString(_ctx.weeks.date),
              5
              /* TEXT, STYLE */
            ),
            vue.createCommentVNode(" 今日的文字 "),
            !_ctx.lunar && !_ctx.weeks.extraInfo && _ctx.weeks.isDay && !_ctx.weeks.beforeRange && !_ctx.weeks.afterRange ? (vue.openBlock(), vue.createElementBlock(
              "text",
              {
                key: 2,
                class: "wu-calendar-item__weeks-lunar-text",
                style: vue.normalizeStyle([$options.calendarItemStyle, $options.actMultipleStyle])
              },
              vue.toDisplayString($options.todayText),
              5
              /* TEXT, STYLE */
            )) : vue.createCommentVNode("v-if", true),
            vue.createCommentVNode(" 农历文字 "),
            _ctx.lunar && !_ctx.weeks.extraInfo && !_ctx.weeks.beforeRange && !_ctx.weeks.afterRange ? (vue.openBlock(), vue.createElementBlock(
              "text",
              {
                key: 3,
                class: "wu-calendar-item__weeks-lunar-text",
                style: vue.normalizeStyle([$options.calendarItemStyle, $options.actMultipleStyle])
              },
              vue.toDisplayString($options.dayText),
              5
              /* TEXT, STYLE */
            )) : vue.createCommentVNode("v-if", true),
            vue.createCommentVNode(" 选中的文字展示 "),
            !_ctx.weeks.extraInfo && (_ctx.weeks.beforeRange || _ctx.weeks.afterRange) ? (vue.openBlock(), vue.createElementBlock(
              "text",
              {
                key: 4,
                class: "wu-calendar-item__weeks-lunar-text",
                style: vue.normalizeStyle([$options.calendarItemStyle, $options.actMultipleStyle])
              },
              vue.toDisplayString($options.multipleText),
              5
              /* TEXT, STYLE */
            )) : vue.createCommentVNode("v-if", true),
            vue.createCommentVNode(" 自定义打点下方信息 "),
            _ctx.weeks.extraInfo && _ctx.weeks.extraInfo.info ? (vue.openBlock(), vue.createElementBlock(
              "text",
              {
                key: 5,
                class: "wu-calendar-item__weeks-lunar-text",
                style: vue.normalizeStyle([{ color: _ctx.weeks.extraInfo.infoColor || "#e43d33" }, $options.calendarItemStyle, $options.actMultipleStyle])
              },
              vue.toDisplayString(_ctx.weeks.extraInfo.info),
              5
              /* TEXT, STYLE */
            )) : vue.createCommentVNode("v-if", true)
          ],
          4
          /* STYLE */
        )
      ],
      4
      /* STYLE */
    );
  }
  const __easycom_0$1 = /* @__PURE__ */ _export_sfc(_sfc_main$h, [["render", _sfc_render$g], ["__scopeId", "data-v-d206a17d"], ["__file", "D:/HLTrip/hl/uni_modules/wu-calendar/components/wu-calendar-item/wu-calendar-item.vue"]]);
  const props$3 = {
    props: {
      showMonth: {
        type: Boolean,
        default: false
      },
      // 折叠状态
      FoldStatus: {
        type: String,
        default: null
      },
      month: {
        type: [Number, String],
        default: null
      },
      color: {
        type: String,
        default: "#3c9cff"
      },
      startText: {
        type: String,
        default: "开始"
      },
      endText: {
        type: String,
        default: "结束"
      },
      weeks: {
        type: [Object, Array],
        default: () => {
          return [];
        }
      },
      calendar: {
        type: Object,
        default: () => {
          return {};
        }
      },
      selected: {
        type: Array,
        default: () => {
          return [];
        }
      },
      lunar: {
        type: Boolean,
        default: false
      },
      itemHeight: {
        type: Number,
        default: 64
      },
      monthShowCurrentMonth: {
        type: Boolean,
        default: false
      },
      actBadgeColor: {
        type: String,
        default: "#fff"
      }
    }
  };
  initVueI18n(i18nMessages);
  const _sfc_main$g = {
    emits: ["change"],
    mixins: [mpMixin, mixin, props$3],
    data() {
      return {
        FoldShowMonth: false,
        // 默认边距
        defaultMargin: 8
      };
    },
    mounted() {
      this.FoldShowMonth = this.FoldStatus == "open";
    },
    computed: {
      weekItemStyle() {
        let weeksLength = Object.keys(this.weeks).length;
        this.FoldStatus === "open" ? this.itemHeight * 6 : this.itemHeight;
        let margin = weeksLength && this.weeks[weeksLength - 1][0].empty ? this.itemHeight / (weeksLength - 1) + this.defaultMargin : this.defaultMargin;
        return {
          marginTop: margin / 2 + "px",
          marginBottom: margin / 2 + "px"
        };
      }
    },
    watch: {
      FoldStatus(newVal) {
        this.$nextTick(() => {
          this.FoldShowMonth = this.FoldStatus == "open";
        });
      }
    },
    methods: {
      choiceDate(weeks) {
        this.$emit("change", weeks);
      }
    }
  };
  function _sfc_render$f(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_wu_calendar_item = resolveEasycom(vue.resolveDynamicComponent("wu-calendar-item"), __easycom_0$1);
    return vue.openBlock(), vue.createElementBlock("view", { class: "wu-calendar-block" }, [
      _ctx.showMonth && $data.FoldShowMonth ? (vue.openBlock(), vue.createElementBlock("view", {
        key: 0,
        class: "wu-calendar__box-bg"
      }, [
        vue.createElementVNode(
          "text",
          { class: "wu-calendar__box-bg-text" },
          vue.toDisplayString(_ctx.month),
          1
          /* TEXT */
        )
      ])) : vue.createCommentVNode("v-if", true),
      vue.createCommentVNode(" 月或周日历 "),
      (vue.openBlock(true), vue.createElementBlock(
        vue.Fragment,
        null,
        vue.renderList(_ctx.weeks, (item, weekIndex) => {
          return vue.openBlock(), vue.createElementBlock("view", {
            class: "wu-calendar__weeks",
            key: weekIndex
          }, [
            (vue.openBlock(true), vue.createElementBlock(
              vue.Fragment,
              null,
              vue.renderList(item, (weeks, weeksIndex) => {
                return vue.openBlock(), vue.createElementBlock(
                  "view",
                  {
                    class: "wu-calendar__weeks-item",
                    key: weeksIndex,
                    style: vue.normalizeStyle([$options.weekItemStyle])
                  },
                  [
                    !_ctx.monthShowCurrentMonth || !weeks.empty ? (vue.openBlock(), vue.createBlock(_component_wu_calendar_item, {
                      key: 0,
                      class: "wu-calendar-item--hook",
                      weeks,
                      calendar: _ctx.calendar,
                      selected: _ctx.selected,
                      lunar: _ctx.lunar,
                      onChange: $options.choiceDate,
                      color: _ctx.color,
                      actBadgeColor: _ctx.actBadgeColor,
                      startText: _ctx.startText,
                      endText: _ctx.endText,
                      itemHeight: _ctx.itemHeight - $data.defaultMargin
                    }, null, 8, ["weeks", "calendar", "selected", "lunar", "onChange", "color", "actBadgeColor", "startText", "endText", "itemHeight"])) : vue.createCommentVNode("v-if", true)
                  ],
                  4
                  /* STYLE */
                );
              }),
              128
              /* KEYED_FRAGMENT */
            ))
          ]);
        }),
        128
        /* KEYED_FRAGMENT */
      ))
    ]);
  }
  const __easycom_0 = /* @__PURE__ */ _export_sfc(_sfc_main$g, [["render", _sfc_render$f], ["__scopeId", "data-v-1c0dbded"], ["__file", "D:/HLTrip/hl/uni_modules/wu-calendar/components/wu-calendar-block/wu-calendar-block.vue"]]);
  const icons = {
    "wuicon-level": "e68f",
    "wuicon-download": "e670",
    "wuicon-search": "e632",
    "wuicon-reload": "e627",
    "wuicon-scan": "e631",
    "wuicon-calendar": "e65c",
    "wuicon-bag": "e647",
    "wuicon-checkbox-mark": "e659",
    "wuicon-attach": "e640",
    "wuicon-wifi-off": "e6cc",
    "wuicon-woman": "e626",
    "wuicon-man": "e675",
    "wuicon-chat": "e656",
    "wuicon-chat-fill": "e63f",
    "wuicon-red-packet": "e6c3",
    "wuicon-folder": "e694",
    "wuicon-order": "e695",
    "wuicon-arrow-up-fill": "e636",
    "wuicon-arrow-down-fill": "e638",
    "wuicon-backspace": "e64d",
    "wuicon-photo": "e60d",
    "wuicon-photo-fill": "e6b4",
    "wuicon-lock": "e69d",
    "wuicon-lock-fill": "e6a6",
    "wuicon-lock-open": "e68d",
    "wuicon-lock-opened-fill": "e6a1",
    "wuicon-home": "e67b",
    "wuicon-home-fill": "e68e",
    "wuicon-star": "e618",
    "wuicon-star-fill": "e61e",
    "wuicon-share": "e629",
    "wuicon-share-fill": "e6bb",
    "wuicon-share-square": "e6c4",
    "wuicon-volume": "e605",
    "wuicon-volume-fill": "e624",
    "wuicon-volume-off": "e6bd",
    "wuicon-volume-off-fill": "e6c8",
    "wuicon-trash": "e623",
    "wuicon-trash-fill": "e6ce",
    "wuicon-shopping-cart": "e6cb",
    "wuicon-shopping-cart-fill": "e630",
    "wuicon-question-circle": "e622",
    "wuicon-question-circle-fill": "e6bc",
    "wuicon-plus": "e625",
    "wuicon-plus-circle": "e603",
    "wuicon-plus-circle-fill": "e611",
    "wuicon-tags": "e621",
    "wuicon-tags-fill": "e613",
    "wuicon-pause": "e61c",
    "wuicon-pause-circle": "e696",
    "wuicon-pause-circle-fill": "e60c",
    "wuicon-play-circle": "e6af",
    "wuicon-play-circle-fill": "e62a",
    "wuicon-map": "e665",
    "wuicon-map-fill": "e6a8",
    "wuicon-phone": "e6ba",
    "wuicon-phone-fill": "e6ac",
    "wuicon-list": "e690",
    "wuicon-list-dot": "e6a9",
    "wuicon-info-circle": "e69f",
    "wuicon-info-circle-fill": "e6a7",
    "wuicon-minus": "e614",
    "wuicon-minus-circle": "e6a5",
    "wuicon-mic": "e66d",
    "wuicon-mic-off": "e691",
    "wuicon-grid": "e68c",
    "wuicon-grid-fill": "e698",
    "wuicon-eye": "e664",
    "wuicon-eye-fill": "e697",
    "wuicon-eye-off": "e69c",
    "wuicon-eye-off-outline": "e688",
    "wuicon-file-text": "e687",
    "wuicon-file-text-fill": "e67f",
    "wuicon-edit-pen": "e65d",
    "wuicon-edit-pen-fill": "e679",
    "wuicon-email": "e673",
    "wuicon-email-fill": "e683",
    "wuicon-checkmark": "e64a",
    "wuicon-checkmark-circle": "e643",
    "wuicon-checkmark-circle-fill": "e668",
    "wuicon-clock": "e66c",
    "wuicon-clock-fill": "e64b",
    "wuicon-close": "e65a",
    "wuicon-close-circle": "e64e",
    "wuicon-close-circle-fill": "e666",
    "wuicon-car": "e64f",
    "wuicon-car-fill": "e648",
    "wuicon-bell": "e651",
    "wuicon-bell-fill": "e604",
    "wuicon-play-left": "e6bf",
    "wuicon-play-right": "e6b3",
    "wuicon-play-left-fill": "e6ae",
    "wuicon-play-right-fill": "e6ad",
    "wuicon-skip-back-left": "e6c5",
    "wuicon-skip-forward-right": "e61f",
    "wuicon-setting": "e602",
    "wuicon-setting-fill": "e6d0",
    "wuicon-more-dot-fill": "e66f",
    "wuicon-more-circle": "e69e",
    "wuicon-more-circle-fill": "e684",
    "wuicon-arrow-upward": "e641",
    "wuicon-arrow-downward": "e634",
    "wuicon-arrow-leftward": "e63b",
    "wuicon-arrow-rightward": "e644",
    "wuicon-arrow-up": "e633",
    "wuicon-arrow-down": "e63e",
    "wuicon-arrow-left": "e646",
    "wuicon-arrow-right": "e63c",
    "wuicon-thumb-up": "e612",
    "wuicon-thumb-up-fill": "e62c",
    "wuicon-thumb-down": "e60a",
    "wuicon-thumb-down-fill": "e628",
    "wuicon-coupon": "e65f",
    "wuicon-coupon-fill": "e64c",
    "wuicon-kefu-ermai": "e660",
    "wuicon-server-fill": "e610",
    "wuicon-server-man": "e601",
    "wuicon-warning": "e6c1",
    "wuicon-warning-fill": "e6c7",
    "wuicon-camera": "e642",
    "wuicon-camera-fill": "e650",
    "wuicon-pushpin": "e6d1",
    "wuicon-pushpin-fill": "e6b6",
    "wuicon-heart": "e6a2",
    "wuicon-heart-fill": "e68b",
    "wuicon-account": "e63a",
    "wuicon-account-fill": "e653",
    "wuicon-integral": "e693",
    "wuicon-integral-fill": "e6b1",
    "wuicon-gift": "e680",
    "wuicon-gift-fill": "e6b0",
    "wuicon-empty-data": "e671",
    "wuicon-empty-address": "e68a",
    "wuicon-empty-favor": "e662",
    "wuicon-empty-car": "e656",
    "wuicon-empty-order": "e66b",
    "wuicon-empty-list": "e671",
    "wuicon-empty-search": "e677",
    "wuicon-empty-permission": "e67c",
    "wuicon-empty-news": "e67d",
    "wuicon-empty-history": "e684",
    "wuicon-empty-coupon": "e69b",
    "wuicon-empty-page": "e60e",
    "wuicon-apple-fill": "e635",
    "wuicon-zhifubao-circle-fill": "e617",
    "wuicon-weixin-circle-fill": "e6cd",
    "wuicon-weixin-fill": "e620",
    "wuicon-qq-fill": "e608",
    "wuicon-qq-circle-fill": "e6b9",
    "wuicon-moments": "e6a0",
    "wuicon-moments-circel-fill": "e6c2",
    "wuicon-twitter": "e607",
    "wuicon-twitter-circle-fill": "e6cf"
  };
  const props$2 = {
    props: {
      // 图标类名
      name: {
        type: String,
        default: ""
      },
      // 图标颜色，可接受主题色
      color: {
        type: String,
        default: "#606266"
      },
      // 字体大小，单位px
      size: {
        type: [String, Number],
        default: "16px"
      },
      // 是否显示粗体
      bold: {
        type: Boolean,
        default: false
      },
      // 点击图标的时候传递事件出去的index（用于区分点击了哪一个）
      index: {
        type: [String, Number],
        default: null
      },
      // 触摸图标时的类名
      hoverClass: {
        type: String,
        default: ""
      },
      // 自定义扩展前缀，方便用户扩展自己的图标库
      customPrefix: {
        type: String,
        default: "wuicon"
      },
      // 图标右边或者下面的文字
      label: {
        type: [String, Number],
        default: ""
      },
      // label的位置，只能右边或者下边
      labelPos: {
        type: String,
        default: "right"
      },
      // label的大小
      labelSize: {
        type: [String, Number],
        default: "15px"
      },
      // label的颜色
      labelColor: {
        type: String,
        default: "#606266"
      },
      // label与图标的距离
      space: {
        type: [String, Number],
        default: "3px"
      },
      // 图片的mode
      imgMode: {
        type: String,
        default: ""
      },
      // 用于显示图片小图标时，图片的宽度
      width: {
        type: [String, Number],
        default: ""
      },
      // 用于显示图片小图标时，图片的高度
      height: {
        type: [String, Number],
        default: ""
      },
      // 用于解决某些情况下，让图标垂直居中的用途
      top: {
        type: [String, Number],
        default: 0
      },
      // 是否阻止事件传播
      stop: {
        type: Boolean,
        default: false
      },
      ...(_f = (_e = uni.$w) == null ? void 0 : _e.props) == null ? void 0 : _f.icon
    }
  };
  const _sfc_main$f = {
    name: "wu-icon",
    emits: ["click"],
    mixins: [mpMixin, mixin, props$2],
    data() {
      return {
        colorType: [
          "primary",
          "success",
          "info",
          "error",
          "warning"
        ]
      };
    },
    computed: {
      uClasses() {
        let classes = [];
        classes.push(this.customPrefix);
        classes.push(this.customPrefix + "-" + this.name);
        if (this.color && this.colorType.includes(this.color))
          classes.push("wu-icon__icon--" + this.color);
        return classes;
      },
      iconStyle() {
        let style = {};
        style = {
          fontSize: this.$w.addUnit(this.size),
          lineHeight: this.$w.addUnit(this.size),
          fontWeight: this.bold ? "bold" : "normal",
          // 某些特殊情况需要设置一个到顶部的距离，才能更好的垂直居中
          top: this.$w.addUnit(this.top)
        };
        if (this.color && !this.colorType.includes(this.color))
          style.color = this.color;
        return style;
      },
      // 判断传入的name属性，是否图片路径，只要带有"/"均认为是图片形式
      isImg() {
        const isBase64 = this.name.indexOf("data:") > -1 && this.name.indexOf("base64") > -1;
        return this.name.indexOf("/") !== -1 || isBase64;
      },
      imgStyle() {
        let style = {};
        style.width = this.width ? this.$w.addUnit(this.width) : this.$w.addUnit(this.size);
        style.height = this.height ? this.$w.addUnit(this.height) : this.$w.addUnit(this.size);
        return style;
      },
      // 通过图标名，查找对应的图标
      icon() {
        const code2 = icons["wuicon-" + this.name];
        if (["wuicon"].indexOf(this.customPrefix) > -1) {
          return code2 ? unescape(`%u${code2}`) : this.name;
        } else {
          return "";
        }
      },
      // label样式
      labelStyle() {
        let style = {
          color: this.labelColor,
          fontSize: this.$w.addUnit(this.labelSize),
          marginLeft: this.labelPos == "right" ? this.$w.addUnit(this.space) : 0,
          marginTop: this.labelPos == "bottom" ? this.$w.addUnit(this.space) : 0,
          marginRight: this.labelPos == "left" ? this.$w.addUnit(this.space) : 0,
          marginBottom: this.labelPos == "top" ? this.$w.addUnit(this.space) : 0
        };
        return style;
      }
    },
    methods: {
      clickHandler(e) {
        this.$emit("click", this.index);
        this.stop && this.preventEvent(e);
      }
    }
  };
  function _sfc_render$e(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock(
      "view",
      {
        class: vue.normalizeClass(["wu-icon", ["wu-icon--" + _ctx.labelPos]]),
        onClick: _cache[0] || (_cache[0] = (...args) => $options.clickHandler && $options.clickHandler(...args))
      },
      [
        vue.createCommentVNode(' 这里进行空字符串判断，如果仅仅是v-if="label"，可能会出现传递0的时候，结果也无法显示 '),
        _ctx.label !== "" && (_ctx.labelPos == "left" || _ctx.labelPos == "top") ? (vue.openBlock(), vue.createElementBlock(
          "text",
          {
            key: 0,
            class: "wu-icon__label",
            style: vue.normalizeStyle($options.labelStyle)
          },
          vue.toDisplayString(_ctx.label),
          5
          /* TEXT, STYLE */
        )) : vue.createCommentVNode("v-if", true),
        $options.isImg ? (vue.openBlock(), vue.createElementBlock("image", {
          key: 1,
          class: "wu-icon__img",
          src: _ctx.name,
          mode: _ctx.imgMode,
          style: vue.normalizeStyle([$options.imgStyle, _ctx.$w.addStyle(_ctx.customStyle)])
        }, null, 12, ["src", "mode"])) : (vue.openBlock(), vue.createElementBlock("text", {
          key: 2,
          class: vue.normalizeClass(["wu-icon__icon", $options.uClasses]),
          style: vue.normalizeStyle([$options.iconStyle, _ctx.$w.addStyle(_ctx.customStyle)]),
          "hover-class": _ctx.hoverClass
        }, vue.toDisplayString($options.icon), 15, ["hover-class"])),
        vue.createCommentVNode(' 这里进行空字符串判断，如果仅仅是v-if="label"，可能会出现传递0的时候，结果也无法显示 '),
        _ctx.label !== "" && (_ctx.labelPos == "right" || _ctx.labelPos == "bottom") ? (vue.openBlock(), vue.createElementBlock(
          "text",
          {
            key: 3,
            class: "wu-icon__label",
            style: vue.normalizeStyle($options.labelStyle)
          },
          vue.toDisplayString(_ctx.label),
          5
          /* TEXT, STYLE */
        )) : vue.createCommentVNode("v-if", true)
      ],
      2
      /* CLASS */
    );
  }
  const __easycom_1$1 = /* @__PURE__ */ _export_sfc(_sfc_main$f, [["render", _sfc_render$e], ["__scopeId", "data-v-c6cfe730"], ["__file", "D:/HLTrip/hl/uni_modules/wu-icon/components/wu-icon/wu-icon.vue"]]);
  const props$1 = {
    props: {
      ...(_h = (_g = uni.$w) == null ? void 0 : _g.props) == null ? void 0 : _h.safeBottom
    }
  };
  const _sfc_main$e = {
    name: "wu-safe-bottom",
    mixins: [mpMixin, mixin, props$1],
    data() {
      return {
        safeAreaBottomHeight: 0,
        isNvue: false
      };
    },
    computed: {
      style() {
        const {
          windowWidth,
          windowHeight,
          windowTop,
          safeArea,
          screenHeight,
          safeAreaInsets
        } = this.$w.sys();
        const style = {};
        style.height = this.$w.addUnit(safeAreaInsets.bottom, "px");
        return this.$w.deepMerge(style, this.$w.addStyle(this.customStyle));
      }
    }
  };
  function _sfc_render$d(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock(
      "view",
      {
        class: "wu-safe-bottom",
        style: vue.normalizeStyle([$options.style])
      },
      null,
      4
      /* STYLE */
    );
  }
  const __easycom_2 = /* @__PURE__ */ _export_sfc(_sfc_main$e, [["render", _sfc_render$d], ["__scopeId", "data-v-128ff778"], ["__file", "D:/HLTrip/hl/uni_modules/wu-safe-bottom/components/wu-safe-bottom/wu-safe-bottom.vue"]]);
  var calendar = {
    /**
     * 农历1900-2100的润大小信息表
     * @Array Of Property
     * @return Hex
     */
    lunarInfo: [
      19416,
      19168,
      42352,
      21717,
      53856,
      55632,
      91476,
      22176,
      39632,
      21970,
      // 1900-1909
      19168,
      42422,
      42192,
      53840,
      119381,
      46400,
      54944,
      44450,
      38320,
      84343,
      // 1910-1919
      18800,
      42160,
      46261,
      27216,
      27968,
      109396,
      11104,
      38256,
      21234,
      18800,
      // 1920-1929
      25958,
      54432,
      59984,
      28309,
      23248,
      11104,
      100067,
      37600,
      116951,
      51536,
      // 1930-1939
      54432,
      120998,
      46416,
      22176,
      107956,
      9680,
      37584,
      53938,
      43344,
      46423,
      // 1940-1949
      27808,
      46416,
      86869,
      19872,
      42416,
      83315,
      21168,
      43432,
      59728,
      27296,
      // 1950-1959
      44710,
      43856,
      19296,
      43748,
      42352,
      21088,
      62051,
      55632,
      23383,
      22176,
      // 1960-1969
      38608,
      19925,
      19152,
      42192,
      54484,
      53840,
      54616,
      46400,
      46752,
      103846,
      // 1970-1979
      38320,
      18864,
      43380,
      42160,
      45690,
      27216,
      27968,
      44870,
      43872,
      38256,
      // 1980-1989
      19189,
      18800,
      25776,
      29859,
      59984,
      27480,
      23232,
      43872,
      38613,
      37600,
      // 1990-1999
      51552,
      55636,
      54432,
      55888,
      30034,
      22176,
      43959,
      9680,
      37584,
      51893,
      // 2000-2009
      43344,
      46240,
      47780,
      44368,
      21977,
      19360,
      42416,
      86390,
      21168,
      43312,
      // 2010-2019
      31060,
      27296,
      44368,
      23378,
      19296,
      42726,
      42208,
      53856,
      60005,
      54576,
      // 2020-2029
      23200,
      30371,
      38608,
      19195,
      19152,
      42192,
      118966,
      53840,
      54560,
      56645,
      // 2030-2039
      46496,
      22224,
      21938,
      18864,
      42359,
      42160,
      43600,
      111189,
      27936,
      44448,
      // 2040-2049
      /** Add By JJonline@JJonline.Cn**/
      84835,
      37744,
      18936,
      18800,
      25776,
      92326,
      59984,
      27424,
      108228,
      43744,
      // 2050-2059
      41696,
      53987,
      51552,
      54615,
      54432,
      55888,
      23893,
      22176,
      42704,
      21972,
      // 2060-2069
      21200,
      43448,
      43344,
      46240,
      46758,
      44368,
      21920,
      43940,
      42416,
      21168,
      // 2070-2079
      45683,
      26928,
      29495,
      27296,
      44368,
      84821,
      19296,
      42352,
      21732,
      53600,
      // 2080-2089
      59752,
      54560,
      55968,
      92838,
      22224,
      19168,
      43476,
      41680,
      53584,
      62034,
      // 2090-2099
      54560
    ],
    // 2100
    /**
     * 公历每个月份的天数普通表
     * @Array Of Property
     * @return Number
     */
    solarMonth: [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31],
    /**
     * 天干地支之天干速查表
     * @Array Of Property trans["甲","乙","丙","丁","戊","己","庚","辛","壬","癸"]
     * @return Cn string
     */
    Gan: ["甲", "乙", "丙", "丁", "戊", "己", "庚", "辛", "壬", "癸"],
    /**
     * 天干地支之地支速查表
     * @Array Of Property
     * @trans["子","丑","寅","卯","辰","巳","午","未","申","酉","戌","亥"]
     * @return Cn string
     */
    Zhi: [
      "子",
      "丑",
      "寅",
      "卯",
      "辰",
      "巳",
      "午",
      "未",
      "申",
      "酉",
      "戌",
      "亥"
    ],
    /**
     * 天干地支之地支速查表<=>生肖
     * @Array Of Property
     * @trans["鼠","牛","虎","兔","龙","蛇","马","羊","猴","鸡","狗","猪"]
     * @return Cn string
     */
    Animals: [
      "鼠",
      "牛",
      "虎",
      "兔",
      "龙",
      "蛇",
      "马",
      "羊",
      "猴",
      "鸡",
      "狗",
      "猪"
    ],
    /**
     * 24节气速查表
     * @Array Of Property
     * @trans["小寒","大寒","立春","雨水","惊蛰","春分","清明","谷雨","立夏","小满","芒种","夏至","小暑","大暑","立秋","处暑","白露","秋分","寒露","霜降","立冬","小雪","大雪","冬至"]
     * @return Cn string
     */
    solarTerm: [
      "小寒",
      "大寒",
      "立春",
      "雨水",
      "惊蛰",
      "春分",
      "清明",
      "谷雨",
      "立夏",
      "小满",
      "芒种",
      "夏至",
      "小暑",
      "大暑",
      "立秋",
      "处暑",
      "白露",
      "秋分",
      "寒露",
      "霜降",
      "立冬",
      "小雪",
      "大雪",
      "冬至"
    ],
    /**
     * 1900-2100各年的24节气日期速查表
     * @Array Of Property
     * @return 0x string For splice
     */
    sTermInfo: [
      "9778397bd097c36b0b6fc9274c91aa",
      "97b6b97bd19801ec9210c965cc920e",
      "97bcf97c3598082c95f8c965cc920f",
      "97bd0b06bdb0722c965ce1cfcc920f",
      "b027097bd097c36b0b6fc9274c91aa",
      "97b6b97bd19801ec9210c965cc920e",
      "97bcf97c359801ec95f8c965cc920f",
      "97bd0b06bdb0722c965ce1cfcc920f",
      "b027097bd097c36b0b6fc9274c91aa",
      "97b6b97bd19801ec9210c965cc920e",
      "97bcf97c359801ec95f8c965cc920f",
      "97bd0b06bdb0722c965ce1cfcc920f",
      "b027097bd097c36b0b6fc9274c91aa",
      "9778397bd19801ec9210c965cc920e",
      "97b6b97bd19801ec95f8c965cc920f",
      "97bd09801d98082c95f8e1cfcc920f",
      "97bd097bd097c36b0b6fc9210c8dc2",
      "9778397bd197c36c9210c9274c91aa",
      "97b6b97bd19801ec95f8c965cc920e",
      "97bd09801d98082c95f8e1cfcc920f",
      "97bd097bd097c36b0b6fc9210c8dc2",
      "9778397bd097c36c9210c9274c91aa",
      "97b6b97bd19801ec95f8c965cc920e",
      "97bcf97c3598082c95f8e1cfcc920f",
      "97bd097bd097c36b0b6fc9210c8dc2",
      "9778397bd097c36c9210c9274c91aa",
      "97b6b97bd19801ec9210c965cc920e",
      "97bcf97c3598082c95f8c965cc920f",
      "97bd097bd097c35b0b6fc920fb0722",
      "9778397bd097c36b0b6fc9274c91aa",
      "97b6b97bd19801ec9210c965cc920e",
      "97bcf97c3598082c95f8c965cc920f",
      "97bd097bd097c35b0b6fc920fb0722",
      "9778397bd097c36b0b6fc9274c91aa",
      "97b6b97bd19801ec9210c965cc920e",
      "97bcf97c359801ec95f8c965cc920f",
      "97bd097bd097c35b0b6fc920fb0722",
      "9778397bd097c36b0b6fc9274c91aa",
      "97b6b97bd19801ec9210c965cc920e",
      "97bcf97c359801ec95f8c965cc920f",
      "97bd097bd097c35b0b6fc920fb0722",
      "9778397bd097c36b0b6fc9274c91aa",
      "97b6b97bd19801ec9210c965cc920e",
      "97bcf97c359801ec95f8c965cc920f",
      "97bd097bd07f595b0b6fc920fb0722",
      "9778397bd097c36b0b6fc9210c8dc2",
      "9778397bd19801ec9210c9274c920e",
      "97b6b97bd19801ec95f8c965cc920f",
      "97bd07f5307f595b0b0bc920fb0722",
      "7f0e397bd097c36b0b6fc9210c8dc2",
      "9778397bd097c36c9210c9274c920e",
      "97b6b97bd19801ec95f8c965cc920f",
      "97bd07f5307f595b0b0bc920fb0722",
      "7f0e397bd097c36b0b6fc9210c8dc2",
      "9778397bd097c36c9210c9274c91aa",
      "97b6b97bd19801ec9210c965cc920e",
      "97bd07f1487f595b0b0bc920fb0722",
      "7f0e397bd097c36b0b6fc9210c8dc2",
      "9778397bd097c36b0b6fc9274c91aa",
      "97b6b97bd19801ec9210c965cc920e",
      "97bcf7f1487f595b0b0bb0b6fb0722",
      "7f0e397bd097c35b0b6fc920fb0722",
      "9778397bd097c36b0b6fc9274c91aa",
      "97b6b97bd19801ec9210c965cc920e",
      "97bcf7f1487f595b0b0bb0b6fb0722",
      "7f0e397bd097c35b0b6fc920fb0722",
      "9778397bd097c36b0b6fc9274c91aa",
      "97b6b97bd19801ec9210c965cc920e",
      "97bcf7f1487f531b0b0bb0b6fb0722",
      "7f0e397bd097c35b0b6fc920fb0722",
      "9778397bd097c36b0b6fc9274c91aa",
      "97b6b97bd19801ec9210c965cc920e",
      "97bcf7f1487f531b0b0bb0b6fb0722",
      "7f0e397bd07f595b0b6fc920fb0722",
      "9778397bd097c36b0b6fc9274c91aa",
      "97b6b97bd19801ec9210c9274c920e",
      "97bcf7f0e47f531b0b0bb0b6fb0722",
      "7f0e397bd07f595b0b0bc920fb0722",
      "9778397bd097c36b0b6fc9210c91aa",
      "97b6b97bd197c36c9210c9274c920e",
      "97bcf7f0e47f531b0b0bb0b6fb0722",
      "7f0e397bd07f595b0b0bc920fb0722",
      "9778397bd097c36b0b6fc9210c8dc2",
      "9778397bd097c36c9210c9274c920e",
      "97b6b7f0e47f531b0723b0b6fb0722",
      "7f0e37f5307f595b0b0bc920fb0722",
      "7f0e397bd097c36b0b6fc9210c8dc2",
      "9778397bd097c36b0b70c9274c91aa",
      "97b6b7f0e47f531b0723b0b6fb0721",
      "7f0e37f1487f595b0b0bb0b6fb0722",
      "7f0e397bd097c35b0b6fc9210c8dc2",
      "9778397bd097c36b0b6fc9274c91aa",
      "97b6b7f0e47f531b0723b0b6fb0721",
      "7f0e27f1487f595b0b0bb0b6fb0722",
      "7f0e397bd097c35b0b6fc920fb0722",
      "9778397bd097c36b0b6fc9274c91aa",
      "97b6b7f0e47f531b0723b0b6fb0721",
      "7f0e27f1487f531b0b0bb0b6fb0722",
      "7f0e397bd097c35b0b6fc920fb0722",
      "9778397bd097c36b0b6fc9274c91aa",
      "97b6b7f0e47f531b0723b0b6fb0721",
      "7f0e27f1487f531b0b0bb0b6fb0722",
      "7f0e397bd097c35b0b6fc920fb0722",
      "9778397bd097c36b0b6fc9274c91aa",
      "97b6b7f0e47f531b0723b0b6fb0721",
      "7f0e27f1487f531b0b0bb0b6fb0722",
      "7f0e397bd07f595b0b0bc920fb0722",
      "9778397bd097c36b0b6fc9274c91aa",
      "97b6b7f0e47f531b0723b0787b0721",
      "7f0e27f0e47f531b0b0bb0b6fb0722",
      "7f0e397bd07f595b0b0bc920fb0722",
      "9778397bd097c36b0b6fc9210c91aa",
      "97b6b7f0e47f149b0723b0787b0721",
      "7f0e27f0e47f531b0723b0b6fb0722",
      "7f0e397bd07f595b0b0bc920fb0722",
      "9778397bd097c36b0b6fc9210c8dc2",
      "977837f0e37f149b0723b0787b0721",
      "7f07e7f0e47f531b0723b0b6fb0722",
      "7f0e37f5307f595b0b0bc920fb0722",
      "7f0e397bd097c35b0b6fc9210c8dc2",
      "977837f0e37f14998082b0787b0721",
      "7f07e7f0e47f531b0723b0b6fb0721",
      "7f0e37f1487f595b0b0bb0b6fb0722",
      "7f0e397bd097c35b0b6fc9210c8dc2",
      "977837f0e37f14998082b0787b06bd",
      "7f07e7f0e47f531b0723b0b6fb0721",
      "7f0e27f1487f531b0b0bb0b6fb0722",
      "7f0e397bd097c35b0b6fc920fb0722",
      "977837f0e37f14998082b0787b06bd",
      "7f07e7f0e47f531b0723b0b6fb0721",
      "7f0e27f1487f531b0b0bb0b6fb0722",
      "7f0e397bd097c35b0b6fc920fb0722",
      "977837f0e37f14998082b0787b06bd",
      "7f07e7f0e47f531b0723b0b6fb0721",
      "7f0e27f1487f531b0b0bb0b6fb0722",
      "7f0e397bd07f595b0b0bc920fb0722",
      "977837f0e37f14998082b0787b06bd",
      "7f07e7f0e47f531b0723b0b6fb0721",
      "7f0e27f1487f531b0b0bb0b6fb0722",
      "7f0e397bd07f595b0b0bc920fb0722",
      "977837f0e37f14998082b0787b06bd",
      "7f07e7f0e47f149b0723b0787b0721",
      "7f0e27f0e47f531b0b0bb0b6fb0722",
      "7f0e397bd07f595b0b0bc920fb0722",
      "977837f0e37f14998082b0723b06bd",
      "7f07e7f0e37f149b0723b0787b0721",
      "7f0e27f0e47f531b0723b0b6fb0722",
      "7f0e397bd07f595b0b0bc920fb0722",
      "977837f0e37f14898082b0723b02d5",
      "7ec967f0e37f14998082b0787b0721",
      "7f07e7f0e47f531b0723b0b6fb0722",
      "7f0e37f1487f595b0b0bb0b6fb0722",
      "7f0e37f0e37f14898082b0723b02d5",
      "7ec967f0e37f14998082b0787b0721",
      "7f07e7f0e47f531b0723b0b6fb0722",
      "7f0e37f1487f531b0b0bb0b6fb0722",
      "7f0e37f0e37f14898082b0723b02d5",
      "7ec967f0e37f14998082b0787b06bd",
      "7f07e7f0e47f531b0723b0b6fb0721",
      "7f0e37f1487f531b0b0bb0b6fb0722",
      "7f0e37f0e37f14898082b072297c35",
      "7ec967f0e37f14998082b0787b06bd",
      "7f07e7f0e47f531b0723b0b6fb0721",
      "7f0e27f1487f531b0b0bb0b6fb0722",
      "7f0e37f0e37f14898082b072297c35",
      "7ec967f0e37f14998082b0787b06bd",
      "7f07e7f0e47f531b0723b0b6fb0721",
      "7f0e27f1487f531b0b0bb0b6fb0722",
      "7f0e37f0e366aa89801eb072297c35",
      "7ec967f0e37f14998082b0787b06bd",
      "7f07e7f0e47f149b0723b0787b0721",
      "7f0e27f1487f531b0b0bb0b6fb0722",
      "7f0e37f0e366aa89801eb072297c35",
      "7ec967f0e37f14998082b0723b06bd",
      "7f07e7f0e47f149b0723b0787b0721",
      "7f0e27f0e47f531b0723b0b6fb0722",
      "7f0e37f0e366aa89801eb072297c35",
      "7ec967f0e37f14998082b0723b06bd",
      "7f07e7f0e37f14998083b0787b0721",
      "7f0e27f0e47f531b0723b0b6fb0722",
      "7f0e37f0e366aa89801eb072297c35",
      "7ec967f0e37f14898082b0723b02d5",
      "7f07e7f0e37f14998082b0787b0721",
      "7f07e7f0e47f531b0723b0b6fb0722",
      "7f0e36665b66aa89801e9808297c35",
      "665f67f0e37f14898082b0723b02d5",
      "7ec967f0e37f14998082b0787b0721",
      "7f07e7f0e47f531b0723b0b6fb0722",
      "7f0e36665b66a449801e9808297c35",
      "665f67f0e37f14898082b0723b02d5",
      "7ec967f0e37f14998082b0787b06bd",
      "7f07e7f0e47f531b0723b0b6fb0721",
      "7f0e36665b66a449801e9808297c35",
      "665f67f0e37f14898082b072297c35",
      "7ec967f0e37f14998082b0787b06bd",
      "7f07e7f0e47f531b0723b0b6fb0721",
      "7f0e26665b66a449801e9808297c35",
      "665f67f0e37f1489801eb072297c35",
      "7ec967f0e37f14998082b0787b06bd",
      "7f07e7f0e47f531b0723b0b6fb0721",
      "7f0e27f1487f531b0b0bb0b6fb0722"
    ],
    festivals: {
      "1-1": "元旦",
      "2-14": "情人节",
      "3-8": "妇女节",
      "3-12": "植树节",
      "4-1": "愚人节",
      "5-1": "劳动节",
      "5-4": "青年节",
      "5-12": "护士节",
      "6-1": "儿童节",
      "8-1": "建军节",
      "9-10": "教师节",
      "10-1": "国庆",
      "11-1": "万圣节",
      "12-24": "圣诞节",
      "正月初一": "春节",
      "二月初二": "龙抬头",
      "五月初五": "端午节",
      "七月初七": "七夕节",
      "七月十五": "中元节",
      "八月十五": "中秋节",
      "九月初九": "重阳节",
      "腊月初八": "腊八节",
      "腊月廿三": "小年",
      "腊月三十": "除夕"
    },
    /**
     * 数字转中文速查表
     * @Array Of Property
     * @trans ['日','一','二','三','四','五','六','七','八','九','十']
     * @return Cn string
     */
    nStr1: [
      "日",
      "一",
      "二",
      "三",
      "四",
      "五",
      "六",
      "七",
      "八",
      "九",
      "十"
    ],
    /**
     * 日期转农历称呼速查表
     * @Array Of Property
     * @trans ['初','十','廿','卅']
     * @return Cn string
     */
    nStr2: ["初", "十", "廿", "卅"],
    /**
     * 月份转农历称呼速查表
     * @Array Of Property
     * @trans ['正','一','二','三','四','五','六','七','八','九','十','冬','腊']
     * @return Cn string
     */
    nStr3: [
      "正",
      "二",
      "三",
      "四",
      "五",
      "六",
      "七",
      "八",
      "九",
      "十",
      "冬",
      "腊"
    ],
    /**
     * 返回农历y年一整年的总天数
     * @param lunar Year
     * @return Number
     * @eg:var count = calendar.lYearDays(1987) ;//count=387
     */
    lYearDays: function(y) {
      var i;
      var sum = 348;
      for (i = 32768; i > 8; i >>= 1) {
        sum += this.lunarInfo[y - 1900] & i ? 1 : 0;
      }
      return sum + this.leapDays(y);
    },
    /**
     * 返回农历y年闰月是哪个月；若y年没有闰月 则返回0
     * @param lunar Year
     * @return Number (0-12)
     * @eg:var leapMonth = calendar.leapMonth(1987) ;//leapMonth=6
     */
    leapMonth: function(y) {
      return this.lunarInfo[y - 1900] & 15;
    },
    /**
     * 返回农历y年闰月的天数 若该年没有闰月则返回0
     * @param lunar Year
     * @return Number (0、29、30)
     * @eg:var leapMonthDay = calendar.leapDays(1987) ;//leapMonthDay=29
     */
    leapDays: function(y) {
      if (this.leapMonth(y)) {
        return this.lunarInfo[y - 1900] & 65536 ? 30 : 29;
      }
      return 0;
    },
    /**
     * 返回农历y年m月（非闰月）的总天数，计算m为闰月时的天数请使用leapDays方法
     * @param lunar Year
     * @return Number (-1、29、30)
     * @eg:var MonthDay = calendar.monthDays(1987,9) ;//MonthDay=29
     */
    monthDays: function(y, m) {
      if (m > 12 || m < 1) {
        return -1;
      }
      return this.lunarInfo[y - 1900] & 65536 >> m ? 30 : 29;
    },
    /**
     * 返回公历(!)y年m月的天数
     * @param solar Year
     * @return Number (-1、28、29、30、31)
     * @eg:var solarMonthDay = calendar.leapDays(1987) ;//solarMonthDay=30
     */
    solarDays: function(y, m) {
      if (m > 12 || m < 1) {
        return -1;
      }
      var ms = m - 1;
      if (ms == 1) {
        return y % 4 == 0 && y % 100 != 0 || y % 400 == 0 ? 29 : 28;
      } else {
        return this.solarMonth[ms];
      }
    },
    /**
     * 农历年份转换为干支纪年
     * @param  lYear 农历年的年份数
     * @return Cn string
     */
    toGanZhiYear: function(lYear) {
      var ganKey = (lYear - 3) % 10;
      var zhiKey = (lYear - 3) % 12;
      if (ganKey == 0)
        ganKey = 10;
      if (zhiKey == 0)
        zhiKey = 12;
      return this.Gan[ganKey - 1] + this.Zhi[zhiKey - 1];
    },
    /**
     * 公历月、日判断所属星座
     * @param  cMonth [description]
     * @param  cDay [description]
     * @return Cn string
     */
    toAstro: function(cMonth, cDay) {
      var s = "魔羯水瓶双鱼白羊金牛双子巨蟹狮子处女天秤天蝎射手魔羯";
      var arr = [20, 19, 21, 21, 21, 22, 23, 23, 23, 23, 22, 22];
      return s.substr(cMonth * 2 - (cDay < arr[cMonth - 1] ? 2 : 0), 2) + "座";
    },
    /**
     * 传入offset偏移量返回干支
     * @param offset 相对甲子的偏移量
     * @return Cn string
     */
    toGanZhi: function(offset) {
      return this.Gan[offset % 10] + this.Zhi[offset % 12];
    },
    /**
     * 传入公历(!)y年获得该年第n个节气的公历日期
     * @param y公历年(1900-2100)；n二十四节气中的第几个节气(1~24)；从n=1(小寒)算起
     * @return day Number
     * @eg:var _24 = calendar.getTerm(1987,3) ;//_24=4;意即1987年2月4日立春
     */
    getTerm: function(y, n) {
      if (y < 1900 || y > 2100) {
        return -1;
      }
      if (n < 1 || n > 24) {
        return -1;
      }
      var _table = this.sTermInfo[y - 1900];
      var _info = [
        parseInt("0x" + _table.substr(0, 5)).toString(),
        parseInt("0x" + _table.substr(5, 5)).toString(),
        parseInt("0x" + _table.substr(10, 5)).toString(),
        parseInt("0x" + _table.substr(15, 5)).toString(),
        parseInt("0x" + _table.substr(20, 5)).toString(),
        parseInt("0x" + _table.substr(25, 5)).toString()
      ];
      var _calday = [
        _info[0].substr(0, 1),
        _info[0].substr(1, 2),
        _info[0].substr(3, 1),
        _info[0].substr(4, 2),
        _info[1].substr(0, 1),
        _info[1].substr(1, 2),
        _info[1].substr(3, 1),
        _info[1].substr(4, 2),
        _info[2].substr(0, 1),
        _info[2].substr(1, 2),
        _info[2].substr(3, 1),
        _info[2].substr(4, 2),
        _info[3].substr(0, 1),
        _info[3].substr(1, 2),
        _info[3].substr(3, 1),
        _info[3].substr(4, 2),
        _info[4].substr(0, 1),
        _info[4].substr(1, 2),
        _info[4].substr(3, 1),
        _info[4].substr(4, 2),
        _info[5].substr(0, 1),
        _info[5].substr(1, 2),
        _info[5].substr(3, 1),
        _info[5].substr(4, 2)
      ];
      return parseInt(_calday[n - 1]);
    },
    /**
     * 传入农历数字月份返回汉语通俗表示法
     * @param lunar month
     * @return Cn string
     * @eg:var cnMonth = calendar.toChinaMonth(12) ;//cnMonth='腊月'
     */
    toChinaMonth: function(m) {
      if (m > 12 || m < 1) {
        return -1;
      }
      var s = this.nStr3[m - 1];
      s += "月";
      return s;
    },
    /**
     * 传入农历日期数字返回汉字表示法
     * @param lunar day
     * @return Cn string
     * @eg:var cnDay = calendar.toChinaDay(21) ;//cnMonth='廿一'
     */
    toChinaDay: function(d) {
      var s;
      switch (d) {
        case 10:
          s = "初十";
          break;
        case 20:
          s = "二十";
          break;
        case 30:
          s = "三十";
          break;
        default:
          s = this.nStr2[Math.floor(d / 10)];
          s += this.nStr1[d % 10];
      }
      return s;
    },
    /**
     * 年份转生肖[!仅能大致转换] => 精确划分生肖分界线是“立春”
     * @param y year
     * @return Cn string
     * @eg:var animal = calendar.getAnimal(1987) ;//animal='兔'
     */
    getAnimal: function(y) {
      return this.Animals[(y - 4) % 12];
    },
    /**
     * 传入阳历年月日获得详细的公历、农历object信息 <=>JSON
     * @param y  solar year
     * @param m  solar month
     * @param d  solar day
     * @return JSON object
     * @eg:__f__('log','at uni_modules/wu-calendar/components/wu-calendar/calendar.js:441',calendar.solar2lunar(1987,11,01));
     */
    solar2lunar: function(y, m, d) {
      if (y < 1900 || y > 2100) {
        return -1;
      }
      if (y == 1900 && m == 1 && d < 31) {
        return -1;
      }
      if (!y) {
        var objDate = /* @__PURE__ */ new Date();
      } else {
        var objDate = new Date(y, parseInt(m) - 1, d);
      }
      var i;
      var leap = 0;
      var temp = 0;
      var y = objDate.getFullYear();
      var m = objDate.getMonth() + 1;
      var d = objDate.getDate();
      var offset = (Date.UTC(objDate.getFullYear(), objDate.getMonth(), objDate.getDate()) - Date.UTC(
        1900,
        0,
        31
      )) / 864e5;
      for (i = 1900; i < 2101 && offset > 0; i++) {
        temp = this.lYearDays(i);
        offset -= temp;
      }
      if (offset < 0) {
        offset += temp;
        i--;
      }
      var isTodayObj = /* @__PURE__ */ new Date();
      var isToday = false;
      if (isTodayObj.getFullYear() == y && isTodayObj.getMonth() + 1 == m && isTodayObj.getDate() == d) {
        isToday = true;
      }
      var nWeek = objDate.getDay();
      var cWeek = this.nStr1[nWeek];
      if (nWeek == 0) {
        nWeek = 7;
      }
      var year = i;
      var leap = this.leapMonth(i);
      var isLeap = false;
      for (i = 1; i < 13 && offset > 0; i++) {
        if (leap > 0 && i == leap + 1 && isLeap == false) {
          --i;
          isLeap = true;
          temp = this.leapDays(year);
        } else {
          temp = this.monthDays(year, i);
        }
        if (isLeap == true && i == leap + 1) {
          isLeap = false;
        }
        offset -= temp;
      }
      if (offset == 0 && leap > 0 && i == leap + 1) {
        if (isLeap) {
          isLeap = false;
        } else {
          isLeap = true;
          --i;
        }
      }
      if (offset < 0) {
        offset += temp;
        --i;
      }
      var month = i;
      var day = offset + 1;
      var sm = m - 1;
      var gzY = this.toGanZhiYear(year);
      var firstNode = this.getTerm(y, m * 2 - 1);
      var secondNode = this.getTerm(y, m * 2);
      var gzM = this.toGanZhi((y - 1900) * 12 + m + 11);
      if (d >= firstNode) {
        gzM = this.toGanZhi((y - 1900) * 12 + m + 12);
      }
      var isTerm = false;
      var Term = null;
      if (firstNode == d) {
        isTerm = true;
        Term = this.solarTerm[m * 2 - 2];
      }
      if (secondNode == d) {
        isTerm = true;
        Term = this.solarTerm[m * 2 - 1];
      }
      const IMonthCn = (isLeap ? "闰" : "") + this.toChinaMonth(month);
      let IDayCn = this.toChinaDay(day);
      let festival = "";
      let lMDcn = IMonthCn + IDayCn;
      let MD = m + "-" + d;
      if (this.festivals.hasOwnProperty(lMDcn)) {
        festival = this.festivals[lMDcn];
      } else if (this.festivals.hasOwnProperty(MD)) {
        festival = this.festivals[MD];
      }
      var dayCyclical = Date.UTC(y, sm, 1, 0, 0, 0, 0) / 864e5 + 25567 + 10;
      var gzD = this.toGanZhi(dayCyclical + d - 1);
      var astro = this.toAstro(m, d);
      return {
        "lYear": year,
        "lMonth": month,
        "lDay": day,
        "Animal": this.getAnimal(year),
        "IMonthCn": IMonthCn,
        "IDayCn": IDayCn,
        "cYear": y,
        "cMonth": m,
        "cDay": d,
        "gzYear": gzY,
        "gzMonth": gzM,
        "gzDay": gzD,
        "isToday": isToday,
        "isLeap": isLeap,
        "nWeek": nWeek,
        "ncWeek": "星期" + cWeek,
        "isTerm": isTerm,
        "Term": Term,
        "astro": astro,
        "festival": festival
      };
    },
    /**
     * 传入农历年月日以及传入的月份是否闰月获得详细的公历、农历object信息 <=>JSON
     * @param y  lunar year
     * @param m  lunar month
     * @param d  lunar day
     * @param isLeapMonth  lunar month is leap or not.[如果是农历闰月第四个参数赋值true即可]
     * @return JSON object
     * @eg:__f__('log','at uni_modules/wu-calendar/components/wu-calendar/calendar.js:608',calendar.lunar2solar(1987,9,10));
     */
    lunar2solar: function(y, m, d, isLeapMonth) {
      var isLeapMonth = !!isLeapMonth;
      var leapMonth = this.leapMonth(y);
      this.leapDays(y);
      if (isLeapMonth && leapMonth != m) {
        return -1;
      }
      if (y == 2100 && m == 12 && d > 1 || y == 1900 && m == 1 && d < 31) {
        return -1;
      }
      var day = this.monthDays(y, m);
      var _day = day;
      if (isLeapMonth) {
        _day = this.leapDays(y, m);
      }
      if (y < 1900 || y > 2100 || d > _day) {
        return -1;
      }
      var offset = 0;
      for (var i = 1900; i < y; i++) {
        offset += this.lYearDays(i);
      }
      var leap = 0;
      var isAdd = false;
      for (var i = 1; i < m; i++) {
        leap = this.leapMonth(y);
        if (!isAdd) {
          if (leap <= i && leap > 0) {
            offset += this.leapDays(y);
            isAdd = true;
          }
        }
        offset += this.monthDays(y, i);
      }
      if (isLeapMonth) {
        offset += day;
      }
      var stmap = Date.UTC(1900, 1, 30, 0, 0, 0);
      var calObj = new Date((offset + d - 31) * 864e5 + stmap);
      var cY = calObj.getUTCFullYear();
      var cM = calObj.getUTCMonth() + 1;
      var cD = calObj.getUTCDate();
      return this.solar2lunar(cY, cM, cD);
    }
  };
  class Calendar {
    constructor({
      date: date2,
      selected,
      startDate,
      endDate,
      mode,
      monthShowCurrentMonth,
      rangeEndRepick,
      rangeSameDay,
      rangeHaveDisableTruncation,
      type,
      foldStatus,
      startWeek
    } = {}) {
      this.date = this.getDate(/* @__PURE__ */ new Date());
      this.selected = selected || [];
      this.startDate = startDate;
      this.endDate = endDate;
      this.startWeek = startWeek;
      this.mode = mode;
      this.type = type;
      this.foldStatus = foldStatus;
      this.rangeEndRepick = rangeEndRepick;
      this.rangeSameDay = rangeSameDay;
      this.rangeHaveDisableTruncation = rangeHaveDisableTruncation;
      this.monthShowCurrentMonth = monthShowCurrentMonth;
      this.cleanRange();
      this.weeks = {};
      this.multiple = [];
    }
    /**
     * 设置日期
     * @param {Object} date
     */
    setDate(date2) {
      this.selectDate = this.getDate(date2);
      this._getWeek(this.selectDate.fullDate);
    }
    /**
     * 清除范围
     */
    cleanRange() {
      this.rangeStatus = {
        before: "",
        after: "",
        data: []
      };
    }
    /**
     * 清除多选
     */
    cleanMultiple() {
      this.multiple = [];
    }
    /**
     * 重置开始日期
     */
    resetSatrtDate(startDate) {
      this.startDate = startDate;
    }
    /**
     * 重置结束日期
     */
    resetEndDate(endDate) {
      this.endDate = endDate;
    }
    /**
     * 重置是否每月仅显示当月数据
     * @param {Boolean} show 是否仅显示当月数据 
     */
    resetMonthShowCurrentMonth(show) {
      this.monthShowCurrentMonth = show;
    }
    // 重置允许范围内重选结束日期
    resetRangeEndRepick(val) {
      this.rangeEndRepick = val;
    }
    // 重置允许日期范围选择起始日期为同一天
    resetRangeSameDay(val) {
      this.rangeSameDay = val;
    }
    // 重置范围内遇到打点禁用日期是否截断
    resetRangeHaveDisableTruncation(val) {
      this.rangeHaveDisableTruncation = val;
    }
    // 重置日期选择模式
    resetMode(val) {
      this.mode = val;
    }
    // 重置折叠状态
    resetFoldStatus(val) {
      this.foldStatus = val;
    }
    // 重置日历以周几开始
    resetStartWeek(val) {
      this.startWeek = val;
    }
    /**
     * 创建本月某一天的信息
     */
    _createCurrentDay(nowDate, full, date2) {
      let isDay = this.date.fullDate === nowDate;
      let info = this.selected && this.selected.find((item) => {
        if (this.dateEqual(nowDate, item.date)) {
          return item;
        }
      });
      let disableBefore = true;
      let disableAfter = true;
      if (this.startDate) {
        disableBefore = this.dateCompare(this.startDate, nowDate);
      }
      if (this.endDate) {
        disableAfter = this.dateCompare(nowDate, this.endDate);
      }
      let ranges = this.rangeStatus.data;
      let checked = false;
      if (this.mode == "range") {
        checked = ranges.findIndex((item) => this.dateEqual(item, nowDate)) !== -1 ? true : false;
      }
      let multiples = this.multiple;
      let multiplesChecked = false;
      if (this.mode == "multiple") {
        multiplesChecked = multiples.findIndex((item) => this.dateEqual(item, nowDate)) !== -1;
      }
      let data2 = {
        fullDate: nowDate,
        year: full.year,
        date: date2,
        type: this.type,
        mode: this.mode,
        multiples: this.mode == "multiple" ? multiplesChecked : false,
        rangeMultiple: this.mode == "range" ? checked : false,
        beforeRange: this.dateEqual(this.rangeStatus.before, nowDate),
        afterRange: this.dateEqual(this.rangeStatus.after, nowDate),
        month: full.month,
        lunar: this.getlunar(full.year, full.month, date2),
        disable: !(disableBefore && disableAfter),
        isDay
      };
      if (info) {
        data2.extraInfo = info;
        data2.disable = info.disable || false;
      }
      return data2;
    }
    /**
     * 获取任意时间
     */
    getDate(date2, AddDayCount = 0, str = "day") {
      if (!date2) {
        date2 = /* @__PURE__ */ new Date();
      }
      if (typeof date2 !== "object") {
        date2 = date2.replace(/-/g, "/");
      }
      const dd = new Date(date2);
      switch (str) {
        case "day":
          dd.setDate(dd.getDate() + AddDayCount);
          break;
        case "month":
          if (dd.getDate() === 31 && AddDayCount > 0) {
            dd.setDate(dd.getDate() + AddDayCount);
          } else {
            const preMonth = dd.getMonth();
            dd.setMonth(preMonth + AddDayCount);
            const nextMonth = dd.getMonth();
            if (AddDayCount < 0 && preMonth !== 0 && nextMonth - preMonth > AddDayCount) {
              dd.setMonth(nextMonth + (nextMonth - preMonth + AddDayCount));
            }
            if (AddDayCount > 0 && nextMonth - preMonth > AddDayCount) {
              dd.setMonth(nextMonth - (nextMonth - preMonth - AddDayCount));
            }
          }
          break;
        case "week":
          dd.setDate(dd.getDate() + AddDayCount * 7);
          break;
        case "year":
          dd.setFullYear(dd.getFullYear() + AddDayCount);
          break;
      }
      const y = dd.getFullYear();
      const m = dd.getMonth() + 1 < 10 ? "0" + (dd.getMonth() + 1) : dd.getMonth() + 1;
      const d = dd.getDate() < 10 ? "0" + dd.getDate() : dd.getDate();
      return {
        fullDate: y + "-" + m + "-" + d,
        year: y,
        month: m,
        date: d,
        day: dd.getDay()
      };
    }
    /**
     * 获取上月剩余天数
     */
    _getLastMonthDays(firstDay, full) {
      let dateArr = [];
      for (let i = firstDay; i > 0; i--) {
        const beforeDate = new Date(full.year, full.month - 1, -i + 1).getDate();
        dateArr.push({
          date: beforeDate,
          month: full.month - 1,
          year: full.year,
          lunar: this.getlunar(full.year, full.month - 1, beforeDate),
          disable: true
        });
      }
      return dateArr;
    }
    /**
     * 获取本月天数
     */
    _currentMonthDays(dateData, full) {
      let dateArr = [];
      this.date.fullDate;
      for (let i = 1; i <= dateData; i++) {
        let nowDate = full.year + "-" + (full.month < 10 ? full.month : full.month) + "-" + (i < 10 ? "0" + i : i);
        dateArr.push(this._createCurrentDay(nowDate, full, i));
      }
      return dateArr;
    }
    /**
     * 获取下月天数
     */
    _getNextMonthDays(surplus, full) {
      let dateArr = [];
      for (let i = 1; i < surplus + 1; i++) {
        dateArr.push({
          date: i,
          month: Number(full.month) + 1,
          lunar: this.getlunar(full.year, Number(full.month) + 1, i),
          disable: true
        });
      }
      return dateArr;
    }
    /**
     * 获取任意日期的一周
     */
    _getWeekDays(dateData) {
      let dateArr = [];
      let oneDayTime = 1e3 * 60 * 60 * 24;
      let today = new Date(dateData);
      let todayDay;
      let startDate;
      if (this.startWeek == "mon") {
        todayDay = today.getDay() || 7;
        startDate = new Date(today.getTime() - oneDayTime * (todayDay - 1));
      } else {
        todayDay = today.getDay();
        startDate = new Date(today.getTime() - oneDayTime * todayDay);
      }
      for (let i = 0; i < 7; i++) {
        let temp = new Date(startDate.getTime() + i * oneDayTime);
        let newDate = this.getDate(`${temp.getFullYear()}-${temp.getMonth() + 1}-${temp.getDate()}`);
        dateArr.push(this._createCurrentDay(newDate.fullDate, newDate, Number(newDate.date)));
      }
      return dateArr;
    }
    /**
     * 获取当前日期详情
     * @param {Object} date
     */
    getInfo(date2) {
      if (!date2) {
        date2 = /* @__PURE__ */ new Date();
      }
      const dateInfo = this.canlender.find((item) => item.fullDate === this.getDate(date2).fullDate);
      return dateInfo;
    }
    /**
     * 比较时间大小
     */
    dateCompare(startDate, endDate) {
      startDate = new Date(startDate.replace("-", "/").replace("-", "/"));
      endDate = new Date(endDate.replace("-", "/").replace("-", "/"));
      if (startDate <= endDate) {
        return true;
      } else {
        return false;
      }
    }
    /**
     * 比较时间是否相等
     */
    dateEqual(before = "", after = "") {
      before = new Date(before.replace("-", "/").replace("-", "/"));
      after = new Date(after.replace("-", "/").replace("-", "/"));
      if (before.getTime() - after.getTime() === 0) {
        return true;
      } else {
        return false;
      }
    }
    /**
     * 获取日期范围内所有日期
     * @param {Object} begin
     * @param {Object} end
     */
    getDateAll(begin, end) {
      let disableList = this.selected.filter((item) => item.date && item.disable).map((item) => item.date);
      var arr = [];
      var ab = begin.split("-");
      var ae = end.split("-");
      var db = /* @__PURE__ */ new Date();
      db.setFullYear(ab[0], ab[1] - 1, ab[2]);
      var de = /* @__PURE__ */ new Date();
      de.setFullYear(ae[0], ae[1] - 1, ae[2]);
      var wuxDb = db.getTime() - 24 * 60 * 60 * 1e3;
      var wuxDe = de.getTime() - 24 * 60 * 60 * 1e3;
      for (var k = wuxDb; k <= wuxDe; ) {
        k = k + 24 * 60 * 60 * 1e3;
        let fullDate = this.getDate(new Date(parseInt(k))).fullDate;
        if (this.rangeHaveDisableTruncation) {
          if (disableList.includes(fullDate))
            return arr;
          arr.push(fullDate);
        } else {
          if (!disableList.includes(fullDate))
            arr.push(fullDate);
        }
      }
      return arr;
    }
    /**
     * 计算阴历日期显示
     */
    getlunar(year, month, date2) {
      return calendar.solar2lunar(year, month, date2);
    }
    /**
     * 设置打点
     */
    setSelectInfo(data2, value) {
      this.selected = value;
      this._getWeek(data2);
    }
    /**
     *  设置范围
     */
    setRange(fullDate) {
      let {
        before,
        after
      } = this.rangeStatus;
      if (this.mode != "range")
        return;
      let reset = this.dateCompare(fullDate, before);
      if (this.rangeSameDay && before && reset) {
        reset = !this.dateEqual(fullDate, before);
      }
      if ((before && after || reset) && (!this.rangeEndRepick || this.rangeEndRepick && this.rangeStatus.data.indexOf(fullDate) == -1)) {
        this.rangeStatus.before = fullDate;
        this.rangeStatus.after = "";
        this.rangeStatus.data = [];
      } else {
        if (!before) {
          this.rangeStatus.before = fullDate;
        } else {
          if (this.dateCompare(this.rangeStatus.before, fullDate)) {
            this.rangeStatus.data = this.getDateAll(this.rangeStatus.before, fullDate);
          } else {
            this.rangeStatus.data = this.getDateAll(fullDate, this.rangeStatus.before);
          }
          this.rangeStatus.after = this.rangeStatus.data[this.rangeStatus.data.length - 1];
        }
      }
      this._getWeek(fullDate);
    }
    /**
     *  设置多选
     */
    setMultiple(fullDate) {
      if (this.mode != "multiple")
        return;
      let index2 = this.multiple.findIndex((item) => {
        if (this.dateEqual(fullDate, item)) {
          return item;
        }
      });
      if (index2 === -1) {
        this.multiple.push(fullDate);
        this.setDate(fullDate);
      } else {
        this.multiple = this.multiple.filter((item, i) => i != index2);
      }
      this._getWeek(fullDate);
    }
    /**
     * 获取每周数据
     * @param {Object} dateData
     */
    _getWeek(dateData, useWeeks = true) {
      const {
        year,
        month
      } = this.getDate(dateData);
      let weeks = {};
      let canlender = [];
      if (this.foldStatus === "open") {
        let firstDay = new Date(year, month - 1, 1).getDay();
        if (this.startWeek === "mon") {
          firstDay = firstDay === 0 ? 6 : firstDay - 1;
        }
        let currentDay = new Date(year, month, 0).getDate();
        let dates = {
          lastMonthDays: this._getLastMonthDays(firstDay, this.getDate(dateData)),
          // 上个月末尾几天
          currentMonthDys: this._currentMonthDays(currentDay, this.getDate(dateData)),
          // 本月天数
          weeks: []
        };
        const surplus = 42 - (dates.lastMonthDays.length + dates.currentMonthDys.length);
        dates.nextMonthDays = this._getNextMonthDays(surplus, this.getDate(dateData));
        if (this.monthShowCurrentMonth) {
          canlender = canlender.concat(
            dates.lastMonthDays.map((item) => ({
              empty: true,
              lunar: {}
            })),
            dates.currentMonthDys,
            dates.nextMonthDays.map((item) => ({
              empty: true,
              lunar: {}
            }))
          );
        } else {
          canlender = canlender.concat(dates.lastMonthDays, dates.currentMonthDys, dates.nextMonthDays);
        }
      } else {
        canlender = this._getWeekDays(dateData);
      }
      for (let i = 0; i < canlender.length; i++) {
        if (i % 7 === 0) {
          weeks[parseInt(i / 7)] = new Array(7);
        }
        weeks[parseInt(i / 7)][i % 7] = canlender[i] || {};
      }
      if (useWeeks) {
        this.canlender = canlender;
        this.weeks = weeks;
      }
      return weeks;
    }
    //静态方法
    // static init(date) {
    // 	if (!this.instance) {
    // 		this.instance = new Calendar(date);
    // 	}
    // 	return this.instance;
    // }
  }
  const props = {
    props: {
      // 自定义当前时间
      date: {
        type: [String, Array],
        default: ""
      },
      // 日历类型(默认为month)
      type: {
        type: String,
        default: "month",
        validator(value) {
          return ["month", "week"].includes(value);
        }
      },
      // 日期选择模式
      mode: {
        type: String,
        default: "single"
      },
      // 是否使用默认日期(今天，默认为true)
      useToday: {
        type: Boolean,
        default: true
      },
      // 是否使用折叠功能
      fold: {
        type: Boolean,
        default: null
      },
      // 主题色
      color: {
        type: String,
        default: "#3c9cff"
      },
      // 日历中每一项日期的高度(默认70),单位px
      itemHeight: {
        type: Number,
        default: 70
      },
      // 取消文字的颜色
      cancelColor: {
        type: String,
        default: "#333"
      },
      // 确定文字的颜色
      confirmColor: {
        type: String,
        default: "#333"
      },
      // 	mode=range时，第一个日期底部的提示文字
      startText: {
        type: String,
        default: "开始"
      },
      // mode=range时，最后一个日期底部的提示文字
      endText: {
        type: String,
        default: "结束"
      },
      // 日历以周几开始
      startWeek: {
        type: String,
        default: "sun",
        validator(value) {
          return ["sun", "mon"].includes(value);
        }
      },
      // 打点，期待格式[{date: '2019-06-27', info: '签到', data: { custom: '自定义信息', name: '自定义消息头',xxx:xxx... }}]
      selected: {
        type: Array,
        default() {
          return [];
        }
      },
      // 是否显示农历
      lunar: {
        type: Boolean,
        default: false
      },
      // 日期选择范围-开始日期
      startDate: {
        type: String,
        default: ""
      },
      // 日期选择范围-结束日期
      endDate: {
        type: String,
        default: ""
      },
      // 允许日期选择范围内重选结束日期
      rangeEndRepick: {
        type: Boolean,
        default: false
      },
      // 允许日期选择范围起始日期为同一天
      rangeSameDay: {
        type: Boolean,
        default: false
      },
      // 允许日期选择范围内遇到打点禁用日期进行截断
      rangeHaveDisableTruncation: {
        type: Boolean,
        default: false
      },
      // 每月仅显示当月日期
      monthShowCurrentMonth: {
        type: Boolean,
        default: false
      },
      // 插入模式,可选值，ture：插入模式；false：弹窗模式； 默认为插入模式
      insert: {
        type: Boolean,
        default: true
      },
      // 滑动切换模式，可选值 horizontal: 横向 vertical：纵向 none： 不使用滑动切换
      slideSwitchMode: {
        type: String,
        default: "horizontal"
      },
      // 是否显示月份为背景
      showMonth: {
        type: Boolean,
        default: true
      },
      // 弹窗模式是否清空上次选择内容
      clearDate: {
        type: Boolean,
        default: true
      },
      // 是否点击遮罩层关闭
      maskClick: {
        type: Boolean,
        default: false
      },
      // 是否禁止点击日历
      disabledChoice: {
        type: Boolean,
        default: false
      },
      // 弹窗日历取消和确认按钮的显示位置
      operationPosition: {
        type: String,
        default: "top",
        validator(value) {
          return ["top", "bottom"].includes(value);
        }
      },
      // 当通过 `selected` 属性设置某个日期 `badgeColor`后，如果该日期被选择且主题色与 `badgeColor` 一致时，徽标会显示本颜色
      actBadgeColor: {
        type: String,
        default: "#fff"
      },
      ...(_j = (_i = uni.$w) == null ? void 0 : _i.props) == null ? void 0 : _j.calendar
    }
  };
  const {
    t
  } = initVueI18n(i18nMessages);
  const _sfc_main$d = {
    mixins: [mpMixin, mixin, props],
    emits: ["close", "cancel", "confirm", "change", "monthSwitch", "foldSwitch"],
    data() {
      return {
        show: false,
        weeks: [],
        preWeeks: [],
        nextWeeks: [],
        weeksMonth: null,
        preWeeksMonth: null,
        nextWeeksMonth: null,
        calendar: {},
        nowDate: "",
        aniMaskShow: false,
        swiperCurrent: 1,
        swiperChangeDirection: "",
        pickerDate: "",
        Fold: null,
        FoldStatus: null,
        weekContentStyle: {}
      };
    },
    computed: {
      /**
       * for i18n
       */
      okText() {
        return t("wu-calender.ok");
      },
      cancelText() {
        return t("wu-calender.cancel");
      },
      YearText() {
        return t("wu-calender.year");
      },
      MonthText() {
        return t("wu-calender.month");
      },
      todayText() {
        return t("wu-calender.today");
      },
      monText() {
        return t("wu-calender.MON");
      },
      TUEText() {
        return t("wu-calender.TUE");
      },
      WEDText() {
        return t("wu-calender.WED");
      },
      THUText() {
        return t("wu-calender.THU");
      },
      FRIText() {
        return t("wu-calender.FRI");
      },
      SATText() {
        return t("wu-calender.SAT");
      },
      SUNText() {
        return t("wu-calender.SUN");
      },
      calendarContentStyle() {
        return {
          height: (this.FoldStatus === "open" ? this.itemHeight * 6 : this.itemHeight) + "px"
        };
      },
      getDateType() {
        if (this.type === "year")
          return this.type;
        return this.FoldStatus === "open" ? "month" : "week";
      }
    },
    watch: {
      date(newVal) {
        this.cale.cleanRange();
        this.init(newVal);
      },
      mode(newVal) {
        this.cale.cleanRange();
        this.cale.resetMode(newVal);
        this.init(this.date);
      },
      startDate(val) {
        this.cale.resetSatrtDate(val);
        this.cale.setDate(this.nowDate.fullDate);
        this.assignmentWeeks();
      },
      endDate(val) {
        this.cale.resetEndDate(val);
        this.cale.setDate(this.nowDate.fullDate);
        this.assignmentWeeks();
      },
      monthShowCurrentMonth(val) {
        this.cale.resetMonthShowCurrentMonth(val);
        this.setDate(this.nowDate.fullDate);
      },
      rangeEndRepick(val) {
        this.cale.resetRangeEndRepick(val);
      },
      rangeSameDay(val) {
        this.cale.resetRangeSameDay(val);
      },
      rangeHaveDisableTruncation(val) {
        this.cale.resetRangeHaveDisableTruncation(val);
        this.cale.cleanRange();
        this.init(this.date);
      },
      selected: {
        handler(newVal) {
          this.cale.setSelectInfo(this.nowDate.fullDate, newVal);
          this.assignmentWeeks();
          let nowDateInfo = this.cale.canlender.filter((item) => item.fullDate && this.cale.dateEqual(item.fullDate, this.calendar.fullDate));
          if (nowDateInfo.length)
            this.calendar = nowDateInfo[0];
        },
        deep: true
      },
      fold(newVal) {
        this.Fold = newVal;
      },
      type(newVal) {
        this.initFold();
        this.cale.resetFoldStatus(this.FoldStatus);
        this.init(this.date);
      },
      startWeek(newVal) {
        this.cale.cleanRange();
        this.cale.resetStartWeek(newVal);
        this.init(this.date);
      }
    },
    created() {
      this.initFold();
      this.cale = new Calendar({
        selected: this.selected,
        startDate: this.startDate,
        endDate: this.endDate,
        mode: this.mode,
        type: this.type,
        startWeek: this.startWeek,
        foldStatus: this.FoldStatus,
        monthShowCurrentMonth: this.monthShowCurrentMonth,
        rangeEndRepick: this.rangeEndRepick,
        rangeSameDay: this.rangeSameDay,
        rangeHaveDisableTruncation: this.rangeHaveDisableTruncation
      });
      this.init(this.date);
    },
    methods: {
      // 取消穿透
      clean() {
        if (this.maskClick) {
          this.$emit("close");
          this.close();
        }
      },
      bindDateChange(e) {
        const value = e.detail.value + "-1";
        this.setDate(value);
        this.swiperCurrentChangeWeeks();
        const {
          year,
          month
        } = this.cale.getDate(value);
        this.$emit("monthSwitch", {
          year,
          month
        });
      },
      /**
       * 初始化日期显示
       * @param {Object} date
       */
      init(date2) {
        let firstDate = this.mode == "single" ? date2 : date2[0];
        if (date2) {
          let dateType = Object.prototype.toString.call(date2);
          if (this.mode == "single" && dateType != "[object String]") {
            return formatAppLog("error", "at uni_modules/wu-calendar/components/wu-calendar/wu-calendar.vue:385", `类型错误，mode=${this.mode}时，date=String`);
          } else if (this.mode != "single" && dateType != "[object Array]") {
            return formatAppLog("error", "at uni_modules/wu-calendar/components/wu-calendar/wu-calendar.vue:387", `类型错误，mode=${this.mode}时，date=Array`);
          }
          if (this.mode == "multiple") {
            this.cale.multiple = date2.map((item) => item);
            this.cale._getWeek(this.cale.multiple[this.cale.multiple.length - 1]);
          } else if (this.mode == "range") {
            date2[0] ? this.cale.setRange(date2[0]) : "";
            date2[1] ? this.cale.setRange(date2[1]) : "";
          }
        } else if (this.useToday && !this.selected.filter((item) => item.disable && this.cale.dateEqual(item.date, this.cale.date.fullDate)).length) {
          if (this.mode == "multiple") {
            this.cale.multiple = [this.cale.date.fullDate];
            this.cale._getWeek(this.cale.multiple[this.cale.multiple.length - 1]);
          } else if (this.mode == "range") {
            this.cale.setRange(this.cale.date.fullDate);
          }
        }
        this.cale.setDate(firstDate);
        this.nowDate = this.cale.getInfo(firstDate);
        this.weeksMonth = this.nowDate.month;
        if (this.useToday && !this.date || this.date) {
          this.calendar = this.nowDate;
        }
        this.updateWeeks(false);
      },
      /**
       * 打开日历弹窗
       */
      open() {
        this.show = true;
        this.$nextTick(() => {
          setTimeout(() => {
            this.aniMaskShow = true;
          }, 50);
        });
      },
      /**
       * 关闭日历弹窗
       */
      close() {
        this.aniMaskShow = false;
        this.$nextTick(() => {
          setTimeout(() => {
            this.show = false;
            if (this.clearDate && !this.insert) {
              this.reset();
            }
          }, 300);
        });
      },
      /**
       * 重置
       */
      reset() {
        this.cale.cleanRange();
        this.cale.cleanMultiple();
        this.swiperCurrent = 1;
        this.init(this.date);
      },
      /**
       * 确认按钮
       */
      confirm() {
        this.setEmit("confirm");
        this.close();
      },
      /**
       * 取消按钮
       */
      cancel() {
        this.$emit("cancel");
        this.close();
      },
      /**
       * 变化触发
       */
      change() {
        if (!this.insert)
          return;
        this.setEmit("change");
      },
      /**
       * 选择月份触发
       */
      monthSwitch() {
        let {
          year,
          month
        } = this.nowDate;
        this.$emit("monthSwitch", {
          year,
          month: Number(month)
        });
      },
      /**
       * 派发事件
       * @param {Object} name
       */
      setEmit(name2) {
        let {
          year,
          month,
          date: date2,
          fullDate,
          lunar,
          extraInfo,
          type,
          mode
        } = this.calendar;
        let params = {
          range: this.cale.rangeStatus,
          multiple: this.cale.multiple,
          mode,
          type,
          year,
          month: Number(month),
          date: date2,
          fulldate: fullDate,
          lunar,
          extraInfo: extraInfo || {}
        };
        if (this.type === "month" || this.type === "week") {
          params.foldStatus = this.FoldStatus;
        }
        this.$emit(name2, params);
      },
      /**
       * 选择天触发
       * @param {Object} weeks
       */
      choiceDate(weeks) {
        if (weeks.disable || weeks.empty || this.disabledChoice)
          return;
        this.calendar = weeks;
        this.nowDate = this.calendar;
        this.cale.setRange(this.calendar.fullDate);
        this.cale.setMultiple(this.calendar.fullDate);
        if (this.slideSwitchMode !== "none") {
          let weekName = "";
          switch (this.swiperCurrent) {
            case 0:
              weekName = "preWeeks";
              if (this.mode == "range") {
                this.weeks = this.cale._getWeek(this.weeks[0].find((item) => item.fullDate).fullDate, false);
                this.nextWeeks = this.cale._getWeek(
                  this.nextWeeks[0].find((item) => item.fullDate).fullDate,
                  false
                );
              }
              break;
            case 1:
              weekName = "weeks";
              if (this.mode == "range") {
                this.preWeeks = this.cale._getWeek(
                  this.preWeeks[0].find((item) => item.fullDate).fullDate,
                  false
                );
                this.nextWeeks = this.cale._getWeek(
                  this.nextWeeks[0].find((item) => item.fullDate).fullDate,
                  false
                );
              }
              break;
            case 2:
              weekName = "nextWeeks";
              if (this.mode == "range") {
                this.weeks = this.cale._getWeek(this.weeks[0].find((item) => item.fullDate).fullDate, false);
                this.preWeeks = this.cale._getWeek(
                  this.preWeeks[0].find((item) => item.fullDate).fullDate,
                  false
                );
              }
              break;
          }
          this[weekName] = this.cale.weeks;
        } else {
          this.weeks = this.cale.weeks;
        }
        this.change();
      },
      /**
       * 回到今天
       */
      backToday() {
        const nowYearMonth = `${this.nowDate.year}-${this.nowDate.month}`;
        if (this.cale.rangeStatus.before && !this.cale.rangeStatus.after) {
          this.cale.rangeStatus.before = "";
        }
        this.setDate(this.cale.date.fullDate);
        let date2 = this.nowDate;
        this.calendar = date2;
        this.cale.setRange(date2.fullDate);
        const todayYearMonth = `${date2.year}-${date2.month}`;
        if (nowYearMonth !== todayYearMonth) {
          this.monthSwitch();
        }
        this.setDate(this.cale.date.fullDate);
        this.swiperCurrentChangeWeeks();
        this.change();
      },
      /**
       * 上个月
       */
      pre() {
        this.swiperChangeDirection = "pre";
        this.updateWeeks();
      },
      /**
       * 下个月
       */
      next() {
        this.swiperChangeDirection = "next";
        this.updateWeeks();
      },
      /**
       * 设置日期
       * @param {Object} date
       */
      setDate(date2) {
        this.cale.setDate(date2);
        this.nowDate = this.cale.getInfo(date2);
        this.assignmentWeeks();
      },
      /**
       * 用来将cale.weeks 赋值到 weeks
       */
      assignmentWeeks() {
        let weekName = "";
        let weekMonthName = "";
        switch (this.swiperCurrent) {
          case 0:
            weekName = "preWeeks";
            weekMonthName = "preWeeksMonth";
            break;
          case 1:
            weekName = "weeks";
            weekMonthName = "weeksMonth";
            break;
          case 2:
            weekName = "nextWeeks";
            weekMonthName = "nextWeeksMonth";
            break;
        }
        this[weekName] = this.cale.weeks;
        this[weekMonthName] = this.cale.selectDate.month;
      },
      /**
       * 滑动切换日期
       */
      swiperChange(e) {
        if (e.detail.source !== "touch")
          return;
        let curr = e.detail.current;
        if (curr - this.swiperCurrent == 1 || curr - this.swiperCurrent == -2) {
          this.swiperChangeDirection = "next";
        } else {
          this.swiperChangeDirection = "pre";
        }
        this.swiperCurrent = curr;
        this.updateWeeks();
      },
      /**
       * 更新weeks
       * @param {Boolean} isChange 是否使当前的weeks发生变化
       */
      updateWeeks(isChange = true) {
        let newFullDate = "";
        if (isChange) {
          let fullDate = this.FoldStatus === "close" ? this.nowDate.fullDate : `${this.nowDate.year}-${this.nowDate.month}-${1}`;
          newFullDate = this.cale.getDate(fullDate, this.swiperChangeDirection === "next" ? 1 : -1, this.getDateType).fullDate;
        } else {
          newFullDate = this.cale.getDate(this.nowDate.fullDate, 0, this.getDateType).fullDate;
        }
        this.setDate(newFullDate);
        this.swiperCurrentChangeWeeks();
        this.monthSwitch();
      },
      /**
       * swiperCurrent改变需要改动的weeks
       */
      swiperCurrentChangeWeeks() {
        if (this.slideSwitchMode === "none")
          return;
        this.$nextTick(() => {
          let nextDate = this.cale.getDate(this.nowDate.fullDate, 1, this.getDateType);
          let nextWeeks = this.cale._getWeek(nextDate.fullDate, false);
          let nextWeeksMonth = nextDate.month;
          let preDate = this.cale.getDate(this.nowDate.fullDate, -1, this.getDateType);
          let preWeeks = this.cale._getWeek(preDate.fullDate, false);
          let preWeeksMonth = preDate.month;
          if (this.swiperCurrent == 0) {
            this.weeks = nextWeeks;
            this.weeksMonth = nextWeeksMonth;
            this.nextWeeks = preWeeks;
            this.nextWeeksMonth = preWeeksMonth;
          } else if (this.swiperCurrent == 1) {
            this.nextWeeks = nextWeeks;
            this.nextWeeksMonth = nextWeeksMonth;
            this.preWeeks = preWeeks;
            this.preWeeksMonth = preWeeksMonth;
          } else {
            this.preWeeks = nextWeeks;
            this.preWeeksMonth = nextWeeksMonth;
            this.weeks = preWeeks;
            this.weeksMonth = preWeeksMonth;
          }
        });
      },
      // 点击折叠
      FoldClick() {
        this.FoldStatus = this.FoldStatus === "open" ? "close" : "open";
        this.cale.resetFoldStatus(this.FoldStatus);
        this.setDate(this.nowDate.fullDate);
        this.$nextTick(() => {
          if (this.slideSwitchMode !== "none") {
            let nextDate = this.cale.getDate(this.nowDate.fullDate, 1, this.getDateType);
            let nextWeeks = this.cale._getWeek(nextDate.fullDate, false);
            let nextWeeksMonth = nextDate.month;
            let preDate = this.cale.getDate(this.nowDate.fullDate, -1, this.getDateType);
            let preWeeks = this.cale._getWeek(preDate.fullDate, false);
            let preWeeksMonth = preDate.month;
            if (this.swiperChangeDirection == "next") {
              if (this.swiperCurrent == 0) {
                this.weeks = nextWeeks;
                this.weeksMonth = nextWeeksMonth;
                this.nextWeeks = preWeeks;
                this.nextWeeksMonth = preWeeksMonth;
              } else if (this.swiperCurrent == 1) {
                this.nextWeeks = nextWeeks;
                this.nextWeeksMonth = nextWeeksMonth;
                this.preWeeks = preWeeks;
                this.preWeeksMonth = preWeeksMonth;
              } else {
                this.preWeeks = nextWeeks;
                this.preWeeksMonth = nextWeeksMonth;
                this.weeks = preWeeks;
                this.weeksMonth = preWeeksMonth;
              }
            } else {
              if (this.swiperCurrent == 0) {
                this.nextWeeks = preWeeks;
                this.nextWeeksMonth = preWeeksMonth;
                this.weeks = nextWeeks;
                this.weeksMonth = nextWeeksMonth;
              } else if (this.swiperCurrent == 1) {
                this.preWeeks = preWeeks;
                this.preWeeksMonth = preWeeksMonth;
                this.nextWeeks = nextWeeks;
                this.nextWeeksMonth = nextWeeksMonth;
              } else {
                this.weeks = preWeeks;
                this.weeksMonth = preWeeksMonth;
                this.preWeeks = nextWeeks;
                this.preWeeksMonth = nextWeeksMonth;
              }
            }
          }
        });
        this.$emit("foldSwitch", {
          type: this.type,
          status: this.FoldStatus
        });
      },
      // 初始化折叠
      initFold() {
        if (this.type === "month" || this.type === "week") {
          this.Fold = this.fold === null ? this.type !== "month" : this.fold;
          this.FoldStatus = this.type !== "month" ? "close" : "open";
        }
      }
    }
  };
  function _sfc_render$c(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_wu_calendar_block = resolveEasycom(vue.resolveDynamicComponent("wu-calendar-block"), __easycom_0);
    const _component_wu_icon = resolveEasycom(vue.resolveDynamicComponent("wu-icon"), __easycom_1$1);
    const _component_wu_safe_bottom = resolveEasycom(vue.resolveDynamicComponent("wu-safe-bottom"), __easycom_2);
    return vue.openBlock(), vue.createElementBlock("view", {
      class: "wu-calendar",
      onClick: _cache[15] || (_cache[15] = vue.withModifiers(() => {
      }, ["stop"]))
    }, [
      !_ctx.insert && $data.show ? (vue.openBlock(), vue.createElementBlock(
        "view",
        {
          key: 0,
          class: vue.normalizeClass(["wu-calendar__mask", { "wu-calendar--mask-show": $data.aniMaskShow }]),
          onClick: _cache[0] || (_cache[0] = (...args) => $options.clean && $options.clean(...args))
        },
        null,
        2
        /* CLASS */
      )) : vue.createCommentVNode("v-if", true),
      _ctx.insert || $data.show ? (vue.openBlock(), vue.createElementBlock(
        "view",
        {
          key: 1,
          class: vue.normalizeClass(["wu-calendar__content", { "wu-calendar--fixed": !_ctx.insert, "wu-calendar--ani-show": $data.aniMaskShow }])
        },
        [
          vue.createCommentVNode(" 弹窗日历取消与确认按钮位置 "),
          _ctx.operationPosition == "top" ? vue.renderSlot(_ctx.$slots, "operation", { key: 0 }, () => [
            !_ctx.insert ? (vue.openBlock(), vue.createElementBlock("view", {
              key: 0,
              class: "wu-calendar__header wu-calendar--fixed-top"
            }, [
              vue.createElementVNode("view", {
                class: "wu-calendar__header-btn-box",
                onClick: _cache[1] || (_cache[1] = (...args) => $options.cancel && $options.cancel(...args))
              }, [
                vue.createElementVNode(
                  "text",
                  { class: "wu-calendar__header-text wu-calendar--fixed-width" },
                  vue.toDisplayString($options.cancelText),
                  1
                  /* TEXT */
                )
              ]),
              vue.createElementVNode("view", {
                class: "wu-calendar__header-btn-box",
                onClick: _cache[2] || (_cache[2] = (...args) => $options.confirm && $options.confirm(...args))
              }, [
                vue.createElementVNode(
                  "text",
                  { class: "wu-calendar__header-text wu-calendar--fixed-width" },
                  vue.toDisplayString($options.okText),
                  1
                  /* TEXT */
                )
              ])
            ])) : vue.createCommentVNode("v-if", true)
          ], true) : vue.createCommentVNode("v-if", true),
          vue.createCommentVNode(" 日历头部 "),
          vue.renderSlot(_ctx.$slots, "header", { nowDate: $data.nowDate }, () => [
            vue.createElementVNode("view", { class: "wu-calendar__header" }, [
              vue.createCommentVNode(" 纵向滑动切换展示内容 "),
              _ctx.slideSwitchMode == "vertical" ? (vue.openBlock(), vue.createElementBlock(
                vue.Fragment,
                { key: 0 },
                [
                  vue.createElementVNode("view", { class: "wu-calendar__header-btn-box vertical" }, [
                    vue.createElementVNode("view", {
                      class: "wu-calendar__header-btn wu-calendar--top",
                      onClick: _cache[3] || (_cache[3] = vue.withModifiers((...args) => $options.pre && $options.pre(...args), ["stop"]))
                    }),
                    vue.createElementVNode("picker", {
                      mode: "date",
                      value: $data.nowDate.fullDate,
                      fields: "month",
                      onChange: _cache[4] || (_cache[4] = (...args) => $options.bindDateChange && $options.bindDateChange(...args))
                    }, [
                      vue.createElementVNode(
                        "text",
                        { class: "wu-calendar__header-text" },
                        vue.toDisplayString(($data.nowDate.year || "") + $options.YearText + ($data.nowDate.month || "") + $options.MonthText),
                        1
                        /* TEXT */
                      )
                    ], 40, ["value"]),
                    vue.createElementVNode("view", {
                      class: "wu-calendar__header-btn wu-calendar--bottom",
                      onClick: _cache[5] || (_cache[5] = vue.withModifiers((...args) => $options.next && $options.next(...args), ["stop"]))
                    })
                  ]),
                  vue.createElementVNode(
                    "text",
                    {
                      class: "wu-calendar__backtoday vertical",
                      onClick: _cache[6] || (_cache[6] = (...args) => $options.backToday && $options.backToday(...args))
                    },
                    vue.toDisplayString($options.todayText),
                    1
                    /* TEXT */
                  )
                ],
                64
                /* STABLE_FRAGMENT */
              )) : (vue.openBlock(), vue.createElementBlock(
                vue.Fragment,
                { key: 1 },
                [
                  vue.createCommentVNode(" 横向滑动与无滑动展示内容 "),
                  vue.createElementVNode("view", {
                    class: "wu-calendar__header-btn-box horizontal",
                    onClick: _cache[7] || (_cache[7] = vue.withModifiers((...args) => $options.pre && $options.pre(...args), ["stop"]))
                  }, [
                    vue.createElementVNode("view", { class: "wu-calendar__header-btn wu-calendar--left" })
                  ]),
                  vue.createElementVNode("picker", {
                    mode: "date",
                    value: $data.nowDate.fullDate,
                    fields: "month",
                    onChange: _cache[8] || (_cache[8] = (...args) => $options.bindDateChange && $options.bindDateChange(...args))
                  }, [
                    vue.createElementVNode(
                      "text",
                      { class: "wu-calendar__header-text" },
                      vue.toDisplayString(($data.nowDate.year || "") + $options.YearText + ($data.nowDate.month || "") + $options.MonthText),
                      1
                      /* TEXT */
                    )
                  ], 40, ["value"]),
                  vue.createElementVNode("view", {
                    class: "wu-calendar__header-btn-box horizontal",
                    onClick: _cache[9] || (_cache[9] = vue.withModifiers((...args) => $options.next && $options.next(...args), ["stop"]))
                  }, [
                    vue.createElementVNode("view", { class: "wu-calendar__header-btn wu-calendar--right" })
                  ]),
                  vue.createElementVNode(
                    "text",
                    {
                      class: "wu-calendar__backtoday",
                      onClick: _cache[10] || (_cache[10] = (...args) => $options.backToday && $options.backToday(...args))
                    },
                    vue.toDisplayString($options.todayText),
                    1
                    /* TEXT */
                  )
                ],
                64
                /* STABLE_FRAGMENT */
              ))
            ])
          ], true),
          vue.createElementVNode("view", { class: "wu-calendar__box" }, [
            vue.createElementVNode("view", { class: "wu-calendar__weeks" }, [
              _ctx.startWeek === "sun" ? (vue.openBlock(), vue.createElementBlock("view", {
                key: 0,
                class: "wu-calendar__weeks-day"
              }, [
                vue.createElementVNode(
                  "text",
                  { class: "wu-calendar__weeks-day-text" },
                  vue.toDisplayString($options.SUNText),
                  1
                  /* TEXT */
                )
              ])) : vue.createCommentVNode("v-if", true),
              vue.createElementVNode("view", { class: "wu-calendar__weeks-day" }, [
                vue.createElementVNode(
                  "text",
                  { class: "wu-calendar__weeks-day-text" },
                  vue.toDisplayString($options.monText),
                  1
                  /* TEXT */
                )
              ]),
              vue.createElementVNode("view", { class: "wu-calendar__weeks-day" }, [
                vue.createElementVNode(
                  "text",
                  { class: "wu-calendar__weeks-day-text" },
                  vue.toDisplayString($options.TUEText),
                  1
                  /* TEXT */
                )
              ]),
              vue.createElementVNode("view", { class: "wu-calendar__weeks-day" }, [
                vue.createElementVNode(
                  "text",
                  { class: "wu-calendar__weeks-day-text" },
                  vue.toDisplayString($options.WEDText),
                  1
                  /* TEXT */
                )
              ]),
              vue.createElementVNode("view", { class: "wu-calendar__weeks-day" }, [
                vue.createElementVNode(
                  "text",
                  { class: "wu-calendar__weeks-day-text" },
                  vue.toDisplayString($options.THUText),
                  1
                  /* TEXT */
                )
              ]),
              vue.createElementVNode("view", { class: "wu-calendar__weeks-day" }, [
                vue.createElementVNode(
                  "text",
                  { class: "wu-calendar__weeks-day-text" },
                  vue.toDisplayString($options.FRIText),
                  1
                  /* TEXT */
                )
              ]),
              vue.createElementVNode("view", { class: "wu-calendar__weeks-day" }, [
                vue.createElementVNode(
                  "text",
                  { class: "wu-calendar__weeks-day-text" },
                  vue.toDisplayString($options.SATText),
                  1
                  /* TEXT */
                )
              ]),
              _ctx.startWeek === "mon" ? (vue.openBlock(), vue.createElementBlock("view", {
                key: 1,
                class: "wu-calendar__weeks-day"
              }, [
                vue.createElementVNode(
                  "text",
                  { class: "wu-calendar__weeks-day-text" },
                  vue.toDisplayString($options.SUNText),
                  1
                  /* TEXT */
                )
              ])) : vue.createCommentVNode("v-if", true)
            ]),
            vue.createCommentVNode(" 滑动切换 "),
            _ctx.slideSwitchMode !== "none" ? (vue.openBlock(), vue.createElementBlock("swiper", {
              key: 0,
              class: "wu-calendar__weeks_container",
              style: vue.normalizeStyle([$options.calendarContentStyle]),
              duration: 500,
              vertical: _ctx.slideSwitchMode == "vertical",
              circular: "",
              current: $data.swiperCurrent,
              onChange: _cache[11] || (_cache[11] = (...args) => $options.swiperChange && $options.swiperChange(...args)),
              "skip-hidden-item-layout": ""
            }, [
              vue.createCommentVNode(" 月或周日历 "),
              _ctx.type === "month" || _ctx.type === "week" ? (vue.openBlock(), vue.createElementBlock(
                vue.Fragment,
                { key: 0 },
                [
                  vue.createElementVNode("swiper-item", null, [
                    vue.createVNode(_component_wu_calendar_block, {
                      weeks: $data.preWeeks,
                      calendar: $data.calendar,
                      selected: _ctx.selected,
                      lunar: _ctx.lunar,
                      onChange: $options.choiceDate,
                      color: _ctx.color,
                      actBadgeColor: _ctx.actBadgeColor,
                      startText: _ctx.startText,
                      endText: _ctx.endText,
                      month: $data.preWeeksMonth,
                      FoldStatus: $data.FoldStatus,
                      monthShowCurrentMonth: _ctx.monthShowCurrentMonth,
                      showMonth: _ctx.showMonth,
                      itemHeight: _ctx.itemHeight
                    }, null, 8, ["weeks", "calendar", "selected", "lunar", "onChange", "color", "actBadgeColor", "startText", "endText", "month", "FoldStatus", "monthShowCurrentMonth", "showMonth", "itemHeight"])
                  ]),
                  vue.createElementVNode("swiper-item", null, [
                    vue.createVNode(_component_wu_calendar_block, {
                      weeks: $data.weeks,
                      calendar: $data.calendar,
                      selected: _ctx.selected,
                      lunar: _ctx.lunar,
                      onChange: $options.choiceDate,
                      color: _ctx.color,
                      actBadgeColor: _ctx.actBadgeColor,
                      startText: _ctx.startText,
                      endText: _ctx.endText,
                      monthShowCurrentMonth: _ctx.monthShowCurrentMonth,
                      month: $data.weeksMonth,
                      FoldStatus: $data.FoldStatus,
                      showMonth: _ctx.showMonth,
                      itemHeight: _ctx.itemHeight
                    }, null, 8, ["weeks", "calendar", "selected", "lunar", "onChange", "color", "actBadgeColor", "startText", "endText", "monthShowCurrentMonth", "month", "FoldStatus", "showMonth", "itemHeight"])
                  ]),
                  vue.createElementVNode("swiper-item", null, [
                    vue.createVNode(_component_wu_calendar_block, {
                      weeks: $data.nextWeeks,
                      calendar: $data.calendar,
                      selected: _ctx.selected,
                      lunar: _ctx.lunar,
                      onChange: $options.choiceDate,
                      color: _ctx.color,
                      actBadgeColor: _ctx.actBadgeColor,
                      startText: _ctx.startText,
                      endText: _ctx.endText,
                      month: $data.nextWeeksMonth,
                      FoldStatus: $data.FoldStatus,
                      monthShowCurrentMonth: _ctx.monthShowCurrentMonth,
                      showMonth: _ctx.showMonth,
                      itemHeight: _ctx.itemHeight
                    }, null, 8, ["weeks", "calendar", "selected", "lunar", "onChange", "color", "actBadgeColor", "startText", "endText", "month", "FoldStatus", "monthShowCurrentMonth", "showMonth", "itemHeight"])
                  ])
                ],
                64
                /* STABLE_FRAGMENT */
              )) : vue.createCommentVNode("v-if", true)
            ], 44, ["vertical", "current"])) : (vue.openBlock(), vue.createElementBlock(
              vue.Fragment,
              { key: 1 },
              [
                vue.createCommentVNode(" 无滑动切换 "),
                vue.createCommentVNode(" 月或周日历 "),
                vue.createVNode(_component_wu_calendar_block, {
                  class: "wu-calendar__weeks_container",
                  style: vue.normalizeStyle([$options.calendarContentStyle]),
                  weeks: $data.weeks,
                  calendar: $data.calendar,
                  selected: _ctx.selected,
                  lunar: _ctx.lunar,
                  onChange: $options.choiceDate,
                  color: _ctx.color,
                  actBadgeColor: _ctx.actBadgeColor,
                  startText: _ctx.startText,
                  endText: _ctx.endText,
                  month: $data.nowDate.month,
                  FoldStatus: $data.FoldStatus,
                  monthShowCurrentMonth: _ctx.monthShowCurrentMonth,
                  showMonth: _ctx.showMonth,
                  itemHeight: _ctx.itemHeight
                }, null, 8, ["style", "weeks", "calendar", "selected", "lunar", "onChange", "color", "actBadgeColor", "startText", "endText", "month", "FoldStatus", "monthShowCurrentMonth", "showMonth", "itemHeight"])
              ],
              64
              /* STABLE_FRAGMENT */
            ))
          ]),
          _ctx.type !== "year" && $data.Fold ? (vue.openBlock(), vue.createElementBlock("view", {
            key: 1,
            class: "wu-calendar__fold",
            onClick: _cache[12] || (_cache[12] = (...args) => $options.FoldClick && $options.FoldClick(...args))
          }, [
            $data.FoldStatus == "open" ? (vue.openBlock(), vue.createBlock(_component_wu_icon, {
              key: 0,
              name: "arrow-up",
              bold: "",
              size: "18"
            })) : $data.FoldStatus == "close" ? (vue.openBlock(), vue.createBlock(_component_wu_icon, {
              key: 1,
              name: "arrow-down",
              bold: "",
              size: "18"
            })) : vue.createCommentVNode("v-if", true)
          ])) : vue.createCommentVNode("v-if", true),
          vue.createCommentVNode(" 弹窗日历取消与确认按钮位置 "),
          _ctx.operationPosition == "bottom" ? vue.renderSlot(_ctx.$slots, "operation", { key: 2 }, () => [
            !_ctx.insert ? (vue.openBlock(), vue.createElementBlock("view", {
              key: 0,
              class: "wu-calendar__header wu-calendar--fixed-top"
            }, [
              vue.createElementVNode("view", {
                class: "wu-calendar__header-btn-box",
                onClick: _cache[13] || (_cache[13] = (...args) => $options.cancel && $options.cancel(...args))
              }, [
                vue.createElementVNode(
                  "text",
                  { class: "wu-calendar__header-text wu-calendar--fixed-width" },
                  vue.toDisplayString($options.cancelText),
                  1
                  /* TEXT */
                )
              ]),
              vue.createElementVNode("view", {
                class: "wu-calendar__header-btn-box",
                onClick: _cache[14] || (_cache[14] = (...args) => $options.confirm && $options.confirm(...args))
              }, [
                vue.createElementVNode(
                  "text",
                  { class: "wu-calendar__header-text wu-calendar--fixed-width" },
                  vue.toDisplayString($options.okText),
                  1
                  /* TEXT */
                )
              ])
            ])) : vue.createCommentVNode("v-if", true)
          ], true) : vue.createCommentVNode("v-if", true),
          !_ctx.insert && $data.show ? (vue.openBlock(), vue.createBlock(_component_wu_safe_bottom, { key: 3 })) : vue.createCommentVNode("v-if", true)
        ],
        2
        /* CLASS */
      )) : vue.createCommentVNode("v-if", true)
    ]);
  }
  const __easycom_1 = /* @__PURE__ */ _export_sfc(_sfc_main$d, [["render", _sfc_render$c], ["__scopeId", "data-v-bc534f10"], ["__file", "D:/HLTrip/hl/uni_modules/wu-calendar/components/wu-calendar/wu-calendar.vue"]]);
  const _sfc_main$c = {
    data() {
      return {
        hid: 0,
        overview: {},
        houseImg: [],
        idd: 0,
        currentPic: 1,
        policies: {},
        ratePic: "",
        currentDay: {},
        addressMoudle: [],
        locationInfo: {},
        startTime: {},
        endTime: {},
        stayRange: 1,
        facilities: [],
        facilitiesbrief: [],
        facilitiesCount: 0,
        bedMsg: [],
        commentBrief: null,
        commentImages: [],
        avatars: void 0,
        features: [],
        policy: void 0,
        ntkArr: ["接待婴儿", "接待儿童", "接待老人", "接待外宾", "带宠物", "吸烟", "做饭", "聚会", "商业拍摄"],
        currentIndex1: 0,
        selected: [],
        isloading: false,
        scrollThreshold: 140,
        isFixed: false,
        islike: false,
        count: 0,
        currentTime: {},
        tel: 0
      };
    },
    onPageScroll(event) {
      if (event.scrollTop > this.scrollThreshold) {
        this.isFixed = true;
        try {
          this.$nextTick(() => {
            plus.navigator.setStatusBarStyle("dark");
          });
        } catch (error2) {
          formatAppLog("log", "at pages/hotelDetail/hotelDetail.vue:459", err);
        }
      } else {
        this.isFixed = false;
        try {
          this.$nextTick(() => {
            plus.navigator.setStatusBarStyle("light");
          });
        } catch (error2) {
          formatAppLog("log", "at pages/hotelDetail/hotelDetail.vue:468", err);
        }
      }
    },
    methods: {
      calltel() {
        uni.makePhoneCall({
          phoneNumber: this.tel,
          success: function() {
            formatAppLog("log", "at pages/hotelDetail/hotelDetail.vue:477", "拨打电话成功！");
          },
          fail: function(error2) {
            formatAppLog("error", "at pages/hotelDetail/hotelDetail.vue:480", "拨打电话失败：", error2);
          }
        });
      },
      calendarConfirm(e) {
        if (e.range.before == "" || e.range.after == "") {
          return;
        }
        if (e.range.data.length >= 1) {
          this.stayRange = e.range.data.length - 1;
        }
        this.startTime = this.getTime(new Date(e.range.before));
        this.endTime = this.getTime(new Date(e.range.after));
        uni.setStorageSync("startTime", this.startTime);
        uni.setStorageSync("endTime", this.endTime);
        uni.setStorageSync("stayRange", this.stayRange);
        formatAppLog("log", "at pages/hotelDetail/hotelDetail.vue:497", this.startTime);
        formatAppLog("log", "at pages/hotelDetail/hotelDetail.vue:498", this.endTime);
      },
      swiperChange(event) {
        this.currentPic = event.detail.current + 1;
      },
      handleRatePic() {
        let rate = this.overview.rating;
        if (rate <= 0.5) {
          this.ratePic = `../../static/image/rating${0.5}.png`;
        } else if (rate <= 1) {
          this.ratePic = `../../static/image/rating${1}.png`;
        } else if (rate <= 1.5) {
          this.ratePic = `../../static/image/rating${1.5}.png`;
        } else if (rate <= 2) {
          this.ratePic = `../../static/image/rating${2}.png`;
        } else if (rate <= 2.5) {
          this.ratePic = `../../static/image/rating${2.5}.png`;
        } else if (rate <= 3) {
          this.ratePic = `../../static/image/rating${3}.png`;
        } else if (rate <= 3.5) {
          this.ratePic = `../../static/image/rating${3.5}.png`;
        } else if (rate <= 4) {
          this.ratePic = `../../static/image/rating${4}.png`;
        } else if (rate <= 4.5) {
          this.ratePic = `../../static/image/rating${4.5}.png`;
        } else if (rate <= 5) {
          this.ratePic = `../../static/image/rating${5}.png`;
        }
      },
      getHouseData(id) {
        this.isloading = true;
        return new Promise((resolve, reject) => {
          uni.request({
            url: `${API.BASE_URL}/getHouseByHouseid`,
            //仅为示例，并非真实接口地址。
            data: {
              houseid: id,
              userid: uni.getStorageSync("userId")
            },
            success: (res) => {
              if (res.data.requestStatus == "200") {
                const resoureData = res.data.data;
                formatAppLog("log", "at pages/hotelDetail/hotelDetail.vue:539", resoureData);
                this.overview = resoureData.houseOverview;
                this.overview.rating = this.overview.rating.toFixed(1);
                this.handleRatePic();
                if (this.overview.commentcount >= 500) {
                  this.overview.commentcount = "500+";
                }
                this.houseImg = resoureData.houseImgs;
                this.policies = resoureData.policies;
                this.locationInfo = resoureData.location;
                this.facilities = resoureData.facilities;
                this.handlefacilitiesOverview(this.facilities);
                this.countFac();
                this.handleBedMsg();
                const cb = JSON.stringify(resoureData.commentBrief);
                if (cb != "{}") {
                  this.handleComBrf(resoureData.commentBrief.commentContent);
                  if (resoureData.commentBrief.hasimage) {
                    if (resoureData.commentBrief.commentImages.length >= 5) {
                      this.commentImages = resoureData.commentBrief.commentImages.slice(0, 5);
                    } else {
                      this.commentImages = resoureData.commentBrief.commentImages;
                    }
                  } else {
                    this.commentImages = [];
                  }
                } else {
                  this.commentBrief = null;
                }
                this.avatars = resoureData.avatars;
                this.features = resoureData.features;
                this.policy = resoureData.policies;
                this.policy.needtoknow = this.policy.needtoknow.split("");
                this.handlePolicyText();
                this.selected = resoureData.bookingTimeList;
                this.islike = resoureData.islike;
                this.tel = resoureData.landlordTel;
                resolve(res.data.data.location.location);
              }
              reject("请求失败");
            }
          });
        });
      },
      getTransportInfo(location) {
        uni.request({
          url: "https://restapi.amap.com/v3/geocode/regeo",
          data: {
            key: "ca5638622884957be4cff8d31d00b1b0",
            location,
            poitype: "150100|150200|150300|150400|150500|150600|150700|150800|150900",
            radius: 3e3,
            extensions: "all"
          },
          success: (res) => {
            if (res.data.info == "OK") {
              const poi = res.data.regeocode.pois[0];
              poi.distance = Math.round(parseFloat(poi.distance));
              this.addressMoudle.push(poi);
            }
          }
        });
        uni.request({
          url: "https://restapi.amap.com/v3/geocode/regeo",
          data: {
            key: "ca5638622884957be4cff8d31d00b1b0",
            location,
            poitype: "110000",
            radius: 3e3,
            extensions: "all"
          },
          success: (res) => {
            if (res.data.info == "OK") {
              const poi = res.data.regeocode.pois[0];
              poi.distance = Math.round(parseFloat(poi.distance));
              this.addressMoudle.push(poi);
            }
          }
        });
      },
      async fetchData(id) {
        const data2 = await this.getHouseData(id);
        formatAppLog("log", "at pages/hotelDetail/hotelDetail.vue:624", data2);
        this.getTransportInfo(data2);
      },
      countFac() {
        this.facilities.forEach((element) => {
          element.items.forEach((element2) => {
            if (element2.vaild) {
              this.facilitiesCount++;
            }
          });
        });
      },
      handlefacilitiesOverview(data2) {
        let newfb = data2.slice(0, 4);
        newfb.forEach((element) => {
          const obj = {
            group: "",
            items: []
          };
          obj.group = element.group;
          for (let index2 = 0; index2 < 6; index2++) {
            if (element.items[index2] == void 0) {
              return false;
            }
            if (element.items[index2].vaild) {
              obj.items.push(element.items[index2]);
            }
          }
          this.facilitiesbrief.push(obj);
        });
      },
      handleBedMsg() {
        if (this.overview.bed218 != 0) {
          this.bedMsg.push({
            bedDesc: "双人床 2.00m × 1.80m",
            count: this.overview.bed218
          });
        }
        if (this.overview.bed215 != 0) {
          this.bedMsg.push({
            bedDesc: "大床 2.00m × 1.50m",
            count: this.overview.bed215
          });
        }
        if (this.overview.bed212 != 0) {
          this.bedMsg.push({
            bedDesc: "单人床 2.00m × 1.20m",
            count: this.overview.bed212
          });
        }
        if (this.overview.tatami != "") {
          const arr = this.overview.tatami.split(",");
          this.bedMsg.push({
            bedDesc: "榻榻米 " + arr[0],
            count: arr[1]
          });
        }
      },
      handleComBrf(data2) {
        let arr = [];
        arr.push({
          desc: "整洁卫生",
          rating: data2.cleanliness.toFixed(1)
        });
        arr.push({
          desc: "描述相符",
          rating: data2.accuracy.toFixed(1)
        });
        arr.push({
          desc: "交通位置",
          rating: data2.locationtransport.toFixed(1)
        });
        arr.push({
          desc: "安全程度",
          rating: data2.safety.toFixed(1)
        });
        arr.push({
          desc: "性价比",
          rating: data2.valueformmoney.toFixed(1)
        });
        delete data2.cleanliness;
        delete data2.accuracy;
        delete data2.locationtransport;
        delete data2.safety;
        delete data2.valueformmoney;
        data2.rating = data2.rating.toFixed(1);
        data2.rateDetail = arr;
        data2.commenttime = this.getTime(new Date(data2.commenttime));
        this.commentBrief = data2;
      },
      getTime(dateObj) {
        const year = dateObj.getFullYear();
        const month = dateObj.getMonth() + 1;
        const date2 = dateObj.getDate();
        const day = dateObj.getDay();
        return {
          year,
          month: month.toString().padStart(2, "0"),
          date: date2.toString().padStart(2, "0"),
          day,
          arr: ["日", "一", "二", "三", "四", "五", "六"],
          timestamp: dateObj
        };
      },
      handlePolicyText() {
        let str = "";
        for (let i = 0; i < this.policy.needtoknow.length; i++) {
          if (this.policy.needtoknow[i] == "1") {
            str = str + `允许${this.ntkArr[i]}；`;
          } else {
            str = str + `不允许${this.ntkArr[i]}；`;
          }
        }
        this.policy.ntkText = str;
      },
      openntkPopup() {
        this.$refs.ntkpopup.open("bottom");
      },
      openfacPopup() {
        this.$refs.facpopup.open("bottom");
      },
      openfeaPopup() {
        this.$refs.feapopup.open("bottom");
      },
      changeIndex(i) {
        this.currentIndex1 = i;
      },
      nvgToMapview() {
        uni.navigateTo({
          url: `/pages/mapView/mapView?location=${this.locationInfo.location}`
        });
      },
      goGallery() {
        uni.navigateTo({
          url: `/pages/picDetail/picDetail`
        });
        uni.$emit("sendPicList", this.houseImg);
      },
      toComDet() {
        uni.navigateTo({
          url: `/pages/getFullComment/getFullComment?total=${this.overview.commentcount}&houseid=${this.overview.houseid}`
        });
      },
      openLD() {
        uni.navigateTo({
          url: `/pages/landLordDetail/landLordDetail?landlordid=${this.overview.landlordid}`
        });
      },
      openCalendar() {
        this.$refs.calendar.open();
      },
      naback() {
        uni.navigateBack();
      },
      likehouse() {
        this.islike = !this.islike;
        uni.request({
          url: `${API.BASE_URL}/favorHouse`,
          data: {
            houseid: this.overview.houseid,
            userid: uni.getStorageSync("userId")
          }
        });
      },
      toCheck() {
        const overview = this.overview;
        const policy = this.policy;
        uni.navigateTo({
          url: `/pages/commitOrder/commitOrder?houseid=${overview.houseid}&housename=${overview.housename}&houseType=${overview.rentaltype}&maxPeople=${overview.maxguests}&roomcount=${overview.roomcount}&bathcount=${overview.bathroomcount}&cancleRule=${policy.cancelpolicy}&deposit=${policy.deposit}&price=${overview.discountprice}&oprice=${overview.originalprice}&lid=${overview.landlordid}`
        });
      }
    },
    onLoad: async function(option) {
      this.currentTime = this.getTime(/* @__PURE__ */ new Date());
      try {
        this.$nextTick(() => {
          plus.navigator.setStatusBarStyle("light");
        });
      } catch (error2) {
        formatAppLog("log", "at pages/hotelDetail/hotelDetail.vue:807", err);
      }
      this.hid = option.houseid;
      await this.fetchData(option.houseid);
      this.isloading = false;
      this.startTime = uni.getStorageSync("startTime");
      this.endTime = uni.getStorageSync("endTime");
      this.stayRange = uni.getStorageSync("stayRange");
      this.currentDay = this.getTime(/* @__PURE__ */ new Date());
    },
    mounted() {
      try {
        this.$nextTick(() => {
          plus.navigator.setStatusBarStyle("light");
        });
      } catch (error2) {
        formatAppLog("log", "at pages/hotelDetail/hotelDetail.vue:825", err);
      }
    },
    onBackPress(options) {
      formatAppLog("log", "at pages/hotelDetail/hotelDetail.vue:830", this.overview);
      let hid = this.overview.houseid;
      const obj = { hid, islike: this.islike };
      uni.$emit("changeid", obj);
      if (options.from === "navigateBack") {
        return false;
      }
      uni.navigateBack();
      return true;
    }
  };
  function _sfc_render$b(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_uni_popup = resolveEasycom(vue.resolveDynamicComponent("uni-popup"), __easycom_1$2);
    const _component_wu_calendar = resolveEasycom(vue.resolveDynamicComponent("wu-calendar"), __easycom_1);
    return vue.openBlock(), vue.createElementBlock("view", null, [
      vue.createElementVNode(
        "view",
        {
          class: vue.normalizeClass(["statusbar", { "bgwhite": $data.isFixed }])
        },
        null,
        2
        /* CLASS */
      ),
      vue.createElementVNode(
        "view",
        {
          class: vue.normalizeClass(["topbar", { "bgwhite": $data.isFixed }])
        },
        [
          vue.createElementVNode("view", {
            class: "left",
            onClick: _cache[0] || (_cache[0] = (...args) => $options.naback && $options.naback(...args))
          }, [
            !$data.isFixed ? (vue.openBlock(), vue.createElementBlock("image", {
              key: 0,
              class: "topbar-icon leftIco",
              src: "/static/image/icon/back_white.png",
              mode: "aspectFit"
            })) : vue.createCommentVNode("v-if", true),
            $data.isFixed ? (vue.openBlock(), vue.createElementBlock("image", {
              key: 1,
              class: "topbar-icon leftIco",
              src: "/static/image/icon/back_balck.png",
              mode: "aspectFit"
            })) : vue.createCommentVNode("v-if", true)
          ]),
          vue.createElementVNode("view", { class: "right" }, [
            !$data.isFixed ? (vue.openBlock(), vue.createElementBlock("image", {
              key: 0,
              class: "topbar-icon rightIco",
              src: "/static/image/icon/message_white.png",
              mode: "aspectFit"
            })) : vue.createCommentVNode("v-if", true),
            $data.isFixed ? (vue.openBlock(), vue.createElementBlock("image", {
              key: 1,
              class: "topbar-icon rightIco",
              src: "/static/image/icon/message_black.png",
              mode: "aspectFit"
            })) : vue.createCommentVNode("v-if", true)
          ])
        ],
        2
        /* CLASS */
      ),
      vue.createElementVNode("view", { class: "navigatorbar" }),
      !$data.isloading ? (vue.openBlock(), vue.createElementBlock("scroll-view", {
        key: 0,
        "scroll-y": "true",
        class: "detailParent"
      }, [
        vue.createCommentVNode(" 轮播图 "),
        vue.createElementVNode("view", { class: "swiper-wrap" }, [
          vue.createElementVNode(
            "swiper",
            {
              class: "swiper",
              circular: true,
              autoplay: true,
              onChange: _cache[2] || (_cache[2] = (...args) => $options.swiperChange && $options.swiperChange(...args))
            },
            [
              (vue.openBlock(true), vue.createElementBlock(
                vue.Fragment,
                null,
                vue.renderList($data.houseImg, (item, index2) => {
                  return vue.openBlock(), vue.createElementBlock("swiper-item", { key: index2 }, [
                    vue.createElementVNode("image", {
                      class: "houseImgs",
                      src: item.url,
                      mode: "aspectFill",
                      onClick: _cache[1] || (_cache[1] = (...args) => $options.goGallery && $options.goGallery(...args))
                    }, null, 8, ["src"])
                  ]);
                }),
                128
                /* KEYED_FRAGMENT */
              ))
            ],
            32
            /* HYDRATE_EVENTS */
          ),
          vue.createCommentVNode(" 图片指示器 "),
          vue.createElementVNode(
            "view",
            { class: "indicator" },
            vue.toDisplayString($data.currentPic) + "/" + vue.toDisplayString($data.houseImg.length),
            1
            /* TEXT */
          )
        ]),
        vue.createElementVNode("view", { class: "overview" }, [
          vue.createElementVNode("view", { class: "houseName" }, [
            vue.createElementVNode(
              "view",
              { class: "left" },
              vue.toDisplayString($data.overview.housename),
              1
              /* TEXT */
            ),
            vue.createElementVNode("view", { class: "right" }, [
              vue.createElementVNode("view", { class: "rating" }, [
                vue.createElementVNode(
                  "view",
                  { class: "rate" },
                  vue.toDisplayString($data.overview.rating),
                  1
                  /* TEXT */
                ),
                vue.createElementVNode("image", {
                  class: "ratePic",
                  src: $data.ratePic,
                  mode: "aspectFit"
                }, null, 8, ["src"]),
                vue.createElementVNode("view", { class: "colorblock" }),
                vue.createElementVNode(
                  "view",
                  { class: "commentCount" },
                  vue.toDisplayString($data.overview.commentcount) + "点评",
                  1
                  /* TEXT */
                )
              ])
            ])
          ]),
          vue.createElementVNode("view", { class: "houseInfo" }, [
            vue.createElementVNode("view", { class: "rentType info-item" }, [
              vue.createElementVNode("view", { class: "icowrapper" }, [
                vue.createElementVNode("image", {
                  class: "ico",
                  src: "/static/image/icon/house.png",
                  mode: "aspectFit"
                }),
                vue.createElementVNode("view", { class: "colorblock" })
              ]),
              vue.createElementVNode(
                "view",
                { class: "textBlack" },
                vue.toDisplayString($data.overview.rentaltype),
                1
                /* TEXT */
              ),
              vue.createElementVNode(
                "view",
                { class: "textGray" },
                vue.toDisplayString($data.overview.housetype),
                1
                /* TEXT */
              )
            ]),
            vue.createElementVNode("view", { class: "roomCount info-item" }, [
              vue.createElementVNode("view", { class: "icowrapper" }, [
                vue.createElementVNode("image", {
                  class: "ico roomico",
                  src: "/static/image/icon/door.png",
                  mode: "aspectFit"
                }),
                vue.createElementVNode("view", { class: "colorblock" })
              ]),
              vue.createElementVNode(
                "view",
                { class: "textBlack" },
                vue.toDisplayString($data.overview.roomcount) + "间卧室",
                1
                /* TEXT */
              ),
              vue.createElementVNode(
                "view",
                { class: "textGray" },
                vue.toDisplayString($data.overview.bathroomcount) + "卫" + vue.toDisplayString($data.overview.kitchencount) + "厨",
                1
                /* TEXT */
              )
            ]),
            vue.createElementVNode("view", { class: "bedCount info-item" }, [
              vue.createElementVNode("view", { class: "icowrapper" }, [
                vue.createElementVNode("image", {
                  class: "ico",
                  src: "/static/image/icon/bed.png",
                  mode: "aspectFit"
                }),
                vue.createElementVNode("view", { class: "colorblock" })
              ]),
              vue.createElementVNode(
                "view",
                { class: "textBlack" },
                vue.toDisplayString($data.overview.bedcount) + "床" + vue.toDisplayString($data.overview.maxguests) + "人 ",
                1
                /* TEXT */
              ),
              vue.createElementVNode("view", { class: "textGray" }, [
                $data.policies.allowaddguests == 0 ? (vue.openBlock(), vue.createElementBlock("text", { key: 0 }, "不可加客")) : (vue.openBlock(), vue.createElementBlock(
                  "text",
                  { key: 1 },
                  "加客" + vue.toDisplayString($data.policies.allowaddguests) + "一人",
                  1
                  /* TEXT */
                ))
              ])
            ])
          ]),
          vue.createElementVNode("view", { class: "addresswrapper" }, [
            vue.createElementVNode(
              "view",
              { class: "textBlack" },
              vue.toDisplayString($data.overview.address),
              1
              /* TEXT */
            ),
            $data.addressMoudle[0] ? (vue.openBlock(), vue.createElementBlock(
              "view",
              {
                key: 0,
                class: "textGray"
              },
              "-距" + vue.toDisplayString($data.addressMoudle[0].name) + "约" + vue.toDisplayString($data.addressMoudle[0].distance) + "米",
              1
              /* TEXT */
            )) : vue.createCommentVNode("v-if", true),
            $data.addressMoudle[1] ? (vue.openBlock(), vue.createElementBlock(
              "view",
              {
                key: 1,
                class: "textGray"
              },
              "-距" + vue.toDisplayString($data.addressMoudle[1].name) + "约" + vue.toDisplayString($data.addressMoudle[1].distance) + "米",
              1
              /* TEXT */
            )) : vue.createCommentVNode("v-if", true),
            vue.createElementVNode("view", {
              class: "toMap",
              onClick: _cache[3] || (_cache[3] = (...args) => $options.nvgToMapview && $options.nvgToMapview(...args))
            }, [
              vue.createElementVNode("image", {
                class: "ico",
                src: "/static/image/icon/locationOrange.png",
                mode: "aspectFit"
              }),
              vue.createElementVNode("view", { class: "text" }, "地图·周边")
            ]),
            vue.createElementVNode("view", { class: "rightarrow" }, [
              vue.createElementVNode("image", {
                class: "ico",
                src: "/static/image/icon/right.png",
                mode: "aspectFit"
              })
            ])
          ]),
          vue.createElementVNode("view", {
            class: "checkDate",
            onClick: _cache[4] || (_cache[4] = (...args) => $options.openCalendar && $options.openCalendar(...args))
          }, [
            vue.createElementVNode(
              "text",
              { class: "date" },
              vue.toDisplayString($data.startTime.month) + "月" + vue.toDisplayString($data.startTime.date) + "日",
              1
              /* TEXT */
            ),
            vue.createElementVNode("text", { class: "desc" }, "入住"),
            vue.createElementVNode(
              "text",
              { class: "date" },
              vue.toDisplayString($data.endTime.month) + "月" + vue.toDisplayString($data.endTime.date) + "日",
              1
              /* TEXT */
            ),
            vue.createElementVNode("text", { class: "desc" }, "离开"),
            vue.createElementVNode("view", { class: "right" }, [
              vue.createElementVNode(
                "text",
                { class: "stayRange" },
                vue.toDisplayString($data.stayRange) + "晚",
                1
                /* TEXT */
              ),
              vue.createElementVNode("image", {
                class: "ico",
                src: "/static/image/icon/right.png",
                mode: "aspectFit"
              })
            ])
          ]),
          vue.createElementVNode("view", { class: "facilitiesbrief" }, [
            vue.createElementVNode("view", { class: "title" }, [
              vue.createElementVNode("view", { class: "left" }, "设施/服务"),
              vue.createElementVNode("view", {
                class: "right",
                onClick: _cache[5] || (_cache[5] = (...args) => $options.openfacPopup && $options.openfacPopup(...args))
              }, [
                vue.createElementVNode(
                  "view",
                  { class: "desc" },
                  vue.toDisplayString($data.facilitiesCount) + "项设施",
                  1
                  /* TEXT */
                ),
                vue.createElementVNode("image", {
                  class: "ico",
                  src: "/static/image/icon/right.png",
                  mode: "aspectFit"
                })
              ])
            ]),
            vue.createElementVNode("view", { class: "content" }, [
              (vue.openBlock(true), vue.createElementBlock(
                vue.Fragment,
                null,
                vue.renderList($data.facilitiesbrief, (group, index2) => {
                  return vue.openBlock(), vue.createElementBlock("view", {
                    class: "fac-item",
                    key: index2
                  }, [
                    group.items.length ? (vue.openBlock(), vue.createElementBlock("view", {
                      key: 0,
                      class: "left"
                    }, [
                      vue.createElementVNode(
                        "view",
                        { class: "leftText" },
                        vue.toDisplayString(group.group),
                        1
                        /* TEXT */
                      )
                    ])) : vue.createCommentVNode("v-if", true),
                    vue.createElementVNode("view", { class: "right" }, [
                      (vue.openBlock(true), vue.createElementBlock(
                        vue.Fragment,
                        null,
                        vue.renderList(group.items, (item, index3) => {
                          return vue.openBlock(), vue.createElementBlock("view", {
                            class: "right-item",
                            key: index3
                          }, [
                            vue.createElementVNode("image", {
                              class: "ico",
                              src: "/static/image/icon/complete.png",
                              mode: "aspectFit"
                            }),
                            vue.createElementVNode(
                              "view",
                              { class: "desc" },
                              vue.toDisplayString(item.facName),
                              1
                              /* TEXT */
                            )
                          ]);
                        }),
                        128
                        /* KEYED_FRAGMENT */
                      )),
                      vue.createElementVNode("i")
                    ])
                  ]);
                }),
                128
                /* KEYED_FRAGMENT */
              ))
            ])
          ]),
          vue.createElementVNode("view", { class: "bedDetail" }, [
            vue.createElementVNode("view", { class: "title" }, [
              vue.createElementVNode("view", { class: "left" }, "床位信息")
            ]),
            vue.createElementVNode("view", { class: "content" }, [
              (vue.openBlock(true), vue.createElementBlock(
                vue.Fragment,
                null,
                vue.renderList($data.bedMsg, (item, index2) => {
                  return vue.openBlock(), vue.createElementBlock("view", {
                    class: "beditem",
                    key: index2
                  }, [
                    vue.createElementVNode("view", { class: "left" }, [
                      vue.createElementVNode(
                        "view",
                        { class: "leftText" },
                        vue.toDisplayString(item.bedDesc),
                        1
                        /* TEXT */
                      )
                    ]),
                    vue.createElementVNode("view", { class: "right" }, [
                      vue.createElementVNode(
                        "view",
                        { class: "rightText" },
                        vue.toDisplayString(item.count) + "张",
                        1
                        /* TEXT */
                      )
                    ])
                  ]);
                }),
                128
                /* KEYED_FRAGMENT */
              ))
            ])
          ]),
          $data.commentBrief ? (vue.openBlock(), vue.createElementBlock("view", {
            key: 0,
            class: "commentBrief"
          }, [
            vue.createElementVNode("view", { class: "title" }, [
              vue.createElementVNode("view", { class: "left" }, "房客点评"),
              vue.createElementVNode("view", {
                class: "right",
                onClick: _cache[6] || (_cache[6] = (...args) => $options.toComDet && $options.toComDet(...args))
              }, [
                vue.createElementVNode(
                  "view",
                  { class: "desc" },
                  vue.toDisplayString($data.overview.commentcount) + "条点评",
                  1
                  /* TEXT */
                ),
                vue.createElementVNode("image", {
                  class: "ico",
                  src: "/static/image/icon/right.png",
                  mode: "aspectFit"
                })
              ])
            ]),
            vue.createElementVNode("view", { class: "content" }, [
              vue.createElementVNode("view", { class: "top" }, [
                vue.createElementVNode("view", { class: "rate" }, [
                  vue.createElementVNode(
                    "text",
                    { class: "finalRate" },
                    vue.toDisplayString($data.commentBrief.rating),
                    1
                    /* TEXT */
                  ),
                  vue.createElementVNode("image", {
                    class: "ratePic",
                    src: $data.ratePic,
                    mode: "aspectFit"
                  }, null, 8, ["src"]),
                  vue.createElementVNode(
                    "text",
                    { class: "totalCommentCount" },
                    vue.toDisplayString(`(共${$data.overview.commentcount}条)`),
                    1
                    /* TEXT */
                  )
                ]),
                $data.commentBrief.rateDetail.length != 0 ? (vue.openBlock(), vue.createElementBlock("view", {
                  key: 0,
                  class: "rateDetail"
                }, [
                  (vue.openBlock(true), vue.createElementBlock(
                    vue.Fragment,
                    null,
                    vue.renderList($data.commentBrief.rateDetail, (item, index2) => {
                      return vue.openBlock(), vue.createElementBlock("view", {
                        class: "rateDetail-item",
                        key: index2
                      }, [
                        vue.createElementVNode(
                          "text",
                          { class: "desc" },
                          vue.toDisplayString(item.desc),
                          1
                          /* TEXT */
                        ),
                        vue.createElementVNode(
                          "text",
                          { class: "sRate" },
                          vue.toDisplayString(item.rating),
                          1
                          /* TEXT */
                        )
                      ]);
                    }),
                    128
                    /* KEYED_FRAGMENT */
                  ))
                ])) : vue.createCommentVNode("v-if", true)
              ]),
              vue.createElementVNode("view", { class: "nbottom" }, [
                $data.avatars != void 0 ? (vue.openBlock(), vue.createElementBlock("view", {
                  key: 0,
                  class: "avatar"
                }, [
                  vue.createElementVNode("view", { class: "avatar-left" }, [
                    vue.createElementVNode("image", {
                      class: "avatarPic",
                      src: $data.avatars.userAvatars,
                      mode: "aspectFill"
                    }, null, 8, ["src"])
                  ]),
                  vue.createElementVNode("view", { class: "avatar-right" }, [
                    vue.createElementVNode(
                      "view",
                      { class: "nickname" },
                      vue.toDisplayString($data.commentBrief.username),
                      1
                      /* TEXT */
                    ),
                    vue.createElementVNode("view", { class: "tar" }, [
                      vue.createElementVNode(
                        "view",
                        { class: "time" },
                        vue.toDisplayString($data.commentBrief.commenttime.year) + "年" + vue.toDisplayString($data.commentBrief.commenttime.month) + "月" + vue.toDisplayString($data.commentBrief.commenttime.date) + "日评论",
                        1
                        /* TEXT */
                      ),
                      vue.createElementVNode(
                        "view",
                        { class: "userrate" },
                        vue.toDisplayString($data.commentBrief.rating),
                        1
                        /* TEXT */
                      )
                    ])
                  ])
                ])) : vue.createCommentVNode("v-if", true),
                vue.createElementVNode(
                  "view",
                  { class: "commentContent" },
                  vue.toDisplayString($data.commentBrief.commentcontent),
                  1
                  /* TEXT */
                ),
                $data.commentImages != [] ? (vue.openBlock(), vue.createElementBlock("view", {
                  key: 1,
                  class: "picWrapper"
                }, [
                  (vue.openBlock(true), vue.createElementBlock(
                    vue.Fragment,
                    null,
                    vue.renderList($data.commentImages, (item, index2) => {
                      return vue.openBlock(), vue.createElementBlock("image", {
                        key: index2,
                        class: "comPic",
                        src: item.url,
                        mode: "scaleToFill"
                      }, null, 8, ["src"]);
                    }),
                    128
                    /* KEYED_FRAGMENT */
                  )),
                  vue.createElementVNode("i"),
                  vue.createElementVNode("i"),
                  vue.createElementVNode("i")
                ])) : vue.createCommentVNode("v-if", true)
              ])
            ])
          ])) : vue.createCommentVNode("v-if", true),
          vue.createElementVNode("view", { class: "features" }, [
            vue.createElementVNode("view", { class: "title" }, [
              vue.createElementVNode("view", { class: "left" }, "房源特色"),
              vue.createElementVNode("view", {
                class: "right",
                onClick: _cache[7] || (_cache[7] = (...args) => $options.openfeaPopup && $options.openfeaPopup(...args))
              }, [
                vue.createElementVNode("view", { class: "desc" }, "亮点周边"),
                vue.createElementVNode("image", {
                  class: "ico",
                  src: "/static/image/icon/right.png",
                  mode: "aspectFit"
                })
              ])
            ]),
            $data.features.length != 0 ? (vue.openBlock(), vue.createElementBlock("view", {
              key: 0,
              class: "content"
            }, [
              vue.createElementVNode(
                "text",
                { class: "contentText" },
                vue.toDisplayString($data.features[0].featurecontent),
                1
                /* TEXT */
              )
            ])) : vue.createCommentVNode("v-if", true)
          ]),
          vue.createElementVNode("view", { class: "landLord" }, [
            vue.createElementVNode("view", { class: "title" }, [
              vue.createElementVNode("view", { class: "left" }, "房东介绍"),
              vue.createElementVNode("view", {
                class: "right",
                onClick: _cache[8] || (_cache[8] = (...args) => $options.openLD && $options.openLD(...args))
              }, [
                vue.createElementVNode("view", { class: "desc" }, "房东主页"),
                vue.createElementVNode("image", {
                  class: "ico",
                  src: "/static/image/icon/right.png",
                  mode: "aspectFit"
                })
              ])
            ]),
            $data.avatars != void 0 ? (vue.openBlock(), vue.createElementBlock("view", {
              key: 0,
              class: "content"
            }, [
              vue.createElementVNode("view", { class: "contentWrapper" }, [
                vue.createElementVNode("view", { class: "left" }, [
                  vue.createElementVNode("image", {
                    class: "lavatar",
                    src: $data.avatars.landLordAvatars,
                    mode: "aspectFill"
                  }, null, 8, ["src"])
                ]),
                vue.createElementVNode("view", { class: "right" }, [
                  vue.createElementVNode(
                    "view",
                    { class: "nickname" },
                    vue.toDisplayString($data.overview.landlordnickname),
                    1
                    /* TEXT */
                  ),
                  vue.createElementVNode("view", { class: "text" }, "实名认证")
                ])
              ])
            ])) : vue.createCommentVNode("v-if", true)
          ]),
          vue.createElementVNode("view", { class: "policy" }, [
            vue.createElementVNode("view", { class: "title" }, [
              vue.createElementVNode("view", { class: "left" }, [
                vue.createTextVNode("预订须知 "),
                vue.createElementVNode("text", { class: "Tips" }, "(规则由房东制定)")
              ]),
              vue.createElementVNode("view", {
                class: "right",
                onClick: _cache[9] || (_cache[9] = (...args) => $options.openntkPopup && $options.openntkPopup(...args))
              }, [
                vue.createElementVNode("view", { class: "desc" }, "全部政策"),
                vue.createElementVNode("image", {
                  class: "ico",
                  src: "/static/image/icon/right.png",
                  mode: "aspectFit"
                })
              ])
            ]),
            $data.policy != void 0 ? (vue.openBlock(), vue.createElementBlock("view", {
              key: 0,
              class: "content"
            }, [
              vue.createElementVNode("view", { class: "pitem" }, [
                vue.createElementVNode("view", { class: "pileft" }, [
                  vue.createElementVNode("text", { class: "pdesc" }, "入住/离开")
                ]),
                vue.createElementVNode("view", { class: "piright" }, [
                  vue.createElementVNode("text", { class: "ptext" }, "入住日14:00后入住，离店日12:00前离开(以当地城市时区为准)。")
                ])
              ]),
              vue.createElementVNode("view", { class: "pitem" }, [
                vue.createElementVNode("view", { class: "pileft" }, [
                  vue.createElementVNode("text", { class: "pdesc" }, "在线押金")
                ]),
                vue.createElementVNode("view", { class: "piright" }, [
                  $data.policy.deposit == 0 ? (vue.openBlock(), vue.createElementBlock("text", {
                    key: 0,
                    class: "ptext"
                  }, "不收取押金")) : (vue.openBlock(), vue.createElementBlock(
                    "text",
                    {
                      key: 1,
                      class: "ptext"
                    },
                    "收取押金" + vue.toDisplayString($data.policy.deposit) + "元",
                    1
                    /* TEXT */
                  ))
                ])
              ]),
              vue.createElementVNode("view", { class: "pitem" }, [
                vue.createElementVNode("view", { class: "pileft" }, [
                  vue.createElementVNode("text", { class: "pdesc" }, "加客费用")
                ]),
                vue.createElementVNode("view", { class: "piright" }, [
                  $data.policy.allowaddguests == 0 ? (vue.openBlock(), vue.createElementBlock("text", {
                    key: 0,
                    class: "ptext"
                  }, "不允许加客")) : (vue.openBlock(), vue.createElementBlock(
                    "text",
                    {
                      key: 1,
                      class: "ptext"
                    },
                    "加一人收取" + vue.toDisplayString($data.policy.allowaddguests) + "元",
                    1
                    /* TEXT */
                  ))
                ])
              ]),
              vue.createElementVNode("view", { class: "pitem" }, [
                vue.createElementVNode("view", { class: "pileft" }, [
                  vue.createElementVNode("text", { class: "pdesc" }, "房东要求")
                ]),
                vue.createElementVNode(
                  "view",
                  { class: "piright ldrequire" },
                  vue.toDisplayString($data.policy.ntkText),
                  1
                  /* TEXT */
                )
              ]),
              vue.createElementVNode("view", { class: "pitem" }, [
                vue.createElementVNode("view", { class: "pileft" }, [
                  vue.createElementVNode("text", { class: "pdesc" }, "取消规则")
                ]),
                vue.createElementVNode("view", { class: "piright" }, [
                  $data.policy.cancelpolicy == 30 ? (vue.openBlock(), vue.createElementBlock("text", {
                    key: 0,
                    class: "ptext cancle"
                  }, "预订后30分钟内可以免费取消，30分钟后取消扣除所有费用")) : (vue.openBlock(), vue.createElementBlock(
                    "text",
                    {
                      key: 1,
                      class: "ptext cancle"
                    },
                    "入住前" + vue.toDisplayString($data.policy.cancelpolicy) + "天可以免费取消，超过以后取消扣除所有费用",
                    1
                    /* TEXT */
                  ))
                ])
              ])
            ])) : vue.createCommentVNode("v-if", true)
          ]),
          vue.createCommentVNode(" 开始写弹出层的部分 "),
          vue.createCommentVNode(" 预订须知弹出层 "),
          vue.createElementVNode("view", { class: "popup-wrapper" }, [
            vue.createVNode(
              _component_uni_popup,
              {
                ref: "ntkpopup",
                "background-color": "#fff"
              },
              {
                default: vue.withCtx(() => [
                  vue.createElementVNode("view", { class: "popup-content" }, [
                    vue.createElementVNode("view", { class: "popup-header" }, "入住须知"),
                    vue.createElementVNode("view", { class: "policy ntkpopup" }, [
                      $data.policy != void 0 ? (vue.openBlock(), vue.createElementBlock("view", {
                        key: 0,
                        class: "content"
                      }, [
                        vue.createElementVNode("view", { class: "pitem" }, [
                          vue.createElementVNode("view", { class: "pileft" }, [
                            vue.createElementVNode("text", { class: "pdesc" }, "入住/离开")
                          ]),
                          vue.createElementVNode("view", { class: "piright" }, [
                            vue.createElementVNode("text", { class: "ptext" }, "入住日14:00后入住，离店日12:00前离开(以当地城市时区为准)。")
                          ])
                        ]),
                        vue.createElementVNode("view", { class: "pitem" }, [
                          vue.createElementVNode("view", { class: "pileft" }, [
                            vue.createElementVNode("text", { class: "pdesc" }, "在线押金")
                          ]),
                          vue.createElementVNode("view", { class: "piright" }, [
                            $data.policy.deposit == 0 ? (vue.openBlock(), vue.createElementBlock("text", {
                              key: 0,
                              class: "ptext"
                            }, "不收取押金")) : (vue.openBlock(), vue.createElementBlock(
                              "text",
                              {
                                key: 1,
                                class: "ptext"
                              },
                              "收取押金" + vue.toDisplayString($data.policy.deposit) + "元",
                              1
                              /* TEXT */
                            ))
                          ])
                        ]),
                        vue.createElementVNode("view", { class: "pitem" }, [
                          vue.createElementVNode("view", { class: "pileft" }, [
                            vue.createElementVNode("text", { class: "pdesc" }, "加客费用")
                          ]),
                          vue.createElementVNode("view", { class: "piright" }, [
                            $data.policy.allowaddguests == 0 ? (vue.openBlock(), vue.createElementBlock("text", {
                              key: 0,
                              class: "ptext"
                            }, "不允许加客")) : (vue.openBlock(), vue.createElementBlock(
                              "text",
                              {
                                key: 1,
                                class: "ptext"
                              },
                              "加一人收取" + vue.toDisplayString($data.policy.allowaddguests) + "元",
                              1
                              /* TEXT */
                            ))
                          ])
                        ]),
                        vue.createElementVNode("view", { class: "pitem" }, [
                          vue.createElementVNode("view", { class: "pileft" }, [
                            vue.createElementVNode("text", { class: "pdesc" }, "房东要求")
                          ]),
                          vue.createElementVNode("view", { class: "piright ldrequire" }, [
                            (vue.openBlock(true), vue.createElementBlock(
                              vue.Fragment,
                              null,
                              vue.renderList($data.policy.needtoknow, (item, index2) => {
                                return vue.openBlock(), vue.createElementBlock("view", {
                                  key: index2,
                                  class: "ldrequire-item"
                                }, [
                                  item == "1" ? (vue.openBlock(), vue.createElementBlock(
                                    "span",
                                    { key: 0 },
                                    "-允许" + vue.toDisplayString($data.ntkArr[index2]) + "；",
                                    1
                                    /* TEXT */
                                  )) : (vue.openBlock(), vue.createElementBlock(
                                    "span",
                                    { key: 1 },
                                    "-不允许" + vue.toDisplayString($data.ntkArr[index2]) + "；",
                                    1
                                    /* TEXT */
                                  ))
                                ]);
                              }),
                              128
                              /* KEYED_FRAGMENT */
                            ))
                          ])
                        ]),
                        vue.createElementVNode("view", { class: "pitem" }, [
                          vue.createElementVNode("view", { class: "pileft" }, [
                            vue.createElementVNode("text", { class: "pdesc" }, "取消规则")
                          ]),
                          vue.createElementVNode("view", { class: "piright" }, [
                            $data.policy.cancelpolicy == 30 ? (vue.openBlock(), vue.createElementBlock("text", {
                              key: 0,
                              class: "ptext cancle"
                            }, "预订后30分钟内可以免费取消，30分钟后取消扣除所有费用")) : (vue.openBlock(), vue.createElementBlock(
                              "text",
                              {
                                key: 1,
                                class: "ptext cancle"
                              },
                              "入住前" + vue.toDisplayString($data.policy.cancelpolicy) + "天可以免费取消，超过以后取消扣除所有费用",
                              1
                              /* TEXT */
                            ))
                          ])
                        ])
                      ])) : vue.createCommentVNode("v-if", true)
                    ])
                  ])
                ]),
                _: 1
                /* STABLE */
              },
              512
              /* NEED_PATCH */
            )
          ]),
          vue.createCommentVNode(" 全部设施弹出层 "),
          vue.createVNode(
            _component_uni_popup,
            {
              ref: "facpopup",
              "background-color": "#fff"
            },
            {
              default: vue.withCtx(() => [
                vue.createElementVNode("view", { class: "popup-header" }, "全部设施"),
                vue.createElementVNode("view", { class: "facilitiesbrief facpop" }, [
                  vue.createElementVNode("view", { class: "content" }, [
                    (vue.openBlock(true), vue.createElementBlock(
                      vue.Fragment,
                      null,
                      vue.renderList($data.facilities, (group, index2) => {
                        return vue.openBlock(), vue.createElementBlock("view", {
                          class: "fac-item",
                          key: index2
                        }, [
                          group.items.length ? (vue.openBlock(), vue.createElementBlock("view", {
                            key: 0,
                            class: "left"
                          }, [
                            vue.createElementVNode(
                              "view",
                              { class: "leftText" },
                              vue.toDisplayString(group.group),
                              1
                              /* TEXT */
                            )
                          ])) : vue.createCommentVNode("v-if", true),
                          vue.createElementVNode("view", { class: "right" }, [
                            (vue.openBlock(true), vue.createElementBlock(
                              vue.Fragment,
                              null,
                              vue.renderList(group.items, (item, index3) => {
                                return vue.openBlock(), vue.createElementBlock("view", {
                                  class: "right-item",
                                  key: index3
                                }, [
                                  item.vaild ? (vue.openBlock(), vue.createElementBlock("image", {
                                    key: 0,
                                    class: "ico",
                                    src: "/static/image/icon/complete.png",
                                    mode: "aspectFit"
                                  })) : (vue.openBlock(), vue.createElementBlock("image", {
                                    key: 1,
                                    class: "ico",
                                    src: "/static/image/icon/clear.png",
                                    mode: "aspectFit"
                                  })),
                                  vue.createElementVNode(
                                    "view",
                                    { class: "desc" },
                                    vue.toDisplayString(item.facName),
                                    1
                                    /* TEXT */
                                  )
                                ]);
                              }),
                              128
                              /* KEYED_FRAGMENT */
                            )),
                            vue.createElementVNode("i")
                          ])
                        ]);
                      }),
                      128
                      /* KEYED_FRAGMENT */
                    )),
                    vue.createElementVNode("view", { class: "facbottom" })
                  ])
                ])
              ]),
              _: 1
              /* STABLE */
            },
            512
            /* NEED_PATCH */
          ),
          vue.createCommentVNode(" 房源特色弹出层 "),
          vue.createVNode(
            _component_uni_popup,
            {
              ref: "feapopup",
              "background-color": "#fff"
            },
            {
              default: vue.withCtx(() => [
                vue.createElementVNode("view", { class: "popup-header" }, "特色周边"),
                $data.features.length != 0 ? (vue.openBlock(), vue.createElementBlock("view", {
                  key: 0,
                  class: "facilitiesbrief feapop"
                }, [
                  vue.createElementVNode("view", { class: "swTop" }, [
                    (vue.openBlock(true), vue.createElementBlock(
                      vue.Fragment,
                      null,
                      vue.renderList($data.features, (item, index2) => {
                        return vue.openBlock(), vue.createElementBlock("view", {
                          key: index2,
                          class: vue.normalizeClass(["topItem", { "itemAct": $data.currentIndex1 == index2 }]),
                          onClick: ($event) => $options.changeIndex(index2)
                        }, vue.toDisplayString(item.featuretype), 11, ["onClick"]);
                      }),
                      128
                      /* KEYED_FRAGMENT */
                    ))
                  ]),
                  vue.createElementVNode("view", { class: "swContent" }, [
                    (vue.openBlock(true), vue.createElementBlock(
                      vue.Fragment,
                      null,
                      vue.renderList($data.features, (item, i) => {
                        return vue.openBlock(), vue.createElementBlock("view", {
                          class: "contentview",
                          key: i
                        }, [
                          $data.currentIndex1 === i ? (vue.openBlock(), vue.createElementBlock(
                            "text",
                            { key: 0 },
                            vue.toDisplayString(item.featurecontent),
                            1
                            /* TEXT */
                          )) : vue.createCommentVNode("v-if", true)
                        ]);
                      }),
                      128
                      /* KEYED_FRAGMENT */
                    )),
                    vue.createElementVNode("view", { class: "facbottom" })
                  ])
                ])) : vue.createCommentVNode("v-if", true)
              ]),
              _: 1
              /* STABLE */
            },
            512
            /* NEED_PATCH */
          )
        ]),
        vue.createElementVNode("view", { class: "bbottom" })
      ])) : vue.createCommentVNode("v-if", true),
      vue.createVNode(_component_wu_calendar, {
        ref: "calendar",
        color: "#fd6f10",
        insert: false,
        rangeSameDay: true,
        onConfirm: $options.calendarConfirm,
        mode: "range",
        selected: $data.selected,
        rangeHaveDisableTruncation: true,
        startDate: `${$data.currentTime.year}-${$data.currentTime.month}-${$data.currentTime.date}`
      }, null, 8, ["onConfirm", "selected", "startDate"]),
      vue.createElementVNode("view", { class: "bottomBar" }, [
        vue.createElementVNode("view", { class: "bbwrapper" }, [
          $data.avatars != void 0 ? (vue.openBlock(), vue.createElementBlock("view", {
            key: 0,
            class: "avatarwrapper",
            onClick: _cache[10] || (_cache[10] = (...args) => $options.calltel && $options.calltel(...args))
          }, [
            vue.createElementVNode("image", {
              class: "avapic",
              src: $data.avatars.landLordAvatars,
              mode: "aspectFit"
            }, null, 8, ["src"]),
            vue.createElementVNode("view", { class: "avatarText" }, "咨询")
          ])) : vue.createCommentVNode("v-if", true),
          vue.createElementVNode("view", {
            class: "likewrapper",
            onClick: _cache[11] || (_cache[11] = (...args) => $options.likehouse && $options.likehouse(...args))
          }, [
            $data.islike ? (vue.openBlock(), vue.createElementBlock("image", {
              key: 0,
              class: "like coloradd",
              src: "/static/image/icon/like.png"
            })) : vue.createCommentVNode("v-if", true),
            !$data.islike ? (vue.openBlock(), vue.createElementBlock("image", {
              key: 1,
              class: "like",
              src: "/static/image/icon/like-active.png"
            })) : vue.createCommentVNode("v-if", true),
            vue.createElementVNode("view", { class: "likeText" }, "收藏")
          ]),
          vue.createElementVNode("view", { class: "pricemoudle" }, [
            vue.createElementVNode("view", { class: "pricewrapper" }, [
              vue.createElementVNode("text", { class: "symbol" }, "￥"),
              vue.createElementVNode(
                "text",
                { class: "discounprice" },
                vue.toDisplayString($data.overview.discountprice),
                1
                /* TEXT */
              ),
              vue.createElementVNode("text", { class: "night" }, "/晚"),
              vue.createElementVNode(
                "del",
                { class: "orgprice" },
                "￥" + vue.toDisplayString($data.overview.originalprice),
                1
                /* TEXT */
              )
            ]),
            vue.createElementVNode(
              "view",
              { class: "discoutMoudle" },
              " 促销已减" + vue.toDisplayString($data.overview.originalprice - $data.overview.discountprice) + "元 ",
              1
              /* TEXT */
            )
          ]),
          vue.createElementVNode("view", { class: "btnwrapper" }, [
            vue.createElementVNode("view", {
              class: "bookingBtn",
              onClick: _cache[12] || (_cache[12] = (...args) => $options.toCheck && $options.toCheck(...args))
            }, "立即预订")
          ])
        ])
      ]),
      $data.isloading ? (vue.openBlock(), vue.createElementBlock("view", {
        key: 1,
        class: "loading"
      }, [
        vue.createElementVNode("image", {
          class: "loadingpic",
          src: "/static/image/icon/loading.gif",
          mode: "aspectFit"
        })
      ])) : vue.createCommentVNode("v-if", true)
    ]);
  }
  const PagesHotelDetailHotelDetail = /* @__PURE__ */ _export_sfc(_sfc_main$c, [["render", _sfc_render$b], ["__file", "D:/HLTrip/hl/pages/hotelDetail/hotelDetail.vue"]]);
  const _sfc_main$b = {
    data() {
      return {
        firstComment: void 0,
        comments: [],
        ratePic: "",
        total: 0,
        page: 1,
        previewList: [],
        houseid: null
      };
    },
    onBackPress() {
      try {
        this.$nextTick(() => {
          plus.navigator.setStatusBarStyle("light");
        });
      } catch (error2) {
        formatAppLog("log", "at pages/getFullComment/getFullComment.vue:85", err);
      }
    },
    methods: {
      nvback() {
        try {
          this.$nextTick(() => {
            plus.navigator.setStatusBarStyle("light");
          });
        } catch (error2) {
          formatAppLog("log", "at pages/getFullComment/getFullComment.vue:95", err);
        }
        uni.navigateBack({
          delta: 1
        });
      },
      handleRatePic() {
        let rate = this.firstComment.commentContent.rating;
        if (rate <= 0.5) {
          this.ratePic = `../../static/image/rating${0.5}.png`;
        } else if (rate <= 1) {
          this.ratePic = `../../static/image/rating${1}.png`;
        } else if (rate <= 1.5) {
          this.ratePic = `../../static/image/rating${1.5}.png`;
        } else if (rate <= 2) {
          this.ratePic = `../../static/image/rating${2}.png`;
        } else if (rate <= 2.5) {
          this.ratePic = `../../static/image/rating${2.5}.png`;
        } else if (rate <= 3) {
          this.ratePic = `../../static/image/rating${3}.png`;
        } else if (rate <= 3.5) {
          this.ratePic = `../../static/image/rating${3.5}.png`;
        } else if (rate <= 4) {
          this.ratePic = `../../static/image/rating${4}.png`;
        } else if (rate <= 4.5) {
          this.ratePic = `../../static/image/rating${4.5}.png`;
        } else if (rate <= 5) {
          this.ratePic = `../../static/image/rating${5}.png`;
        }
      },
      handleComBrf(data2) {
        try {
          let arr = [];
          arr.push({
            desc: "整洁卫生",
            rating: data2.cleanliness.toFixed(1)
          });
          arr.push({
            desc: "描述相符",
            rating: data2.accuracy.toFixed(1)
          });
          arr.push({
            desc: "交通位置",
            rating: data2.locationtransport.toFixed(1)
          });
          arr.push({
            desc: "安全程度",
            rating: data2.safety.toFixed(1)
          });
          arr.push({
            desc: "性价比",
            rating: data2.valueformmoney.toFixed(1)
          });
          delete data2.cleanliness;
          delete data2.accuracy;
          delete data2.locationtransport;
          delete data2.safety;
          delete data2.valueformmoney;
          data2.rating = data2.rating.toFixed(1);
          data2.rateDetail = arr;
          data2.commenttime = this.getTime(new Date(data2.commenttime));
        } catch (error2) {
          formatAppLog("log", "at pages/getFullComment/getFullComment.vue:159", data2);
          formatAppLog("log", "at pages/getFullComment/getFullComment.vue:160", error2);
        }
        return data2;
      },
      getTime(dateObj) {
        const year = dateObj.getFullYear();
        const month = dateObj.getMonth() + 1;
        const date2 = dateObj.getDate();
        const day = dateObj.getDay();
        return {
          year,
          month: month.toString().padStart(2, "0"),
          date: date2.toString().padStart(2, "0"),
          day,
          arr: ["日", "一", "二", "三", "四", "五", "六"]
        };
      },
      handlePreview(item, index2) {
        formatAppLog("log", "at pages/getFullComment/getFullComment.vue:179", item);
        this.previewList = [];
        item.commentImages.forEach((element) => {
          this.previewList.push(element.url);
        });
        this.$refs.previewImage.open(this.previewList[index2]);
      },
      getComment(houseid) {
        uni.request({
          url: `${API.BASE_URL}/getAllCommentByHouseid`,
          //仅为示例，并非真实接口地址。
          data: {
            houseid,
            page: this.page
          },
          success: (res) => {
            formatAppLog("log", "at pages/getFullComment/getFullComment.vue:194", res.data);
            this.comments = res.data.data.comments;
            this.firstComment = JSON.parse(JSON.stringify(this.comments[0]));
            this.handleRatePic();
            this.handleComBrf(this.firstComment.commentContent);
            for (let i = 0; i < this.comments.length; i++) {
              let element = this.comments[i];
              element = this.handleComBrf(element.commentContent);
            }
          }
        });
      },
      getNewData() {
        this.page++;
        uni.request({
          url: `${API.BASE_URL}/getAllCommentByHouseid`,
          //仅为示例，并非真实接口地址。
          data: {
            houseid: this.houseid,
            page: this.page
          },
          success: (res) => {
            let arr = res.data.data.comments;
            for (let i = 0; i < arr.length; i++) {
              formatAppLog("log", "at pages/getFullComment/getFullComment.vue:218", i);
              let element = arr[i];
              element = this.handleComBrf(element.commentContent);
            }
            arr.forEach((element) => {
              let existingData = this.comments.find((item) => item.id === element.id);
              if (!existingData) {
                this.comments.push(element);
              }
            });
          }
        });
      }
    },
    onLoad(option) {
      this.total = option.total;
      const id = option.houseid;
      formatAppLog("log", "at pages/getFullComment/getFullComment.vue:236", option.houseid);
      this.houseid = id;
      this.getComment(id);
    }
  };
  function _sfc_render$a(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_q_previewImage = resolveEasycom(vue.resolveDynamicComponent("q-previewImage"), __easycom_0$4);
    return vue.openBlock(), vue.createElementBlock("view", null, [
      vue.createElementVNode("view", { class: "statusbar" }),
      vue.createElementVNode("view", { class: "topbar" }, [
        vue.createElementVNode("view", {
          class: "left",
          onClick: _cache[0] || (_cache[0] = (...args) => $options.nvback && $options.nvback(...args))
        }, [
          vue.createElementVNode("image", {
            class: "topbar-icon leftIco",
            src: "/static/image/icon/back_balck.png",
            mode: "aspectFit"
          })
        ]),
        vue.createTextVNode(" 全部评论 "),
        vue.createElementVNode("view", { class: "right" }, [
          vue.createElementVNode("image", {
            class: "topbar-icon rightIco",
            src: "/static/image/icon/message_white.png",
            mode: "aspectFit"
          }),
          vue.createCommentVNode(' <image class="topbar-icon rightIco" src="../../static/image/icon/message_black.png" mode="aspectFit" /> ')
        ])
      ]),
      vue.createElementVNode(
        "scroll-view",
        {
          class: "scrollWrapper",
          "scroll-y": "true",
          onScrolltolower: _cache[1] || (_cache[1] = (...args) => $options.getNewData && $options.getNewData(...args))
        },
        [
          vue.createElementVNode("view", { class: "topwrapper" }, [
            $data.firstComment != void 0 ? (vue.openBlock(), vue.createElementBlock("view", {
              key: 0,
              class: "top"
            }, [
              vue.createElementVNode("view", { class: "rate" }, [
                vue.createElementVNode(
                  "text",
                  { class: "finalRate" },
                  vue.toDisplayString($data.firstComment.commentContent.rating),
                  1
                  /* TEXT */
                ),
                vue.createElementVNode("image", {
                  class: "ratePic",
                  src: $data.ratePic,
                  mode: "aspectFit"
                }, null, 8, ["src"]),
                vue.createElementVNode(
                  "text",
                  { class: "totalCommentCount" },
                  vue.toDisplayString(`(共${this.total}条)`),
                  1
                  /* TEXT */
                )
              ]),
              vue.createElementVNode("view", { class: "rateDetail" }, [
                (vue.openBlock(true), vue.createElementBlock(
                  vue.Fragment,
                  null,
                  vue.renderList($data.firstComment.commentContent.rateDetail, (item, index2) => {
                    return vue.openBlock(), vue.createElementBlock("view", {
                      class: "rateDetail-item",
                      key: index2
                    }, [
                      vue.createElementVNode(
                        "text",
                        { class: "desc" },
                        vue.toDisplayString(item.desc),
                        1
                        /* TEXT */
                      ),
                      vue.createElementVNode(
                        "text",
                        { class: "sRate" },
                        vue.toDisplayString(item.rating),
                        1
                        /* TEXT */
                      )
                    ]);
                  }),
                  128
                  /* KEYED_FRAGMENT */
                ))
              ])
            ])) : vue.createCommentVNode("v-if", true)
          ]),
          $data.comments.length != 0 ? (vue.openBlock(true), vue.createElementBlock(
            vue.Fragment,
            { key: 0 },
            vue.renderList($data.comments, (item, i) => {
              return vue.openBlock(), vue.createElementBlock("view", {
                class: "nbottom",
                key: i
              }, [
                vue.createElementVNode("view", { class: "avatar" }, [
                  vue.createElementVNode("view", { class: "avatar-left" }, [
                    vue.createElementVNode("image", {
                      class: "avatarPic",
                      src: item.avatars.userAvatars,
                      mode: "aspectFill"
                    }, null, 8, ["src"])
                  ]),
                  vue.createElementVNode("view", { class: "avatar-right" }, [
                    vue.createElementVNode(
                      "view",
                      { class: "nickname" },
                      vue.toDisplayString(item.commentContent.username),
                      1
                      /* TEXT */
                    ),
                    vue.createElementVNode("view", { class: "tar" }, [
                      vue.createElementVNode(
                        "view",
                        { class: "time" },
                        vue.toDisplayString(item.commentContent.commenttime.year) + "年" + vue.toDisplayString(item.commentContent.commenttime.month) + "月" + vue.toDisplayString(item.commentContent.commenttime.date) + "日评论",
                        1
                        /* TEXT */
                      ),
                      vue.createElementVNode(
                        "view",
                        { class: "userrate" },
                        vue.toDisplayString(item.commentContent.rating),
                        1
                        /* TEXT */
                      )
                    ])
                  ])
                ]),
                vue.createElementVNode(
                  "view",
                  { class: "commentContent" },
                  vue.toDisplayString(item.commentContent.commentcontent),
                  1
                  /* TEXT */
                ),
                item.commentImages != void 0 ? (vue.openBlock(), vue.createElementBlock("view", {
                  key: 0,
                  class: "picWrapper"
                }, [
                  (vue.openBlock(true), vue.createElementBlock(
                    vue.Fragment,
                    null,
                    vue.renderList(item.commentImages, (picObj, index2) => {
                      return vue.openBlock(), vue.createElementBlock("image", {
                        key: index2,
                        class: "comPic",
                        onClick: ($event) => $options.handlePreview(item, index2),
                        src: picObj.url,
                        mode: "scaleToFill"
                      }, null, 8, ["onClick", "src"]);
                    }),
                    128
                    /* KEYED_FRAGMENT */
                  )),
                  vue.createElementVNode("i"),
                  vue.createElementVNode("i"),
                  vue.createElementVNode("i")
                ])) : vue.createCommentVNode("v-if", true),
                item.commentContent.landlordreply != void 0 ? (vue.openBlock(), vue.createElementBlock("view", {
                  key: 1,
                  class: "reply"
                }, [
                  vue.createElementVNode("view", { class: "replyTitle" }, "房东回复"),
                  vue.createElementVNode(
                    "view",
                    { class: "replyContent" },
                    vue.toDisplayString(item.commentContent.landlordreply),
                    1
                    /* TEXT */
                  )
                ])) : vue.createCommentVNode("v-if", true)
              ]);
            }),
            128
            /* KEYED_FRAGMENT */
          )) : vue.createCommentVNode("v-if", true),
          vue.createVNode(_component_q_previewImage, {
            ref: "previewImage",
            urls: $data.previewList
          }, null, 8, ["urls"])
        ],
        32
        /* HYDRATE_EVENTS */
      )
    ]);
  }
  const PagesGetFullCommentGetFullComment = /* @__PURE__ */ _export_sfc(_sfc_main$b, [["render", _sfc_render$a], ["__file", "D:/HLTrip/hl/pages/getFullComment/getFullComment.vue"]]);
  const _sfc_main$a = {
    data() {
      return {
        current: 0,
        pic: []
      };
    },
    onBackPress() {
      try {
        this.$nextTick(() => {
          plus.navigator.setStatusBarStyle("light");
        });
      } catch (error2) {
        formatAppLog("log", "at pages/picDetail/picDetail.vue:43", err);
      }
    },
    methods: {
      changeIndex(i) {
        this.current = i;
      },
      nvback() {
        try {
          this.$nextTick(() => {
            plus.navigator.setStatusBarStyle("light");
          });
        } catch (error2) {
          formatAppLog("log", "at pages/picDetail/picDetail.vue:56", err);
        }
        uni.navigateBack({
          delta: 1
        });
      },
      preview(url2) {
        this.$refs.previewImage.open(url2);
      }
    },
    onLoad() {
      const livdingRoom = {
        group: "卧室",
        picList: []
      };
      const lobby = {
        group: "客厅",
        picList: []
      };
      const bashroom = {
        group: "卫生间",
        picList: []
      };
      const kitchen = {
        group: "厨房",
        picList: []
      };
      const other = {
        group: "其他",
        picList: []
      };
      uni.$on(
        "sendPicList",
        function(data2) {
          data2.forEach((element) => {
            if (element.imagetype == "卧室") {
              livdingRoom.picList.push(element.url);
            } else if (element.imagetype == "客厅") {
              lobby.picList.push(element.url);
            } else if (element.imagetype == "卫生间") {
              bashroom.picList.push(element.url);
            } else if (element.imagetype == "厨房") {
              kitchen.picList.push(element.url);
            } else if (element.imagetype == "其他") {
              other.picList.push(element.url);
            }
          });
          this.pic.push(livdingRoom);
          this.pic.push(lobby);
          this.pic.push(bashroom);
          this.pic.push(kitchen);
          this.pic.push(other);
        }.bind(this)
      );
    }
  };
  function _sfc_render$9(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_q_previewImage = resolveEasycom(vue.resolveDynamicComponent("q-previewImage"), __easycom_0$4);
    return vue.openBlock(), vue.createElementBlock("view", null, [
      vue.createElementVNode("view", { class: "statusbar" }),
      vue.createElementVNode("view", { class: "topbar" }, [
        vue.createElementVNode("view", {
          class: "left",
          onClick: _cache[0] || (_cache[0] = (...args) => $options.nvback && $options.nvback(...args))
        }, [
          vue.createElementVNode("image", {
            class: "topbar-icon leftIco",
            src: "/static/image/icon/back_balck.png",
            mode: "aspectFit"
          })
        ]),
        vue.createTextVNode(" 房源相册 "),
        vue.createElementVNode("view", { class: "right" }, [
          vue.createElementVNode("image", {
            class: "topbar-icon rightIco",
            src: "/static/image/icon/message_white.png",
            mode: "aspectFit"
          }),
          vue.createCommentVNode(' <image class="topbar-icon rightIco" src="../../static/image/icon/message_black.png" mode="aspectFit" /> ')
        ])
      ]),
      $data.pic.length != 0 ? (vue.openBlock(), vue.createElementBlock("view", {
        key: 0,
        class: "swTop"
      }, [
        (vue.openBlock(true), vue.createElementBlock(
          vue.Fragment,
          null,
          vue.renderList($data.pic, (item, index2) => {
            return vue.openBlock(), vue.createElementBlock("view", {
              key: index2,
              class: vue.normalizeClass(["topItem", { "itemAct": $data.current == index2 }]),
              onClick: ($event) => $options.changeIndex(index2)
            }, vue.toDisplayString(item.group), 11, ["onClick"]);
          }),
          128
          /* KEYED_FRAGMENT */
        ))
      ])) : vue.createCommentVNode("v-if", true),
      vue.createElementVNode("view", { class: "swContent" }, [
        $data.pic.length != 0 ? (vue.openBlock(), vue.createElementBlock("view", {
          key: 0,
          class: "contentview"
        }, [
          (vue.openBlock(true), vue.createElementBlock(
            vue.Fragment,
            null,
            vue.renderList($data.pic[$data.current].picList, (item, i) => {
              return vue.openBlock(), vue.createElementBlock("image", {
                class: "pic",
                src: item,
                mode: "scaleToFill",
                key: i,
                onClick: ($event) => $options.preview(item)
              }, null, 8, ["src", "onClick"]);
            }),
            128
            /* KEYED_FRAGMENT */
          ))
        ])) : vue.createCommentVNode("v-if", true),
        $data.pic.length != 0 ? (vue.openBlock(), vue.createBlock(_component_q_previewImage, {
          key: 1,
          ref: "previewImage",
          urls: $data.pic[$data.current].picList
        }, null, 8, ["urls"])) : vue.createCommentVNode("v-if", true),
        vue.createElementVNode("view", { class: "facbottom" })
      ])
    ]);
  }
  const PagesPicDetailPicDetail = /* @__PURE__ */ _export_sfc(_sfc_main$a, [["render", _sfc_render$9], ["__file", "D:/HLTrip/hl/pages/picDetail/picDetail.vue"]]);
  const _sfc_main$9 = {
    data() {
      return {
        phoneNumber: "",
        code: "",
        text: "",
        messageText: "",
        codeIsSended: false,
        codeText: 60,
        msgType: "",
        duration: 2e3
      };
    },
    methods: {
      login() {
        if (!this.isCode) {
          return false;
        }
        uni.request({
          url: `${API.BASE_URL}/loginByCode`,
          //仅为示例，并非真实接口地址。
          data: {
            phoneNumber: this.phoneNumber,
            code: this.code
          },
          method: "POST",
          success: (res) => {
            formatAppLog("log", "at pages/login/login.vue:71", res.data);
            const { data: data2 } = res.data;
            if (res.data.requestStatus == "200") {
              this.msgType = "success";
              this.messageText = "登录成功";
              this.$refs.message.open();
              uni.setStorageSync("phoneNumber", data2.phoneNumber);
              uni.setStorageSync("userId", data2.userId);
              uni.setStorageSync("token", data2.token);
              setTimeout(() => {
                uni.switchTab({
                  url: "/pages/Components/home/home"
                });
              }, 1e3);
            } else if (res.data.requestStatus == "400" || res.data.requestStatus == "409" || res.data.requestStatus == "410") {
              this.messageText = res.data.dataDesc;
              this.msgType = "error";
              this.$refs.message.open();
            } else if (res.data.requestStatus == "304") {
              this.messageText = res.data.dataDesc + ",为您跳转到注册";
              this.msgType = "error";
              this.$refs.message.open();
              setTimeout(() => {
                uni.navigateTo({
                  url: `/pages/register/register?phoneNumber=${this.phoneNumber}`
                });
              }, 1300);
            }
          },
          fail: (err2) => {
            this.msgType = err2.message;
            this.$refs.message.open();
            formatAppLog("log", "at pages/login/login.vue:103", err2);
          }
        });
      },
      loginCode() {
        if (this.phoneNumber.length != 11) {
          return false;
        }
        uni.request({
          url: `${API.BASE_URL}/getVerify`,
          //仅为示例，并非真实接口地址。
          data: {
            phoneNumber: this.phoneNumber,
            type: "登录"
          },
          method: "POST",
          success: (res) => {
            formatAppLog("log", "at pages/login/login.vue:120", res);
            if (res.data.requestStatus == "304") {
              this.$refs.alertDialog.open();
              return false;
            }
          }
        });
        this.codeIsSended = true;
        const timer = setInterval(() => {
          if (this.codeText > 0) {
            this.codeText--;
          } else {
            this.codeIsSended = false;
            this.codeText = 60;
            clearInterval(timer);
          }
        }, 1e3);
      },
      dialogConfirm() {
        uni.navigateTo({
          url: `/pages/register/register?phoneNumber=${this.phoneNumber}`
        });
      },
      toLBP() {
        uni.redirectTo({
          url: "/pages/loginByPwd/loginByPwd"
        });
      },
      toFPwd() {
        uni.navigateTo({
          url: "/pages/resetPwd/resetPwd"
        });
      }
    },
    computed: {
      isPhone() {
        if (this.phoneNumber != "" && this.phoneNumber.length == 11) {
          return true;
        } else {
          return false;
        }
      },
      isCode() {
        if (this.phoneNumber != "" && this.phoneNumber.length == 11 && this.code.length == 6) {
          return true;
        } else {
          return false;
        }
      }
    },
    onLoad: function(option) {
      if (option.phoneNumber != void 0 && option.code != void 0) {
        this.phoneNumber = option.phoneNumber;
        this.code = option.code;
      }
    }
  };
  function _sfc_render$8(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_uni_popup_dialog = resolveEasycom(vue.resolveDynamicComponent("uni-popup-dialog"), __easycom_0$5);
    const _component_uni_popup = resolveEasycom(vue.resolveDynamicComponent("uni-popup"), __easycom_1$2);
    const _component_uni_popup_message = resolveEasycom(vue.resolveDynamicComponent("uni-popup-message"), __easycom_2$1);
    return vue.openBlock(), vue.createElementBlock("view", null, [
      vue.createElementVNode("div", { class: "topbar" }),
      vue.createElementVNode("view", { class: "title-wrapper" }, [
        vue.createElementVNode("view", { class: "sidebar" }),
        vue.createElementVNode("view", { class: "title" }, "登录")
      ]),
      vue.createElementVNode("view", { class: "phoneNumber" }, [
        vue.createElementVNode("view", { class: "phoneNumber-wrapper" }, [
          vue.createElementVNode("view", { class: "prefix" }, "+86"),
          vue.withDirectives(vue.createElementVNode(
            "input",
            {
              type: "number",
              class: "phoneNumber-input",
              placeholder: "请输入手机号",
              "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => $data.phoneNumber = $event),
              maxlength: "11"
            },
            null,
            512
            /* NEED_PATCH */
          ), [
            [vue.vModelText, $data.phoneNumber]
          ])
        ]),
        vue.createElementVNode("view", { class: "phoneNumber-wrapper code" }, [
          vue.withDirectives(vue.createElementVNode(
            "input",
            {
              type: "tel",
              class: "phoneNumber-input",
              placeholder: "请输入验证码",
              "onUpdate:modelValue": _cache[1] || (_cache[1] = ($event) => $data.code = $event),
              maxlength: "6"
            },
            null,
            512
            /* NEED_PATCH */
          ), [
            [vue.vModelText, $data.code]
          ]),
          vue.createElementVNode(
            "view",
            {
              class: vue.normalizeClass(["timelimit", { "textColor": $options.isPhone }])
            },
            [
              $data.codeIsSended ? (vue.openBlock(), vue.createElementBlock(
                "text",
                { key: 0 },
                vue.toDisplayString($data.codeText) + "s",
                1
                /* TEXT */
              )) : (vue.openBlock(), vue.createElementBlock("text", {
                key: 1,
                onClick: _cache[2] || (_cache[2] = (...args) => $options.loginCode && $options.loginCode(...args))
              }, "获取验证码"))
            ],
            2
            /* CLASS */
          )
        ])
      ]),
      vue.createElementVNode("view", { class: "switchLoginMethod" }, [
        vue.createElementVNode("text", {
          class: "left",
          onClick: _cache[3] || (_cache[3] = (...args) => $options.toLBP && $options.toLBP(...args))
        }, "用密码登录"),
        vue.createElementVNode("text", {
          onClick: _cache[4] || (_cache[4] = (...args) => $options.toFPwd && $options.toFPwd(...args))
        }, "忘记密码?")
      ]),
      vue.createElementVNode(
        "view",
        {
          class: vue.normalizeClass(["getCodeBtn", { "btnActive": $options.isCode }]),
          onClick: _cache[5] || (_cache[5] = (...args) => $options.login && $options.login(...args))
        },
        " 登录 ",
        2
        /* CLASS */
      ),
      vue.createCommentVNode(" 提示信息弹窗 "),
      vue.createCommentVNode(" 提示窗示例 "),
      vue.createVNode(
        _component_uni_popup,
        {
          ref: "alertDialog",
          type: "dialog"
        },
        {
          default: vue.withCtx(() => [
            vue.createVNode(_component_uni_popup_dialog, {
              type: "info",
              cancelText: "关闭",
              confirmText: "确定",
              title: "提示",
              content: "该账号未注册，将为您跳转到注册页面",
              onConfirm: $options.dialogConfirm
            }, null, 8, ["onConfirm"])
          ]),
          _: 1
          /* STABLE */
        },
        512
        /* NEED_PATCH */
      ),
      vue.createVNode(
        _component_uni_popup,
        {
          ref: "message",
          type: "message"
        },
        {
          default: vue.withCtx(() => [
            vue.createVNode(_component_uni_popup_message, {
              type: $data.msgType,
              message: $data.messageText,
              duration: $data.duration
            }, null, 8, ["type", "message", "duration"])
          ]),
          _: 1
          /* STABLE */
        },
        512
        /* NEED_PATCH */
      )
    ]);
  }
  const PagesLoginLogin = /* @__PURE__ */ _export_sfc(_sfc_main$9, [["render", _sfc_render$8], ["__file", "D:/HLTrip/hl/pages/login/login.vue"]]);
  const _sfc_main$8 = {
    data() {
      return {
        searchText: "",
        street: "",
        historyList: [],
        hotCities: [],
        cities: [],
        letterGroup: [],
        latitude: 0,
        longitude: 0,
        tips: [],
        isLoading: false,
        isTips: false
      };
    },
    methods: {
      nvBack() {
        uni.navigateBack({
          delta: 1
        });
      },
      getMylocation() {
        uni.getLocation({
          type: "gcj02",
          geocode: true,
          success: function(res) {
            formatAppLog("log", "at pages/selectCity/selectCity.vue:113", res);
            this.latitude = res.latitude;
            this.longitude = res.longitude;
            this.location = `${this.longitude},${this.latitude}`;
            uni.setStorageSync("street", res.address.street);
          }.bind(this),
          fail(err2) {
            formatAppLog("log", "at pages/selectCity/selectCity.vue:120", "fail");
            formatAppLog("log", "at pages/selectCity/selectCity.vue:121", err2);
          },
          complete: function() {
            this.isLocating = false;
          }.bind(this)
        });
      },
      sendData(item) {
        uni.$emit("locationInfo", item);
        this.saveHistory(item);
        uni.navigateBack();
      },
      saveHistory(item) {
        this.historyList = this.insertOrUpdateCity(this.historyList, item);
        uni.setStorageSync("searchHistory", this.historyList);
      },
      clearHistory() {
        this.historyList = [];
        uni.removeStorageSync("searchHistory");
      },
      insertOrUpdateCity(array2, cityObject) {
        const existingIndex = array2.findIndex((item) => item.id === cityObject.id);
        if (existingIndex !== -1) {
          const existingCity = array2.splice(existingIndex, 1)[0];
          array2.unshift(existingCity);
        } else {
          array2.unshift(cityObject);
        }
        return array2;
      },
      hanldeInput: lodash_debounce(function() {
        this.isTips = false;
        const location = uni.getStorageSync("location");
        this.tips = [];
        this.isLoading = true;
        uni.request({
          url: "https://restapi.amap.com/v3/assistant/inputtips",
          //仅为示例，并非真实接口地址。
          data: {
            key: "ca5638622884957be4cff8d31d00b1b0",
            location,
            keywords: this.searchText
          },
          success: function(res) {
            let arr = res.data.tips;
            if (arr.length == 0) {
              this.isTips = true;
            }
            arr.forEach((element, index2) => {
              if (element.id.length == 0) {
                arr.splice(index2, 1);
              }
            });
            this.tips = arr;
            formatAppLog("log", "at pages/selectCity/selectCity.vue:180", res);
          }.bind(this),
          fail: (err2) => {
            formatAppLog("log", "at pages/selectCity/selectCity.vue:183", err2);
          },
          complete: function() {
            this.isLoading = false;
          }.bind(this)
        });
      }, 300),
      highLight(name2) {
        const regex = new RegExp(this.searchText, "g");
        return name2.replace(regex, "<span style='color: #ff7014;'>" + this.searchText + "</span>");
      },
      cleanText() {
        this.searchText = "";
      }
    },
    onLoad() {
      const AllCitydata = data$1.data;
      this.hotCities = AllCitydata.cityGroup.hotCities;
      this.cities = AllCitydata.cityGroup.cities;
      this.cities.forEach((element) => {
        this.letterGroup.push(element.group);
      });
      this.street = uni.getStorageSync("street");
      if (this.street == "") {
        this.street = "获取位置失败，请重试";
      }
      const arr = uni.getStorageSync("searchHistory");
      if (arr.length != 0) {
        this.historyList = arr;
      }
    }
  };
  function _sfc_render$7(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("view", null, [
      vue.createElementVNode("view", { class: "topbar" }),
      vue.createElementVNode("view", { class: "city-container" }, [
        vue.createElementVNode("view", { class: "searchHeader" }, [
          vue.createElementVNode("view", { class: "left" }, [
            vue.createElementVNode("image", {
              style: { "width": "40rpx", "height": "40rpx" },
              class: "searchIcon",
              src: "/static/image/icon/search.png",
              mode: "aspectFit"
            }),
            vue.withDirectives(vue.createElementVNode(
              "input",
              {
                "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => $data.searchText = $event),
                class: "searchInput",
                type: "text",
                placeholder: "城市/区域/位置",
                "confirm-type": "search",
                onInput: _cache[1] || (_cache[1] = (...args) => $options.hanldeInput && $options.hanldeInput(...args))
              },
              null,
              544
              /* HYDRATE_EVENTS, NEED_PATCH */
            ), [
              [vue.vModelText, $data.searchText]
            ]),
            vue.createElementVNode("image", {
              onClick: _cache[2] || (_cache[2] = (...args) => $options.cleanText && $options.cleanText(...args)),
              style: { "width": "32rpx", "height": "32rpx", "margin-right": "14rpx", "margin-top": "24rpx" },
              class: "searchIcon",
              src: "/static/image/icon/fail.png",
              mode: "aspectFit"
            })
          ]),
          vue.createElementVNode("view", {
            class: "right",
            onClick: _cache[3] || (_cache[3] = (...args) => $options.nvBack && $options.nvBack(...args))
          }, "取消")
        ]),
        !$data.searchText ? (vue.openBlock(), vue.createElementBlock("view", {
          key: 0,
          class: "cities"
        }, [
          vue.createElementVNode("view", {
            class: "location",
            "hover-class": "locationHover",
            "hover-stay-time": "900",
            onClick: _cache[4] || (_cache[4] = (...args) => $options.getMylocation && $options.getMylocation(...args))
          }, [
            vue.createElementVNode("view", { class: "title" }, "当前位置"),
            vue.createElementVNode("view", { class: "address" }, [
              vue.createElementVNode("image", {
                class: "icon",
                src: "/static/image/icon/location2.png",
                mode: "aspectFit"
              }),
              vue.createTextVNode(
                " " + vue.toDisplayString($data.street),
                1
                /* TEXT */
              )
            ])
          ]),
          $data.historyList.length != 0 ? (vue.openBlock(), vue.createElementBlock("view", {
            key: 0,
            class: "history",
            id: "history"
          }, [
            vue.createElementVNode("view", { class: "titleWrapper" }, [
              vue.createElementVNode("view", { class: "title" }, "历史城市"),
              vue.createElementVNode("view", {
                class: "clear",
                onClick: _cache[5] || (_cache[5] = (...args) => $options.clearHistory && $options.clearHistory(...args))
              }, "清空")
            ]),
            vue.createElementVNode("view", { class: "historyList" }, [
              (vue.openBlock(true), vue.createElementBlock(
                vue.Fragment,
                null,
                vue.renderList($data.historyList, (item, index2) => {
                  return vue.openBlock(), vue.createElementBlock("view", {
                    class: "historyListItem",
                    "hover-class": "locationHover",
                    "hover-stay-time": "900",
                    onClick: ($event) => $options.sendData(item)
                  }, [
                    item.cityName ? (vue.openBlock(), vue.createElementBlock(
                      "text",
                      {
                        key: 0,
                        class: "textOverflow"
                      },
                      vue.toDisplayString(item.cityName),
                      1
                      /* TEXT */
                    )) : vue.createCommentVNode("v-if", true),
                    item.name ? (vue.openBlock(), vue.createElementBlock(
                      "text",
                      {
                        key: 1,
                        class: "textOverflow"
                      },
                      vue.toDisplayString(item.name),
                      1
                      /* TEXT */
                    )) : vue.createCommentVNode("v-if", true)
                  ], 8, ["onClick"]);
                }),
                256
                /* UNKEYED_FRAGMENT */
              )),
              vue.createElementVNode("i"),
              vue.createElementVNode("i")
            ])
          ])) : vue.createCommentVNode("v-if", true),
          vue.createElementVNode("view", { class: "hotCities" }, [
            vue.createElementVNode("view", {
              class: "title",
              id: "hots"
            }, "热门城市"),
            vue.createElementVNode("view", { class: "hotCitiesList" }, [
              (vue.openBlock(true), vue.createElementBlock(
                vue.Fragment,
                null,
                vue.renderList($data.hotCities, (item, index2) => {
                  return vue.openBlock(), vue.createElementBlock("view", {
                    class: "hotCityItem",
                    "hover-class": "locationHover",
                    "hover-stay-time": "900",
                    onClick: ($event) => $options.sendData(item)
                  }, vue.toDisplayString(item.cityName), 9, ["onClick"]);
                }),
                256
                /* UNKEYED_FRAGMENT */
              ))
            ])
          ]),
          vue.createElementVNode("view", { class: "citiesList" }, [
            (vue.openBlock(true), vue.createElementBlock(
              vue.Fragment,
              null,
              vue.renderList($data.cities, (item, index2) => {
                return vue.openBlock(), vue.createElementBlock("view", { class: "cityGroup" }, [
                  vue.createElementVNode("view", {
                    class: "groupLetter title",
                    id: item.group
                  }, vue.toDisplayString(item.group), 9, ["id"]),
                  (vue.openBlock(true), vue.createElementBlock(
                    vue.Fragment,
                    null,
                    vue.renderList(item.cities, (city, index3) => {
                      return vue.openBlock(), vue.createElementBlock("view", {
                        class: "cityName",
                        "hover-class": "cityHover",
                        onClick: ($event) => $options.sendData(city)
                      }, vue.toDisplayString(city.cityName), 9, ["onClick"]);
                    }),
                    256
                    /* UNKEYED_FRAGMENT */
                  ))
                ]);
              }),
              256
              /* UNKEYED_FRAGMENT */
            ))
          ]),
          vue.createElementVNode("view", { class: "scrollBottom" })
        ])) : vue.createCommentVNode("v-if", true),
        $data.searchText ? (vue.openBlock(), vue.createElementBlock("view", {
          key: 1,
          class: "searchTip-container"
        }, [
          $data.isTips ? (vue.openBlock(), vue.createElementBlock("view", {
            key: 0,
            class: "noRecord"
          }, "暂无记录")) : vue.createCommentVNode("v-if", true),
          vue.createElementVNode("view", { class: "tips-list" }, [
            (vue.openBlock(true), vue.createElementBlock(
              vue.Fragment,
              null,
              vue.renderList($data.tips, (item, index2) => {
                return vue.openBlock(), vue.createElementBlock("view", {
                  class: "tip-item",
                  key: index2,
                  onClick: ($event) => $options.sendData(item)
                }, [
                  vue.createElementVNode("view", {
                    class: "tipName",
                    innerHTML: $options.highLight(item.name)
                  }, null, 8, ["innerHTML"]),
                  vue.createElementVNode(
                    "view",
                    { class: "district" },
                    vue.toDisplayString(item.district),
                    1
                    /* TEXT */
                  )
                ], 8, ["onClick"]);
              }),
              128
              /* KEYED_FRAGMENT */
            ))
          ]),
          vue.createElementVNode("view", { class: "scrollBottom" })
        ])) : vue.createCommentVNode("v-if", true)
      ]),
      vue.createCommentVNode(" 侧边索引 "),
      !$data.searchText ? (vue.openBlock(), vue.createElementBlock("view", {
        key: 0,
        class: "sideBar"
      }, [
        vue.createElementVNode("view", { class: "letter" }, [
          vue.createElementVNode("a", { href: "#hots" }, "热门")
        ]),
        $data.historyList.length != 0 ? (vue.openBlock(), vue.createElementBlock("view", {
          key: 0,
          class: "letter"
        }, [
          vue.createElementVNode("a", { href: "#history" }, "历史")
        ])) : vue.createCommentVNode("v-if", true),
        (vue.openBlock(true), vue.createElementBlock(
          vue.Fragment,
          null,
          vue.renderList($data.letterGroup, (item, index2) => {
            return vue.openBlock(), vue.createElementBlock("view", {
              class: "letter",
              key: item,
              "hover-class": "textHoverOrange",
              "hover-stay-time": "700"
            }, [
              vue.createElementVNode("a", {
                href: "#" + item
              }, vue.toDisplayString(item), 9, ["href"])
            ]);
          }),
          128
          /* KEYED_FRAGMENT */
        ))
      ])) : vue.createCommentVNode("v-if", true),
      $data.isLoading ? (vue.openBlock(), vue.createElementBlock("image", {
        key: 1,
        class: "loading",
        src: "/static/image/icon/loading.gif",
        mode: "aspectFit"
      })) : vue.createCommentVNode("v-if", true)
    ]);
  }
  const PagesSelectCitySelectCity = /* @__PURE__ */ _export_sfc(_sfc_main$8, [["render", _sfc_render$7], ["__file", "D:/HLTrip/hl/pages/selectCity/selectCity.vue"]]);
  const _sfc_main$7 = {
    data() {
      return {};
    },
    methods: {}
  };
  function _sfc_render$6(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("view", null, " 这是消息 ");
  }
  const PagesComponentsMessageMessage = /* @__PURE__ */ _export_sfc(_sfc_main$7, [["render", _sfc_render$6], ["__file", "D:/HLTrip/hl/pages/Components/message/message.vue"]]);
  const _sfc_main$6 = {
    data() {
      return {
        phoneNumber: "",
        password: "",
        code: "",
        text: "",
        messageText: "",
        codeIsSended: false,
        codeText: 60,
        msgType: ""
      };
    },
    methods: {
      register() {
        if (!this.isRegAct) {
          return false;
        }
        uni.request({
          url: `${API.BASE_URL}/register`,
          //仅为示例，并非真实接口地址。
          data: {
            phoneNumber: this.phoneNumber,
            password: this.password,
            code: this.code
          },
          method: "POST",
          success: (res) => {
            if (res.data.requestStatus == "304") {
              this.messageText = res.data.dataDesc;
              this.msgType = "warn";
              this.$refs.message.open();
              setTimeout(() => {
                uni.navigateTo({
                  url: `/pages/login/login?phoneNumber=${this.phoneNumber}&code=${this.code}`
                });
              }, 1e3);
            } else if (res.data.requestStatus == "200") {
              this.msgType = "success";
              this.messageText = "注册成功";
              const { data: data2 } = res.data;
              this.$refs.message.open();
              uni.setStorageSync("phoneNumber", data2.phoneNumber);
              uni.setStorageSync("userId", data2.userId);
              uni.setStorageSync("token", data2.token);
              setTimeout(() => {
                uni.switchTab({
                  url: "/pages/Components/home/home"
                });
              }, 1e3);
            } else {
              this.messageText = res.data.dataDesc;
              this.msgType = "warn";
              this.$refs.message.open();
            }
          },
          fail: (err2) => {
            formatAppLog("log", "at pages/register/register.vue:99", err2);
          }
        });
      },
      registerCode() {
        if (this.phoneNumber.length != 11) {
          return false;
        }
        this.codeIsSended = true;
        const timer = setInterval(() => {
          if (this.codeText > 0) {
            this.codeText--;
          } else {
            this.codeIsSended = false;
            this.codeText = 60;
            clearInterval(timer);
          }
        }, 1e3);
        uni.request({
          url: `${API.BASE_URL}/getVerify`,
          //仅为示例，并非真实接口地址。
          data: {
            phoneNumber: this.phoneNumber,
            type: "注册"
          },
          method: "POST",
          success: (res) => {
          }
        });
      }
    },
    computed: {
      isPhone() {
        if (this.phoneNumber != "" && this.phoneNumber.length == 11) {
          return true;
        } else {
          return false;
        }
      },
      isCode() {
        if (this.phoneNumber != "" && this.phoneNumber.length == 11 && this.code.length == 6) {
          return true;
        } else {
          return false;
        }
      },
      isRegAct() {
        if (this.phoneNumber.length == 11 && this.password != "" && this.code.length == 6) {
          return true;
        } else {
          return false;
        }
      }
    },
    onLoad: function(option) {
      if (option.phoneNumber != void 0) {
        this.phoneNumber = option.phoneNumber;
      }
      if (option.password != void 0) {
        this.password = option.password;
      }
    }
  };
  function _sfc_render$5(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_uni_popup_message = resolveEasycom(vue.resolveDynamicComponent("uni-popup-message"), __easycom_2$1);
    const _component_uni_popup = resolveEasycom(vue.resolveDynamicComponent("uni-popup"), __easycom_1$2);
    return vue.openBlock(), vue.createElementBlock("view", null, [
      vue.createElementVNode("div", { class: "topbar" }),
      vue.createElementVNode("view", { class: "title-wrapper" }, [
        vue.createElementVNode("view", { class: "sidebar" }),
        vue.createElementVNode("view", { class: "title" }, "注册")
      ]),
      vue.createElementVNode("view", { class: "phoneNumber" }, [
        vue.createElementVNode("view", { class: "phoneNumber-wrapper" }, [
          vue.createElementVNode("view", { class: "prefix" }, "+86"),
          vue.withDirectives(vue.createElementVNode(
            "input",
            {
              type: "number",
              class: "phoneNumber-input",
              placeholder: "请输入手机号",
              "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => $data.phoneNumber = $event),
              maxlength: "11"
            },
            null,
            512
            /* NEED_PATCH */
          ), [
            [vue.vModelText, $data.phoneNumber]
          ])
        ]),
        vue.createElementVNode("view", { class: "phoneNumber-wrapper code" }, [
          vue.withDirectives(vue.createElementVNode(
            "input",
            {
              type: "password",
              class: "phoneNumber-input",
              placeholder: "请输入密码",
              "onUpdate:modelValue": _cache[1] || (_cache[1] = ($event) => $data.password = $event)
            },
            null,
            512
            /* NEED_PATCH */
          ), [
            [vue.vModelText, $data.password]
          ])
        ]),
        vue.createElementVNode("view", { class: "phoneNumber-wrapper code" }, [
          vue.withDirectives(vue.createElementVNode(
            "input",
            {
              type: "tel",
              class: "phoneNumber-input",
              placeholder: "请输入验证码",
              "onUpdate:modelValue": _cache[2] || (_cache[2] = ($event) => $data.code = $event),
              maxlength: "6"
            },
            null,
            512
            /* NEED_PATCH */
          ), [
            [vue.vModelText, $data.code]
          ]),
          vue.createElementVNode(
            "view",
            {
              class: vue.normalizeClass(["timelimit", { "textColor": $options.isPhone }])
            },
            [
              $data.codeIsSended ? (vue.openBlock(), vue.createElementBlock(
                "text",
                { key: 0 },
                vue.toDisplayString($data.codeText) + "s",
                1
                /* TEXT */
              )) : (vue.openBlock(), vue.createElementBlock("text", {
                key: 1,
                onClick: _cache[3] || (_cache[3] = (...args) => $options.registerCode && $options.registerCode(...args))
              }, "获取验证码"))
            ],
            2
            /* CLASS */
          )
        ])
      ]),
      vue.createElementVNode(
        "view",
        {
          class: vue.normalizeClass(["getCodeBtn", { "btnActive": $options.isRegAct }]),
          onClick: _cache[4] || (_cache[4] = (...args) => $options.register && $options.register(...args))
        },
        " 注册 ",
        2
        /* CLASS */
      ),
      vue.createCommentVNode(" 提示信息弹窗 "),
      vue.createCommentVNode(" 提示信息弹窗 "),
      vue.createVNode(
        _component_uni_popup,
        {
          ref: "message",
          type: "message"
        },
        {
          default: vue.withCtx(() => [
            vue.createVNode(_component_uni_popup_message, {
              type: $data.msgType,
              message: $data.messageText,
              duration: 2e3
            }, null, 8, ["type", "message"])
          ]),
          _: 1
          /* STABLE */
        },
        512
        /* NEED_PATCH */
      )
    ]);
  }
  const PagesRegisterRegister = /* @__PURE__ */ _export_sfc(_sfc_main$6, [["render", _sfc_render$5], ["__file", "D:/HLTrip/hl/pages/register/register.vue"]]);
  const _sfc_main$5 = {
    data() {
      return {
        phoneNumber: "",
        password: "",
        messageText: "",
        codeIsSended: false,
        codeText: 60,
        msgType: "",
        duration: 2e3
      };
    },
    methods: {
      login() {
        if (!this.isCode) {
          return false;
        }
        uni.request({
          url: `${API.BASE_URL}/loginByPwd`,
          //仅为示例，并非真实接口地址。
          data: {
            phoneNumber: this.phoneNumber,
            password: this.password
          },
          method: "POST",
          success: (res) => {
            formatAppLog("log", "at pages/loginByPwd/loginByPwd.vue:65", res.data);
            const { data: data2 } = res.data;
            if (res.data.requestStatus == "200") {
              this.msgType = "success";
              this.messageText = "登录成功";
              this.$refs.message.open();
              uni.setStorageSync("phoneNumber", data2.phoneNumber);
              uni.setStorageSync("userId", data2.userId);
              uni.setStorageSync("token", data2.token);
              setTimeout(() => {
                uni.switchTab({
                  url: "/pages/Components/home/home"
                });
              }, 1e3);
            } else if (res.data.requestStatus == "304") {
              this.messageText = res.data.dataDesc + ",为您跳转到注册";
              this.msgType = "error";
              this.$refs.message.open();
              setTimeout(() => {
                uni.navigateTo({
                  url: `/pages/register/register?phoneNumber=${this.phoneNumber}&password=${this.password}`
                });
              }, 1300);
            } else {
              formatAppLog("log", "at pages/loginByPwd/loginByPwd.vue:89", res.data);
              this.messageText = res.data.dataDesc;
              this.msgType = "error";
              this.$refs.message.open();
            }
          },
          fail: (err2) => {
            this.msgType = "登录超时";
            this.$refs.message.open();
            formatAppLog("log", "at pages/loginByPwd/loginByPwd.vue:99", err2);
          }
        });
      },
      dialogConfirm() {
        uni.navigateTo({
          url: `/pages/register/register?phoneNumber=${this.phoneNumber}`
        });
      },
      toLogin() {
        uni.redirectTo({
          url: "/pages/login/login"
        });
      },
      toFPwd() {
        uni.navigateTo({
          url: "/pages/resetPwd/resetPwd"
        });
      }
    },
    computed: {
      isCode() {
        if (this.phoneNumber.length == 11 && this.password.length >= 8) {
          return true;
        } else {
          return false;
        }
      }
    },
    onLoad: function(option) {
      if (option.phoneNumber != void 0) {
        this.phoneNumber = option.phoneNumber;
      }
      if (option.password != void 0) {
        this.password = option.password;
      }
    }
  };
  function _sfc_render$4(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_uni_popup_dialog = resolveEasycom(vue.resolveDynamicComponent("uni-popup-dialog"), __easycom_0$5);
    const _component_uni_popup = resolveEasycom(vue.resolveDynamicComponent("uni-popup"), __easycom_1$2);
    const _component_uni_popup_message = resolveEasycom(vue.resolveDynamicComponent("uni-popup-message"), __easycom_2$1);
    return vue.openBlock(), vue.createElementBlock("view", null, [
      vue.createElementVNode("div", { class: "topbar" }),
      vue.createElementVNode("view", { class: "title-wrapper" }, [
        vue.createElementVNode("view", { class: "sidebar" }),
        vue.createElementVNode("view", { class: "title" }, "登录")
      ]),
      vue.createElementVNode("view", { class: "phoneNumber" }, [
        vue.createElementVNode("view", { class: "phoneNumber-wrapper" }, [
          vue.withDirectives(vue.createElementVNode(
            "input",
            {
              type: "number",
              class: "phoneNumber-input",
              placeholder: "请输入手机号",
              "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => $data.phoneNumber = $event),
              maxlength: "11"
            },
            null,
            512
            /* NEED_PATCH */
          ), [
            [vue.vModelText, $data.phoneNumber]
          ])
        ]),
        vue.createElementVNode("view", { class: "phoneNumber-wrapper code" }, [
          vue.withDirectives(vue.createElementVNode(
            "input",
            {
              type: "password",
              class: "phoneNumber-input",
              placeholder: "请输入密码",
              "onUpdate:modelValue": _cache[1] || (_cache[1] = ($event) => $data.password = $event)
            },
            null,
            512
            /* NEED_PATCH */
          ), [
            [vue.vModelText, $data.password]
          ])
        ])
      ]),
      vue.createElementVNode("view", { class: "switchLoginMethod" }, [
        vue.createElementVNode("text", {
          class: "left",
          onClick: _cache[2] || (_cache[2] = (...args) => $options.toLogin && $options.toLogin(...args))
        }, "用验证码登录"),
        vue.createElementVNode("text", {
          onClick: _cache[3] || (_cache[3] = (...args) => $options.toFPwd && $options.toFPwd(...args))
        }, "忘记密码?")
      ]),
      vue.createElementVNode(
        "view",
        {
          class: vue.normalizeClass(["getCodeBtn", { "btnActive": $options.isCode }]),
          onClick: _cache[4] || (_cache[4] = (...args) => $options.login && $options.login(...args))
        },
        " 登录 ",
        2
        /* CLASS */
      ),
      vue.createCommentVNode(" 提示信息弹窗 "),
      vue.createCommentVNode(" 提示窗示例 "),
      vue.createVNode(
        _component_uni_popup,
        {
          ref: "alertDialog",
          type: "dialog"
        },
        {
          default: vue.withCtx(() => [
            vue.createVNode(_component_uni_popup_dialog, {
              type: "info",
              cancelText: "关闭",
              confirmText: "确定",
              title: "提示",
              content: "该账号未注册，将为您跳转到注册页面",
              onConfirm: $options.dialogConfirm
            }, null, 8, ["onConfirm"])
          ]),
          _: 1
          /* STABLE */
        },
        512
        /* NEED_PATCH */
      ),
      vue.createVNode(
        _component_uni_popup,
        {
          ref: "message",
          type: "message"
        },
        {
          default: vue.withCtx(() => [
            vue.createVNode(_component_uni_popup_message, {
              type: $data.msgType,
              message: $data.messageText,
              duration: $data.duration
            }, null, 8, ["type", "message", "duration"])
          ]),
          _: 1
          /* STABLE */
        },
        512
        /* NEED_PATCH */
      )
    ]);
  }
  const PagesLoginByPwdLoginByPwd = /* @__PURE__ */ _export_sfc(_sfc_main$5, [["render", _sfc_render$4], ["__file", "D:/HLTrip/hl/pages/loginByPwd/loginByPwd.vue"]]);
  const _sfc_main$4 = {
    data() {
      return {
        phoneNumber: "",
        password: "",
        code: "",
        text: "",
        messageText: "",
        codeIsSended: false,
        codeText: 60,
        msgType: ""
      };
    },
    methods: {
      register() {
        if (!this.isRegAct) {
          return false;
        }
        uni.request({
          url: `${API.BASE_URL}/resetPwd`,
          //仅为示例，并非真实接口地址。
          data: {
            phoneNumber: this.phoneNumber,
            newPwd: this.password,
            code: this.code
          },
          method: "POST",
          success: (res) => {
            formatAppLog("log", "at pages/resetPwd/resetPwd.vue:68", res.data);
            if (res.data.requestStatus == "200") {
              this.messageText = res.data.dataDesc;
              this.msgType = "success";
              this.$refs.message.open();
              setTimeout(() => {
                uni.navigateTo({
                  url: `/pages/loginByPwd/loginByPwd?phoneNumber=${this.phoneNumber}&password=${this.password}`
                });
              }, 1e3);
            } else {
              this.messageText = res.data.dataDesc;
              this.msgType = "error";
              this.$refs.message.open();
            }
          },
          fail: (err2) => {
            formatAppLog("log", "at pages/resetPwd/resetPwd.vue:85", err2);
          }
        });
      },
      registerCode() {
        if (this.phoneNumber.length != 11) {
          return false;
        }
        this.codeIsSended = true;
        const timer = setInterval(() => {
          if (this.codeText > 0) {
            this.codeText--;
          } else {
            this.codeIsSended = false;
            this.codeText = 60;
            clearInterval(timer);
          }
        }, 1e3);
        uni.request({
          url: `${API.BASE_URL}/getVerify`,
          //仅为示例，并非真实接口地址。
          data: {
            phoneNumber: this.phoneNumber,
            type: "找回密码"
          },
          method: "POST",
          success: (res) => {
          }
        });
      }
    },
    computed: {
      isPhone() {
        if (this.phoneNumber != "" && this.phoneNumber.length == 11) {
          return true;
        } else {
          return false;
        }
      },
      isCode() {
        if (this.phoneNumber != "" && this.phoneNumber.length == 11 && this.code.length == 6) {
          return true;
        } else {
          return false;
        }
      },
      isRegAct() {
        if (this.phoneNumber.length == 11 && this.password != "" && this.code.length == 6) {
          return true;
        } else {
          return false;
        }
      }
    },
    onLoad: function(option) {
      if (option.phoneNumber != void 0) {
        this.phoneNumber = option.phoneNumber;
      }
      if (option.password != void 0) {
        this.password = option.password;
      }
    }
  };
  function _sfc_render$3(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_uni_popup_message = resolveEasycom(vue.resolveDynamicComponent("uni-popup-message"), __easycom_2$1);
    const _component_uni_popup = resolveEasycom(vue.resolveDynamicComponent("uni-popup"), __easycom_1$2);
    return vue.openBlock(), vue.createElementBlock("view", null, [
      vue.createElementVNode("div", { class: "topbar" }),
      vue.createElementVNode("view", { class: "title-wrapper" }, [
        vue.createElementVNode("view", { class: "sidebar" }),
        vue.createElementVNode("view", { class: "title" }, "找回密码")
      ]),
      vue.createElementVNode("view", { class: "phoneNumber" }, [
        vue.createElementVNode("view", { class: "phoneNumber-wrapper" }, [
          vue.createElementVNode("view", { class: "prefix" }, "+86"),
          vue.withDirectives(vue.createElementVNode(
            "input",
            {
              type: "number",
              class: "phoneNumber-input",
              placeholder: "请输入手机号",
              "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => $data.phoneNumber = $event),
              maxlength: "11"
            },
            null,
            512
            /* NEED_PATCH */
          ), [
            [vue.vModelText, $data.phoneNumber]
          ])
        ]),
        vue.createElementVNode("view", { class: "phoneNumber-wrapper code" }, [
          vue.withDirectives(vue.createElementVNode(
            "input",
            {
              type: "password",
              class: "phoneNumber-input",
              placeholder: "请输入新密码",
              "onUpdate:modelValue": _cache[1] || (_cache[1] = ($event) => $data.password = $event)
            },
            null,
            512
            /* NEED_PATCH */
          ), [
            [vue.vModelText, $data.password]
          ])
        ]),
        vue.createElementVNode("view", { class: "phoneNumber-wrapper code" }, [
          vue.withDirectives(vue.createElementVNode(
            "input",
            {
              type: "tel",
              class: "phoneNumber-input",
              placeholder: "请输入验证码",
              "onUpdate:modelValue": _cache[2] || (_cache[2] = ($event) => $data.code = $event),
              maxlength: "6"
            },
            null,
            512
            /* NEED_PATCH */
          ), [
            [vue.vModelText, $data.code]
          ]),
          vue.createElementVNode(
            "view",
            {
              class: vue.normalizeClass(["timelimit", { "textColor": $options.isPhone }])
            },
            [
              $data.codeIsSended ? (vue.openBlock(), vue.createElementBlock(
                "text",
                { key: 0 },
                vue.toDisplayString($data.codeText) + "s",
                1
                /* TEXT */
              )) : (vue.openBlock(), vue.createElementBlock("text", {
                key: 1,
                onClick: _cache[3] || (_cache[3] = (...args) => $options.registerCode && $options.registerCode(...args))
              }, "获取验证码"))
            ],
            2
            /* CLASS */
          )
        ])
      ]),
      vue.createElementVNode(
        "view",
        {
          class: vue.normalizeClass(["getCodeBtn", { "btnActive": $options.isRegAct }]),
          onClick: _cache[4] || (_cache[4] = (...args) => $options.register && $options.register(...args))
        },
        " 修改密码 ",
        2
        /* CLASS */
      ),
      vue.createCommentVNode(" 提示信息弹窗 "),
      vue.createCommentVNode(" 提示信息弹窗 "),
      vue.createVNode(
        _component_uni_popup,
        {
          ref: "message",
          type: "message"
        },
        {
          default: vue.withCtx(() => [
            vue.createVNode(_component_uni_popup_message, {
              type: $data.msgType,
              message: $data.messageText,
              duration: 2e3
            }, null, 8, ["type", "message"])
          ]),
          _: 1
          /* STABLE */
        },
        512
        /* NEED_PATCH */
      )
    ]);
  }
  const PagesResetPwdResetPwd = /* @__PURE__ */ _export_sfc(_sfc_main$4, [["render", _sfc_render$3], ["__file", "D:/HLTrip/hl/pages/resetPwd/resetPwd.vue"]]);
  const _sfc_main$3 = {
    data() {
      return {
        location: "",
        latitude: 0,
        longitude: 0,
        covers: [
          {
            latitude: 0,
            longitude: 0,
            iconPath: "../../static/image/icon/3x/bubble_2.png"
          },
          {
            latitude: 0,
            longitude: 0,
            iconPath: "../../static/image/icon/2x/myPos.png"
          }
        ]
      };
    },
    onBackPress() {
      try {
        this.$nextTick(() => {
          plus.navigator.setStatusBarStyle("light");
        });
      } catch (error2) {
        formatAppLog("log", "at pages/mapView/mapView.vue:61", err);
      }
    },
    methods: {
      toMyPos() {
        uni.getLocation({
          type: "gcj02",
          //返回可以用于uni.openLocation的经纬度
          success: function(res) {
            this.covers[1].latitude = res.latitude;
            this.covers[1].longitude = res.longitude;
            formatAppLog("log", "at pages/mapView/mapView.vue:71", this);
          }.bind(this)
        });
        this.latitude = this.covers[1].latitude;
        this.longitude = this.covers[1].longitude;
      },
      toTarget() {
        this.latitude = this.covers[0].latitude;
        this.longitude = this.covers[0].longitude;
      },
      navigate() {
        uni.openLocation({
          latitude: this.covers[0].latitude,
          longitude: this.covers[0].longitude
        });
      },
      nvback() {
        try {
          this.$nextTick(() => {
            plus.navigator.setStatusBarStyle("light");
          });
        } catch (error2) {
          formatAppLog("log", "at pages/mapView/mapView.vue:94", err);
        }
        uni.navigateBack({
          delta: 1
        });
      }
    },
    onLoad: function(option) {
      this.location = option.location;
      const locationArr = this.location.split(",");
      formatAppLog("log", "at pages/mapView/mapView.vue:105", locationArr);
      this.covers[0].longitude = parseFloat(locationArr[0]);
      this.covers[0].latitude = parseFloat(locationArr[1]);
      this.longitude = parseFloat(locationArr[0]);
      this.latitude = parseFloat(locationArr[1]);
      uni.getLocation({
        type: "gcj02",
        //返回可以用于uni.openLocation的经纬度
        success: function(res) {
          this.covers[1].latitude = res.latitude;
          this.covers[1].longitude = res.longitude;
          formatAppLog("log", "at pages/mapView/mapView.vue:115", this);
        }.bind(this)
      });
    }
  };
  function _sfc_render$2(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("view", null, [
      vue.createElementVNode("view", { class: "topbar" }, [
        vue.createElementVNode("view", {
          class: "left",
          onClick: _cache[0] || (_cache[0] = (...args) => $options.nvback && $options.nvback(...args))
        }, [
          vue.createElementVNode("image", {
            class: "topbar-icon leftIco",
            src: "/static/image/icon/back_balck.png",
            mode: "aspectFit"
          })
        ]),
        vue.createTextVNode(" 周边 "),
        vue.createElementVNode("view", { class: "right" }, [
          vue.createElementVNode("image", {
            class: "topbar-icon rightIco",
            src: "/static/image/icon/message_white.png",
            mode: "aspectFit"
          }),
          vue.createCommentVNode(' <image class="topbar-icon rightIco" src="../../static/image/icon/message_black.png" mode="aspectFit" /> ')
        ])
      ]),
      vue.createElementVNode("view", { class: "mapview" }, [
        vue.createElementVNode("map", {
          id: "map",
          style: { "width": "100vw", "height": "85vh" },
          latitude: $data.latitude,
          longitude: $data.longitude,
          markers: $data.covers,
          scale: "18"
        }, null, 8, ["latitude", "longitude", "markers"]),
        vue.createElementVNode("view", { class: "ctrlWrapper" }, [
          vue.createElementVNode("view", {
            class: "clcontrols",
            onClick: _cache[1] || (_cache[1] = (...args) => $options.toMyPos && $options.toMyPos(...args))
          }, [
            vue.createElementVNode("image", {
              class: "ico",
              src: "/static/image/icon/currentLocation.png",
              mode: "aspectFit"
            })
          ]),
          vue.createElementVNode("view", {
            class: "tlcontrols",
            onClick: _cache[2] || (_cache[2] = (...args) => $options.toTarget && $options.toTarget(...args))
          }, [
            vue.createElementVNode("image", {
              class: "ico",
              src: "/static/image/icon/location2.png",
              mode: "aspectFit"
            })
          ]),
          vue.createElementVNode("view", {
            class: "tlcontrols",
            onClick: _cache[3] || (_cache[3] = (...args) => $options.navigate && $options.navigate(...args))
          }, [
            vue.createElementVNode("image", {
              class: "ico",
              src: "/static/image/icon/navigator.png",
              mode: "aspectFit"
            })
          ])
        ])
      ])
    ]);
  }
  const PagesMapViewMapView = /* @__PURE__ */ _export_sfc(_sfc_main$3, [["render", _sfc_render$2], ["__file", "D:/HLTrip/hl/pages/mapView/mapView.vue"]]);
  const _sfc_main$2 = {
    data() {
      return {
        avatar: "",
        nickname: "",
        phonenumber: "",
        editNameL: false,
        tiptext: ""
      };
    },
    methods: {
      nvback() {
        uni.navigateBack();
      },
      chooseImage() {
        uni.chooseImage({
          count: 1,
          //默认9
          sizeType: ["original", "compressed"],
          //可以指定是原图还是压缩图，默认二者都有
          sourceType: ["album", "camera"],
          //从相册选择
          success: function(res) {
            res.tempFilePaths.forEach((filePath) => {
              uni.uploadFile({
                url: `${API.BASE_URL}/uploadImage`,
                filePath,
                name: "file",
                formData: {
                  // 其他参数
                  uid: uni.getStorageSync("userId"),
                  role: "tenant"
                },
                success: (uploadFileRes) => {
                  if (uploadFileRes.data != "error") {
                    this.avatar = uploadFileRes.data;
                  }
                },
                fail: (uploadFileRes) => {
                  formatAppLog("log", "at pages/editLprofile/editLprofile.vue:75", uploadFileRes);
                }
              });
            });
          }.bind(this)
        });
      },
      changeProfile() {
        if (this.canNext) {
          uni.request({
            url: `${API.BASE_URL}/changeLProfile`,
            data: {
              name: this.nickname,
              avatar: this.avatar,
              lid: uni.getStorageSync("landlordid")
            },
            success: (res) => {
              if (res.data) {
                formatAppLog("log", "at pages/editLprofile/editLprofile.vue:93", "修改成功");
                this.tiptext = "修改成功";
                this.$refs.alertDialog.open("info");
              } else {
                this.tiptext = "修改失败";
                this.$refs.alertDialog.open("info");
                formatAppLog("log", "at pages/editLprofile/editLprofile.vue:99", "修改失败");
              }
            }
          });
        } else {
          this.$refs.message.open();
        }
      },
      dialogConfirm() {
        uni.navigateBack({
          delta: 1
        });
      }
    },
    onLoad() {
      uni.request({
        url: `${API.BASE_URL}/getLandlordProfileData`,
        //仅为示例，并非真实接口地址。
        data: {
          landlordid: uni.getStorageSync("landlordid")
          // userid: 7
        },
        success: (res) => {
          formatAppLog("log", "at pages/editLprofile/editLprofile.vue:122", res.data);
          this.avatar = res.data.data.landlordProfile.avatar;
          this.nickname = res.data.data.landlordProfile.nickname;
          this.phonenumber = res.data.data.landlordProfile.phonenumber;
        }
      });
    },
    computed: {
      canNext() {
        if (this.avatar != "" && this.nickname != "") {
          return true;
        } else {
          return false;
        }
      }
    }
  };
  function _sfc_render$1(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_uni_popup_dialog = resolveEasycom(vue.resolveDynamicComponent("uni-popup-dialog"), __easycom_0$5);
    const _component_uni_popup = resolveEasycom(vue.resolveDynamicComponent("uni-popup"), __easycom_1$2);
    const _component_uni_popup_message = resolveEasycom(vue.resolveDynamicComponent("uni-popup-message"), __easycom_2$1);
    return vue.openBlock(), vue.createElementBlock("view", null, [
      vue.createElementVNode("view", { class: "statusbar" }),
      vue.createElementVNode("view", { class: "topbar" }, [
        vue.createElementVNode("view", {
          class: "left",
          onClick: _cache[0] || (_cache[0] = (...args) => $options.nvback && $options.nvback(...args))
        }, [
          vue.createElementVNode("image", {
            class: "topbar-icon leftIco",
            src: "/static/image/icon/back_balck.png",
            mode: "aspectFit"
          })
        ]),
        vue.createElementVNode("view", { class: "housename" }, "个人资料"),
        vue.createElementVNode(
          "view",
          {
            class: vue.normalizeClass(["right", { "actived": $options.canNext }]),
            onClick: _cache[1] || (_cache[1] = (...args) => $options.changeProfile && $options.changeProfile(...args))
          },
          " 更改 ",
          2
          /* CLASS */
        )
      ]),
      vue.createElementVNode("view", { class: "content" }, [
        vue.createElementVNode("view", { class: "avatarw p2s" }, [
          vue.createElementVNode("view", {
            class: "left",
            onClick: _cache[2] || (_cache[2] = (...args) => $options.chooseImage && $options.chooseImage(...args))
          }, [
            vue.createElementVNode("image", {
              class: "avatar",
              src: $data.avatar,
              mode: "aspectFill"
            }, null, 8, ["src"])
          ]),
          vue.withDirectives(vue.createElementVNode(
            "input",
            {
              type: "text",
              class: "nameinput",
              "onUpdate:modelValue": _cache[3] || (_cache[3] = ($event) => $data.nickname = $event),
              placeholder: "请输入用户名"
            },
            null,
            512
            /* NEED_PATCH */
          ), [
            [vue.vModelText, $data.nickname]
          ])
        ]),
        vue.createElementVNode("view", { class: "mb" }),
        vue.createElementVNode("view", { class: "phone p2s" }, [
          vue.createElementVNode("div", { class: "left" }, "手机号"),
          vue.createElementVNode(
            "view",
            { class: "right" },
            vue.toDisplayString($data.phonenumber),
            1
            /* TEXT */
          )
        ])
      ]),
      vue.createVNode(
        _component_uni_popup,
        {
          ref: "alertDialog",
          type: "dialog"
        },
        {
          default: vue.withCtx(() => [
            vue.createVNode(_component_uni_popup_dialog, {
              type: "error",
              cancelText: "关闭",
              confirmText: "确定",
              title: "通知",
              content: $data.tiptext,
              onConfirm: $options.dialogConfirm,
              onClose: $options.dialogConfirm
            }, null, 8, ["content", "onConfirm", "onClose"])
          ]),
          _: 1
          /* STABLE */
        },
        512
        /* NEED_PATCH */
      ),
      vue.createVNode(
        _component_uni_popup,
        {
          ref: "message",
          type: "message"
        },
        {
          default: vue.withCtx(() => [
            vue.createVNode(_component_uni_popup_message, {
              type: "warn",
              message: "请输入用户名",
              duration: 2e3
            })
          ]),
          _: 1
          /* STABLE */
        },
        512
        /* NEED_PATCH */
      )
    ]);
  }
  const PagesEditLprofileEditLprofile = /* @__PURE__ */ _export_sfc(_sfc_main$2, [["render", _sfc_render$1], ["__file", "D:/HLTrip/hl/pages/editLprofile/editLprofile.vue"]]);
  const _sfc_main$1 = {
    data() {
      return {
        currentPage: 0,
        allOrder: [],
        wait_pay: [],
        processing: [],
        complete: []
      };
    },
    onLoad(option) {
      if (option.page == void 0) {
        this.currentPage = 0;
      } else {
        this.currentPage = option.page;
      }
      this.getOrderList();
    },
    methods: {
      getOrderList() {
        uni.request({
          url: `${API.BASE_URL}/getLandlordOrders`,
          //仅为示例，并非真实接口地址。
          data: {
            lid: uni.getStorageSync("landlordid")
          },
          success: (res) => {
            formatAppLog("log", "at pages/orderList_landlord/orderList_landlord.vue:175", res.data);
            const orderList = res.data.data.orderList;
            orderList.forEach((element) => {
              element.order.starttime = this.getTime(new Date(element.order.starttime));
              element.order.endtime = this.getTime(new Date(element.order.endtime));
            });
            this.allOrder = orderList;
            this.allOrder.forEach((element) => {
              if (element.order.ostatus == "待支付") {
                this.wait_pay.push(element);
              } else if (element.order.ostatus == "进行中" || element.order.ostatus == "待入住") {
                this.processing.push(element);
              } else if (element.order.ostatus == "已完成") {
                this.complete.push(element);
              }
            });
          }
        });
      },
      nvback() {
        uni.navigateBack();
      },
      getTime(dateObj) {
        const year = dateObj.getFullYear();
        const month = dateObj.getMonth() + 1;
        const date2 = dateObj.getDate();
        const day = dateObj.getDay();
        return {
          year,
          month: month.toString().padStart(2, "0"),
          date: date2.toString().padStart(2, "0"),
          day,
          arr: ["日", "一", "二", "三", "四", "五", "六"],
          timestamp: dateObj
        };
      },
      changePage(index2) {
        this.currentPage = index2;
      },
      toBill(item) {
        uni.navigateTo({
          url: `/pages/orderpay/orderpay?num=${item.order.ordernumber}`
        });
      }
    }
  };
  function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("view", null, [
      vue.createElementVNode("view", { class: "statusbar" }),
      vue.createElementVNode("view", { class: "topbar" }, [
        vue.createElementVNode("view", {
          class: "left",
          onClick: _cache[0] || (_cache[0] = (...args) => $options.nvback && $options.nvback(...args))
        }, [
          vue.createElementVNode("image", {
            class: "topbar-icon leftIco",
            src: "/static/image/icon/back_balck.png",
            mode: "aspectFit"
          })
        ]),
        vue.createElementVNode("view", { class: "housename" }, "全部订单"),
        vue.createElementVNode("view", { class: "right" })
      ]),
      vue.createElementVNode("view", { class: "switchTab" }, [
        vue.createElementVNode(
          "view",
          {
            class: vue.normalizeClass(["item", { "tab_select": $data.currentPage == 0 }]),
            onClick: _cache[1] || (_cache[1] = ($event) => $options.changePage(0))
          },
          "全部",
          2
          /* CLASS */
        ),
        vue.createElementVNode(
          "view",
          {
            class: vue.normalizeClass(["item", { "tab_select": $data.currentPage == 1 }]),
            onClick: _cache[2] || (_cache[2] = ($event) => $options.changePage(1))
          },
          "待支付",
          2
          /* CLASS */
        ),
        vue.createElementVNode(
          "view",
          {
            class: vue.normalizeClass(["item", { "tab_select": $data.currentPage == 2 }]),
            onClick: _cache[3] || (_cache[3] = ($event) => $options.changePage(2))
          },
          "进行中",
          2
          /* CLASS */
        ),
        vue.createElementVNode(
          "view",
          {
            class: vue.normalizeClass(["item", { "tab_select": $data.currentPage == 3 }]),
            onClick: _cache[4] || (_cache[4] = ($event) => $options.changePage(3))
          },
          "已完成",
          2
          /* CLASS */
        )
      ]),
      vue.createElementVNode("scroll-view", {
        "scroll-y": "",
        class: "sw_content"
      }, [
        $data.currentPage == 0 ? (vue.openBlock(), vue.createElementBlock("view", {
          key: 0,
          class: "se_item"
        }, [
          $data.allOrder.length == 0 ? (vue.openBlock(), vue.createElementBlock("view", {
            key: 0,
            class: "empty"
          }, [
            vue.createElementVNode("image", {
              class: "imgept",
              src: "/static/image/empty_bg.png",
              mode: ""
            }),
            vue.createElementVNode("br"),
            vue.createTextVNode(" 暂无相关订单 ")
          ])) : vue.createCommentVNode("v-if", true),
          $data.allOrder.length != 0 ? (vue.openBlock(true), vue.createElementBlock(
            vue.Fragment,
            { key: 1 },
            vue.renderList($data.allOrder, (item, index2) => {
              return vue.openBlock(), vue.createElementBlock("view", {
                class: "commentItem",
                key: index2
              }, [
                vue.createElementVNode("view", {
                  class: "picwrp",
                  onClick: ($event) => $options.toBill(item)
                }, [
                  vue.createElementVNode("view", { class: "left" }, [
                    vue.createElementVNode(
                      "view",
                      {
                        class: vue.normalizeClass(["order_status", { "active": item.order.ostatus == "待支付" }])
                      },
                      vue.toDisplayString(item.order.ostatus),
                      3
                      /* TEXT, CLASS */
                    ),
                    vue.createElementVNode(
                      "view",
                      { class: "housename" },
                      vue.toDisplayString(item.hov.housename),
                      1
                      /* TEXT */
                    ),
                    vue.createElementVNode(
                      "view",
                      { class: "checktime" },
                      vue.toDisplayString(item.order.starttime.month) + "." + vue.toDisplayString(item.order.starttime.date) + " -" + vue.toDisplayString(item.order.endtime.month) + "." + vue.toDisplayString(item.order.endtime.date) + " · " + vue.toDisplayString(item.hov.rentaltype),
                      1
                      /* TEXT */
                    ),
                    vue.createElementVNode(
                      "view",
                      { class: "checktime" },
                      " 金额:￥" + vue.toDisplayString(item.order.totalprice.toFixed(2)),
                      1
                      /* TEXT */
                    )
                  ]),
                  vue.createElementVNode("image", {
                    class: "pic",
                    src: item.hov.coverurl,
                    mode: "aspectFill"
                  }, null, 8, ["src"])
                ], 8, ["onClick"]),
                vue.createElementVNode("view", null, [
                  vue.createElementVNode("view", { class: "bbtn1" }, [
                    vue.createElementVNode("view", { class: "toDetail" }),
                    vue.createElementVNode(
                      "view",
                      { class: "ordernum" },
                      "订单号:" + vue.toDisplayString(item.order.ordernumber),
                      1
                      /* TEXT */
                    )
                  ])
                ])
              ]);
            }),
            128
            /* KEYED_FRAGMENT */
          )) : vue.createCommentVNode("v-if", true)
        ])) : vue.createCommentVNode("v-if", true),
        $data.currentPage == 1 ? (vue.openBlock(), vue.createElementBlock("view", {
          key: 1,
          class: "se_item"
        }, [
          $data.wait_pay.length == 0 ? (vue.openBlock(), vue.createElementBlock("view", {
            key: 0,
            class: "empty"
          }, [
            vue.createElementVNode("image", {
              class: "imgept",
              src: "/static/image/empty_bg.png",
              mode: ""
            }),
            vue.createElementVNode("br"),
            vue.createTextVNode(" 暂无相关订单 ")
          ])) : vue.createCommentVNode("v-if", true),
          $data.wait_pay.length != 0 ? (vue.openBlock(true), vue.createElementBlock(
            vue.Fragment,
            { key: 1 },
            vue.renderList($data.wait_pay, (item, index2) => {
              return vue.openBlock(), vue.createElementBlock("view", {
                class: "commentItem",
                key: index2
              }, [
                vue.createElementVNode("view", {
                  class: "picwrp",
                  onClick: ($event) => $options.toBill(item)
                }, [
                  vue.createElementVNode("view", { class: "left" }, [
                    vue.createElementVNode(
                      "view",
                      {
                        class: vue.normalizeClass(["order_status", { "active": item.order.ostatus == "待支付" }])
                      },
                      vue.toDisplayString(item.order.ostatus),
                      3
                      /* TEXT, CLASS */
                    ),
                    vue.createElementVNode(
                      "view",
                      { class: "housename" },
                      vue.toDisplayString(item.hov.housename),
                      1
                      /* TEXT */
                    ),
                    vue.createElementVNode(
                      "view",
                      { class: "checktime" },
                      vue.toDisplayString(item.order.starttime.month) + "." + vue.toDisplayString(item.order.starttime.date) + " -" + vue.toDisplayString(item.order.endtime.month) + "." + vue.toDisplayString(item.order.endtime.date) + " · " + vue.toDisplayString(item.hov.rentaltype),
                      1
                      /* TEXT */
                    ),
                    vue.createElementVNode(
                      "view",
                      { class: "checktime" },
                      " 金额:￥" + vue.toDisplayString(item.order.totalprice.toFixed(2)),
                      1
                      /* TEXT */
                    )
                  ]),
                  vue.createElementVNode("image", {
                    class: "pic",
                    src: item.hov.coverurl,
                    mode: "aspectFill"
                  }, null, 8, ["src"])
                ], 8, ["onClick"]),
                vue.createElementVNode("view", { class: "bbtn2" }, [
                  vue.createElementVNode("view", { class: "toDetail" }),
                  vue.createElementVNode(
                    "view",
                    { class: "ordernum" },
                    "订单号:" + vue.toDisplayString(item.order.ordernumber),
                    1
                    /* TEXT */
                  )
                ])
              ]);
            }),
            128
            /* KEYED_FRAGMENT */
          )) : vue.createCommentVNode("v-if", true)
        ])) : vue.createCommentVNode("v-if", true),
        $data.currentPage == 2 ? (vue.openBlock(), vue.createElementBlock("view", {
          key: 2,
          class: "se_item"
        }, [
          $data.processing.length == 0 ? (vue.openBlock(), vue.createElementBlock("view", {
            key: 0,
            class: "empty"
          }, [
            vue.createElementVNode("image", {
              class: "imgept",
              src: "/static/image/empty_bg.png",
              mode: ""
            }),
            vue.createElementVNode("br"),
            vue.createTextVNode(" 暂无相关订单 ")
          ])) : vue.createCommentVNode("v-if", true),
          $data.processing.length != 0 ? (vue.openBlock(true), vue.createElementBlock(
            vue.Fragment,
            { key: 1 },
            vue.renderList($data.processing, (item, index2) => {
              return vue.openBlock(), vue.createElementBlock("view", {
                class: "commentItem",
                key: index2
              }, [
                vue.createElementVNode("view", {
                  class: "picwrp",
                  onClick: ($event) => $options.toBill(item)
                }, [
                  vue.createElementVNode("view", { class: "left" }, [
                    vue.createElementVNode(
                      "view",
                      {
                        class: vue.normalizeClass(["order_status", { "active": item.order.ostatus == "待支付" }])
                      },
                      vue.toDisplayString(item.order.ostatus),
                      3
                      /* TEXT, CLASS */
                    ),
                    vue.createElementVNode(
                      "view",
                      { class: "housename" },
                      vue.toDisplayString(item.hov.housename),
                      1
                      /* TEXT */
                    ),
                    vue.createElementVNode(
                      "view",
                      { class: "checktime" },
                      vue.toDisplayString(item.order.starttime.month) + "." + vue.toDisplayString(item.order.starttime.date) + " -" + vue.toDisplayString(item.order.endtime.month) + "." + vue.toDisplayString(item.order.endtime.date) + " · " + vue.toDisplayString(item.hov.rentaltype),
                      1
                      /* TEXT */
                    ),
                    vue.createElementVNode(
                      "view",
                      { class: "checktime" },
                      " 金额:￥" + vue.toDisplayString(item.order.totalprice.toFixed(2)),
                      1
                      /* TEXT */
                    )
                  ]),
                  vue.createElementVNode("image", {
                    class: "pic",
                    src: item.hov.coverurl,
                    mode: "aspectFill"
                  }, null, 8, ["src"])
                ], 8, ["onClick"]),
                vue.createElementVNode("view", null, [
                  vue.createElementVNode("view", { class: "bbtn3" }, [
                    vue.createElementVNode("view", { class: "cancle" }),
                    vue.createElementVNode(
                      "view",
                      { class: "ordernum" },
                      "订单号:" + vue.toDisplayString(item.order.ordernumber),
                      1
                      /* TEXT */
                    )
                  ])
                ])
              ]);
            }),
            128
            /* KEYED_FRAGMENT */
          )) : vue.createCommentVNode("v-if", true)
        ])) : vue.createCommentVNode("v-if", true),
        $data.currentPage == 3 ? (vue.openBlock(), vue.createElementBlock("view", {
          key: 3,
          class: "se_item"
        }, [
          $data.complete.length == 0 ? (vue.openBlock(), vue.createElementBlock("view", {
            key: 0,
            class: "empty"
          }, [
            vue.createElementVNode("image", {
              class: "imgept",
              src: "/static/image/empty_bg.png",
              mode: ""
            }),
            vue.createElementVNode("br"),
            vue.createTextVNode(" 暂无相关订单 ")
          ])) : vue.createCommentVNode("v-if", true),
          $data.complete.length != 0 ? (vue.openBlock(true), vue.createElementBlock(
            vue.Fragment,
            { key: 1 },
            vue.renderList($data.complete, (item, index2) => {
              return vue.openBlock(), vue.createElementBlock("view", {
                class: "commentItem",
                key: index2
              }, [
                vue.createElementVNode("view", {
                  class: "picwrp",
                  onClick: ($event) => $options.toBill(item)
                }, [
                  vue.createElementVNode("view", { class: "left" }, [
                    vue.createElementVNode(
                      "view",
                      {
                        class: vue.normalizeClass(["order_status", { "active": item.order.ostatus == "待支付" }])
                      },
                      vue.toDisplayString(item.order.ostatus),
                      3
                      /* TEXT, CLASS */
                    ),
                    vue.createElementVNode(
                      "view",
                      { class: "housename" },
                      vue.toDisplayString(item.hov.housename),
                      1
                      /* TEXT */
                    ),
                    vue.createElementVNode(
                      "view",
                      { class: "checktime" },
                      vue.toDisplayString(item.order.starttime.month) + "." + vue.toDisplayString(item.order.starttime.date) + " -" + vue.toDisplayString(item.order.endtime.month) + "." + vue.toDisplayString(item.order.endtime.date) + " · " + vue.toDisplayString(item.hov.rentaltype),
                      1
                      /* TEXT */
                    ),
                    vue.createElementVNode(
                      "view",
                      { class: "checktime" },
                      " 金额:￥" + vue.toDisplayString(item.order.totalprice.toFixed(2)),
                      1
                      /* TEXT */
                    )
                  ]),
                  vue.createElementVNode("image", {
                    class: "pic",
                    src: item.hov.coverurl,
                    mode: "aspectFill"
                  }, null, 8, ["src"])
                ], 8, ["onClick"]),
                vue.createElementVNode("view", null, [
                  vue.createElementVNode("view", { class: "bbtn1" }, [
                    vue.createElementVNode("view", { class: "toDetail" }),
                    vue.createElementVNode(
                      "view",
                      { class: "ordernum" },
                      "订单号:" + vue.toDisplayString(item.order.ordernumber),
                      1
                      /* TEXT */
                    )
                  ])
                ])
              ]);
            }),
            128
            /* KEYED_FRAGMENT */
          )) : vue.createCommentVNode("v-if", true)
        ])) : vue.createCommentVNode("v-if", true),
        vue.createElementVNode("view", { class: "mbb" })
      ])
    ]);
  }
  const PagesOrderList_landlordOrderList_landlord = /* @__PURE__ */ _export_sfc(_sfc_main$1, [["render", _sfc_render], ["__file", "D:/HLTrip/hl/pages/orderList_landlord/orderList_landlord.vue"]]);
  __definePage("pages/Components/home/home", PagesComponentsHomeHome);
  __definePage("pages/index/index", PagesIndexIndex);
  __definePage("pages/Components/profile/profile", PagesComponentsProfileProfile);
  __definePage("pages/withdrawal/withdrawal", PagesWithdrawalWithdrawal);
  __definePage("pages/orderList_user/orderList_user", PagesOrderList_userOrderList_user);
  __definePage("pages/comment_reply/comment_reply", PagesComment_replyComment_reply);
  __definePage("pages/landCommentList/landCommentList", PagesLandCommentListLandCommentList);
  __definePage("pages/comment_detail/comment_detail", PagesComment_detailComment_detail);
  __definePage("pages/commentList_user/commentList_user", PagesCommentList_userCommentList_user);
  __definePage("pages/editprofile/editprofile", PagesEditprofileEditprofile);
  __definePage("pages/orderpay/orderpay", PagesOrderpayOrderpay);
  __definePage("pages/commitOrder/commitOrder", PagesCommitOrderCommitOrder);
  __definePage("pages/addContract/addContract", PagesAddContractAddContract);
  __definePage("pages/addCon_text/addCon_text", PagesAddCon_textAddCon_text);
  __definePage("pages/payment/payment", PagesPaymentPayment);
  __definePage("pages/landlordProfile/landlordProfile", PagesLandlordProfileLandlordProfile);
  __definePage("pages/houseManage/houseManage", PagesHouseManageHouseManage);
  __definePage("pages/landlordIntro/landlordIntro", PagesLandlordIntroLandlordIntro);
  __definePage("pages/verifyLandlord/verifyLandlord", PagesVerifyLandlordVerifyLandlord);
  __definePage("pages/upload/upload_overview/upload_overview", PagesUploadUpload_overviewUpload_overview);
  __definePage("pages/upload/upload_image/upload_image", PagesUploadUpload_imageUpload_image);
  __definePage("pages/upload/upload_policy/upload_policy", PagesUploadUpload_policyUpload_policy);
  __definePage("pages/upload/upload_feature/upload_feature", PagesUploadUpload_featureUpload_feature);
  __definePage("pages/upload/upload_textarea/upload_textarea", PagesUploadUpload_textareaUpload_textarea);
  __definePage("pages/upload/upload_facility/upload_facility", PagesUploadUpload_facilityUpload_facility);
  __definePage("pages/landLordDetail/landLordDetail", PagesLandLordDetailLandLordDetail);
  __definePage("pages/searchDetail/searchDetail", PagesSearchDetailSearchDetail);
  __definePage("pages/search/search", PagesSearchSearch);
  __definePage("pages/Components/Favor/Favor", PagesComponentsFavorFavor);
  __definePage("pages/hotelDetail/hotelDetail", PagesHotelDetailHotelDetail);
  __definePage("pages/getFullComment/getFullComment", PagesGetFullCommentGetFullComment);
  __definePage("pages/picDetail/picDetail", PagesPicDetailPicDetail);
  __definePage("pages/login/login", PagesLoginLogin);
  __definePage("pages/selectCity/selectCity", PagesSelectCitySelectCity);
  __definePage("pages/Components/message/message", PagesComponentsMessageMessage);
  __definePage("pages/register/register", PagesRegisterRegister);
  __definePage("pages/loginByPwd/loginByPwd", PagesLoginByPwdLoginByPwd);
  __definePage("pages/resetPwd/resetPwd", PagesResetPwdResetPwd);
  __definePage("pages/mapView/mapView", PagesMapViewMapView);
  __definePage("pages/editLprofile/editLprofile", PagesEditLprofileEditLprofile);
  __definePage("pages/orderList_landlord/orderList_landlord", PagesOrderList_landlordOrderList_landlord);
  const _sfc_main = {
    onLaunch: function() {
      formatAppLog("log", "at App.vue:4", "App Launch");
    },
    onShow: function() {
      formatAppLog("log", "at App.vue:7", "App Show");
    },
    onHide: function() {
      formatAppLog("log", "at App.vue:10", "App Hide");
    }
  };
  const App = /* @__PURE__ */ _export_sfc(_sfc_main, [["__file", "D:/HLTrip/hl/App.vue"]]);
  function createApp() {
    const app = vue.createVueApp(App);
    return {
      app
    };
  }
  const { app: __app__, Vuex: __Vuex__, Pinia: __Pinia__ } = createApp();
  uni.Vuex = __Vuex__;
  uni.Pinia = __Pinia__;
  __app__.provide("__globalStyles", __uniConfig.styles);
  __app__._component.mpType = "app";
  __app__._component.render = () => {
  };
  __app__.mount("#app");
})(Vue, uni.VueShared);
